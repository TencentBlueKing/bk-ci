# 镜像源公共配置
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# RBAC配置
rbac:
  enabled: true
  serviceAccount: bkci
  clusterRole:
    enabled: false
  clusterRoleBinding:
    enabled: false

## Add labels to all the deployed resources
commonLabels: {}

# java 启动参数
java:
  options: ""

# ingress 配置
ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: nginx
nginx-ingress-controller:
  enabled: false
  defaultBackend:
    enabled: false

# 是否安装configmap
configmap:
  enabled: true

# 镜像配置
gatewayImage:
  registry: __image_registry__
  repository: bkci-gateway
  tag: __image_gateway_tag__
  pullPolicy: IfNotPresent 
  pullSecrets: []
backendImage:
  registry: __image_registry__
  repository: bkci-backend
  tag: __image_backend_tag__
  pullPolicy: IfNotPresent 
  pullSecrets: []
frontendImage:
  registry: __image_registry__
  repository: bkci-frontend
  tag: __image_frontend_tag__
  pullPolicy: IfNotPresent 
  pullSecrets: []

# 日志采集配置
bkLogConfig:
  enabled: false
  service:
    dataId: 1
  gatewayAccess:
    dataId: 1
  gatewayError:
    dataId: 1
  turbo:
    enabled: false
    dataId: 1

# 监控
serviceMonitor:
  enabled: false
  turbo:
    enabled: false

# 初始化配置
init:
  sql: true
  iam: true
  turbo: false
  bkrepo: true
  defaultImage: true
  plugin:
    enabled: true
    useProxy: false
    proxyUrl: https://ghproxy.com
    atoms:
    - url: https://github.com/TencentBlueKing/ci-checkout/releases/download/v2.0.13/checkout_en.zip
      code: checkout
    - url: https://github.com/TencentBlueKing/ci-run/releases/download/v1.0.5/run-v1.0.5.zip
      code: run
    - url: https://github.com/TencentBlueKing/ci-SubPipelineExec/releases/download/v1.0.6/ci-SubPipelineExec_en.zip
      code: SubPipelineExec
    - url: https://github.com/TencentBlueKing/ci-uploadArtifact/releases/download/v2.0.1/uploadArtifact_en.zip
      code: uploadArtifact
    - url: https://github.com/TencentBlueKing/ci-uploadReport/releases/download/v1.0.1/uploadReport_en.zip
      code: uploadReport
    - url: https://github.com/TencentBlueKing/ci-AcrossProjectDistribution/releases/download/v1.1.1/AcrossProjectDistribution_en.zip
      code: AcrossProjectDistribution
    - url: https://github.com/TencentBlueKing/ci-downloadArtifact/releases/download/v1.0.2/downloadArtifact_en.zip
      code: downloadArtifact
    - url: https://github.com/TencentBlueKing/ci-plugin-perforce-sync/releases/download/v1.0.13/PerforceSync_en.zip
      code: PerforceSync
    - url: https://github.com/TencentBlueKing/ci-CodeCCCheckAtom/releases/download/v0.0.12/CodeCCCheckAtom_en.zip
      code: CodeCCCheckAtom

# 多集群开关
multiCluster:
  enabled: false
  # 兜底策略, 为空则不用兜底
  defaultNamespace: ""

# 内部数据源配置
mysql:
  image: 
    tag: 5.7.35
  enabled: true
  auth:
    # 修改此选项必须删除mysql的pvc , 否则会创建mysql失败
    rootPassword: blueking
  primary:
    persistence:
      size: 10Gi
    configuration: |-
      [mysqld]
      default_authentication_plugin=mysql_native_password
      skip-name-resolve
      explicit_defaults_for_timestamp
      basedir=/opt/bitnami/mysql
      plugin_dir=/opt/bitnami/mysql/lib/plugin
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      datadir=/bitnami/mysql/data
      tmpdir=/opt/bitnami/mysql/tmp
      max_allowed_packet=16M
      bind-address=*
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
      log-error=/opt/bitnami/mysql/logs/mysqld.log
      character-set-server=UTF8
      collation-server=utf8_general_ci
      max_connections=2000
      default-time-zone='+08:00'
      sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION
      [client]
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      default-character-set=UTF8
      plugin_dir=/opt/bitnami/mysql/lib/plugin
      [manager]
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
redis:
  enabled: true
  auth:
    password: bluking
  replica:
    replicaCount: 1
    persistence: 
      size: 10Gi
  master:
    persistence: 
      size: 10Gi 
elasticsearch:
  enabled: true
  master:
    replicas: 1
    persistence:
      size: 10Gi
  coordinating:
    replicas: 1
  data:
    replicas: 1
    persistence:
      size: 10Gi
rabbitmq:
  enabled: true
  persistence:
    size: 10Gi
  auth:
    username: admin
    password: blueking
    erlangCookie: blueking # 修改此选项必须删除rabbitmq的pvc , 否则会创建rabbitmq失败
  communityPlugins: "https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases/download/3.8.17/rabbitmq_delayed_message_exchange-3.8.17.8f537ac.ez"
  extraPlugins: "rabbitmq_delayed_message_exchange"
  extraConfiguration: |-
    # ipv6 , 需要开启这些选项
    # management.tcp.port = 15672
    # management.tcp.ip  = ::
    # 默认账户
    default_vhost = default-vhost
    default_permissions.configure = .*
    default_permissions.read = .*
    default_permissions.write = .*
  # 如果想在ipv6环境中运行, 需要开启这些选项
  # initContainers:
  # - name: ipv6-init
  #   image: "docker.io/busybox:1.33.1"
  #   imagePullPolicy: IfNotPresent
  #   volumeMounts:
  #   - name: ipv6-cfg
  #     mountPath: /ipv6
  #   command: ['sh', '-c', 'echo "{inet6, true}." > /ipv6/erl_inetrc']
  # extraVolumes:
  # - name: ipv6-cfg
  #   emptyDir: {}
  # extraVolumeMounts:
  # - name: ipv6-cfg
  #   mountPath: /ipv6
  # extraEnvVars:
  # - name: RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS
  #   value: "-kernel inetrc '/ipv6/erl_inetrc' -proto_dist inet6_tcp"
  # - name: RABBITMQ_CTL_ERL_ARGS
  #   value: "-proto_dist inet6_tcp"
influxdb:
  enabled: true
  image:
    tag: 1.8.3-debian-10-r88
  architecture: high-availability
  auth:
    admin:
      username: admin
      password: blueking
      token: GnnsHwEcQ07sqpidcX2s
  persistence:
    size: 10Gi
  influxdb:
    readinessProbe:
      enabled: false
    livenessProbe:
      enabled: false
    initdbScripts: 
      creata_db.sh: |
        influx -host localhost -port "$INFLUXDB_HTTP_PORT_NUMBER" -username "${INFLUXDB_ADMIN_USER}" -password "${INFLUXDB_ADMIN_USER_PASSWORD}" -execute "create database agentMetrix;"
mongodb:
  # 是否部署mongodb
  # 如果需要使用外部数据库，设置为false并配置external.mongodb
  enabled: false
  # enableIPv6: true # ipv6 环境需要开启
  useStatefulSet: true
  auth:
    enabled: true
    username: turbo
    password: blueking
    rootPassword: blueking
    database: blueking
  persistence:
    subPath: mongodb
    size: 10Gi
  initdbScripts:
    create_admin_user.sh: |
      $MONGODB_BIN_DIR/mongo admin --host localhost --port $MONGODB_PORT_NUMBER -u root -p $MONGODB_ROOT_PASSWORD << EOF
      use db_turbo
      db.createUser({ user: "$MONGODB_EXTRA_USERNAMES" , pwd: "$MONGODB_EXTRA_PASSWORDS" , roles: [{role: "dbOwner" , db:"db_turbo"}]})
      use db_quartz
      db.createUser({ user: "$MONGODB_EXTRA_USERNAMES" , pwd: "$MONGODB_EXTRA_PASSWORDS" , roles: [{role: "dbOwner" , db:"db_quartz"}]})
      EOF
  # 如果想在ipv6环境中运行, 则不用上面的脚本 , 注释掉上面的脚本并使用下面
  #     $MONGODB_BIN_DIR/mongo admin --host localhost --port $MONGODB_PORT_NUMBER -u root -p $MONGODB_ROOT_PASSWORD << EOF
  #     use db_turbo
  #     db.createUser({ user: "$MONGODB_EXTRA_USERNAMES" , pwd: "$MONGODB_EXTRA_PASSWORDS" , roles: [{role: "dbOwner" , db:"db_turbo"}]})
  #     use db_quartz
  #     db.createUser({ user: "$MONGODB_EXTRA_USERNAMES" , pwd: "$MONGODB_EXTRA_PASSWORDS" , roles: [{role: "dbOwner" , db:"db_quartz"}]})
  #     EOF
  # extraEnvVars:
  # - name: MONGODB_CLIENT_EXTRA_FLAGS
  #   value: "--ipv6"
kubernetes-manager:
  # 是否部署kubernetes-manager
  enabled: true
  # 是否安装configmap
  configmap:
    enabled: true

  # 初始化配置
  init:
    # 初始化数据库
    sql: true

  # 多集群开关
  multiCluster:
    enabled: false
    # 兜底策略, 为空则不用兜底
    defaultNamespace: ""

  # 镜像配置
  backendImage:
    pullPolicy: IfNotPresent

  # 内部数据源配置
  mysql:
    enabled: true
    nameOverride: kubernetes-manager-mysql
    image:
      tag: 5.7.35
    auth:
      # 修改此选项必须删除mysql的pvc , 否则会创建mysql失败
      rootPassword: blueking
    primary:
      persistence:
        size: 10Gi
      configuration: |-
        [mysqld]
        default_authentication_plugin=mysql_native_password
        skip-name-resolve
        explicit_defaults_for_timestamp
        basedir=/opt/bitnami/mysql
        plugin_dir=/opt/bitnami/mysql/lib/plugin
        port=3306
        socket=/opt/bitnami/mysql/tmp/mysql.sock
        datadir=/bitnami/mysql/data
        tmpdir=/opt/bitnami/mysql/tmp
        max_allowed_packet=16M
        bind-address=*
        pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
        log-error=/opt/bitnami/mysql/logs/mysqld.log
        character-set-server=UTF8
        collation-server=utf8_general_ci
        max_connections=2000
        default-time-zone='+08:00'
        [client]
        port=3306
        socket=/opt/bitnami/mysql/tmp/mysql.sock
        default-character-set=UTF8
        plugin_dir=/opt/bitnami/mysql/lib/plugin
        [manager]
        port=3306
        socket=/opt/bitnami/mysql/tmp/mysql.sock
        pid-file=/opt/bitnami/mysql/tmp/mysqld.pid

  redis:
    enabled: true
    nameOverride: kubernetes-manager-redis
    auth:
      password: bluking
    replica:
      replicaCount: 1
      persistence:
        size: 10Gi
    master:
      persistence:
        size: 10Gi

  #外部数据库
  externalMysql:
    host: localhost
    port: 3306
    username: bkci
    password: bkci
  externalRedis:
    host: localhost
    port: 6379
    password: bkci

  # kubernetesManager service
  service:
    # 部署的service的类型: ClusterIP|NodePort|LoadBalancer
    serviceType: NodePort
    # 部署的service的annotations:
    serviceAnnotations:
    # 部署的service对外暴露的端口
    port: 80
    # nodeport模式下nodeport的端口
    nodePort: 30004

  # kubernetesManager Deployment
  kubernetesManager:
    enabled: true
    replicas: 1
    resources:
      requests:
        cpu: 100m
        memory: 1000Mi
      limits:
        cpu: 500m
        memory: 1500Mi
    hostAliases: [ ]
    containerSecurityContext:
      enabled: false
      runAsUser: 1001
      runAsNonRoot: true
    podSecurityContext:
      enabled: false
      fsGroup: 1001
    nodeSelector: { }
    tolerations: [ ]
    priorityClassName: ""
    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 3
      targetCPU: 80
      targetMemory: 80
    # 使用的镜像
    image: bkci/kubernetes-manager:0.0.31
    # 决定每次helm部署时的构建机所在的命名空间，同时dockerInitSh也在那里，为空时默认为 {{ .Release.Namespace }}
    builderNamespace:
    redis:
      db: 0
    gateway:
      # manager api服务的访问地址，给客户端返回登录调试地址需要使用
      url: 127.0.0.1:30004
    # 真实调度资源相关，依赖 scheduler-plugin
    realResource:
      # 监控构建机容器资源使用的 prometheus api地址， 字段为空则不开启realResource优化
      # 注：集群内为 <service>.<namespace>.svc.cluster.local:<port>
      prometheusUrl:
    # 构建并推送镜像相关
    buildAndPushImage:
      image: bkci/gcr-kaniko-executor:v1.9.0
      # 拉取kaniko需要的凭据，如果不填视为没有
      pullImageRegistry:
        server:
        username:
        password:
    apiserver:
      auth:
        # 针对蓝盾流水线访问的超级权限token
        apiToken:
          key: Devops-Token
          value: landun
        rsaPrivateKey: |
    volumeMount:
      # 流水线构建工作空间和agent日志在容器内的挂载点
      dataPath: /data/devops/workspace
      logPath: /data/devops/logs
  dockerInit:
    # 是否使用当前chart的 dockerinit.sh
    useDockerInit: true

  kubeConfig:
    # 是否使用配置的kubeConfig文件而不使用当前默认集群的client
    useKubeConfig: false
    # 配置的kubeConfig文件内容
    content: |
      # useKubeConfig开启时，这里需要填写kubeconfig

#外部数据库
externalMysql:
  host: localhost
  port: 3306
  username: bkci
  password: bkci
externalRedis:
  host: localhost
  port: 6379
  password: bkci
externalElasticsearch:
  host: localhost
  port: 9200
  username: bkci
  password: bkci
externalRabbitmq:
  host: localhost
  username: bkci
  password: bkci
  vhost: bkci
externalInfluxdb:
  host: localhost
  port: 8086
  username: bkci
  password: bkci
externalMongodb:
  turbo:
    turboUrl: mongodb://bkci:bkci@localhost:27017/db_turbo
    quartzUrl: mongodb://bkci:bkci@localhost:27017/db_quart


## 是否开启数据持久化，false则使用emptyDir类型volume, pod结束后数据将被清空，无法持久化
persistence:
  enabled: true
  accessMode: ReadWriteOnce
  size: 10Gi
  mountPath: /data1
  ## 绑定k8s集群中已存在的pvc
  ## Requires persistence.enabled: true
  # existingClaim: my-persistent-volume-claim

# 镜像 ENTRYPOINT 覆盖
entrypoint:
  override: true

# Log Deployment
log:
  enabled: true
  replicas: 1
  podLabels: {}
  resources:
    requests:
      cpu: 100m
      memory: 1000Mi
    limits:
      cpu: 500m
      memory: 1500Mi
  jvm:
    heapPct: "70.0"
    initSecs: 50
  hostAliases: []
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podAnnotations: {}
  priorityClassName: ""
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPU: 80
    targetMemory: 80

# Auth Deployment
auth:
  enabled: true
  replicas: 1
  podLabels: {}
  resources:
    requests:
      cpu: 100m
      memory: 1000Mi
    limits:
      cpu: 500m
      memory: 1500Mi
  jvm:
    heapPct: "70.0"
    initSecs: 50
  hostAliases: []
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podAnnotations: {}
  priorityClassName: ""
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPU: 80
    targetMemory: 80

# artifactory Deployment
artifactory:
  enabled: true
  replicas: 1
  podLabels: {}
  resources:
    requests:
      cpu: 100m
      memory: 1000Mi
    limits:
      cpu: 500m
      memory: 1500Mi
  jvm:
    heapPct: "70.0"
    initSecs: 50
  hostAliases: []
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podAnnotations: {}
  priorityClassName: ""
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPU: 80
    targetMemory: 80

# dispatch Deployment
dispatch:
  enabled: true
  replicas: 1
  podLabels: {}
  resources:
    requests:
      cpu: 100m
      memory: 1000Mi
    limits:
      cpu: 500m
      memory: 1500Mi
  jvm:
    heapPct: "70.0"
    initSecs: 50
  hostAliases: []
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podAnnotations: {}
  priorityClassName: ""
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPU: 80
    targetMemory: 80

# dispatchDocker Deployment
dispatchDocker:
  enabled: true
  replicas: 1
  podLabels: {}
  resources:
    requests:
      cpu: 100m
      memory: 1000Mi
    limits:
      cpu: 500m
      memory: 1500Mi
  jvm:
    heapPct: "70.0"
    initSecs: 50
  hostAliases: []
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podAnnotations: {}
  priorityClassName: ""
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPU: 80
    targetMemory: 80

# dispatchKubernetes Deployment
dispatchKubernetes:
  enabled: true
  replicas: 1
  podLabels: {}
  resources:
    requests:
      cpu: 100m
      memory: 1000Mi
    limits:
      cpu: 500m
      memory: 1500Mi
  jvm:
    heapPct: "70.0"
    initSecs: 50
  hostAliases: []
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podAnnotations: {}
  priorityClassName: ""
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPU: 80
    targetMemory: 80

# environment Deployment
environment:
  enabled: true
  replicas: 1
  podLabels: {}
  resources:
    requests:
      cpu: 100m
      memory: 1000Mi
    limits:
      cpu: 500m
      memory: 1500Mi
  jvm:
    heapPct: "70.0"
    initSecs: 50
  hostAliases: []
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podAnnotations: {}
  priorityClassName: ""
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPU: 80
    targetMemory: 80

# image Deployment
image:
  enabled: true
  replicas: 1
  podLabels: {}
  resources:
    requests:
      cpu: 100m
      memory: 1000Mi
    limits:
      cpu: 500m
      memory: 1500Mi
  jvm:
    heapPct: "70.0"
    initSecs: 50
  hostAliases: []
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podAnnotations: {}
  priorityClassName: ""
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPU: 80
    targetMemory: 80

# misc Deployment
misc:
  enabled: true
  replicas: 1
  podLabels: {}
  resources:
    requests:
      cpu: 100m
      memory: 1000Mi
    limits:
      cpu: 500m
      memory: 1500Mi
  jvm:
    heapPct: "70.0"
    initSecs: 50
  hostAliases: []
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podAnnotations: {}
  priorityClassName: ""
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPU: 80
    targetMemory: 80

# metrics Deployment
metrics:
  enabled: true
  replicas: 1
  podLabels: {}
  resources:
    requests:
      cpu: 100m
      memory: 1000Mi
    limits:
      cpu: 500m
      memory: 1500Mi
  jvm:
    heapPct: "70.0"
    initSecs: 50
  hostAliases: []
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podAnnotations: {}
  priorityClassName: ""
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPU: 80
    targetMemory: 80

# monitoring Deployment
monitoring:
  enabled: true
  replicas: 1
  podLabels: {}
  resources:
    requests:
      cpu: 100m
      memory: 1000Mi
    limits:
      cpu: 500m
      memory: 1500Mi
  jvm:
    heapPct: "70.0"
    initSecs: 50
  hostAliases: []
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podAnnotations: {}
  priorityClassName: ""
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPU: 80
    targetMemory: 80

# notify Deployment
notify:
  enabled: true
  replicas: 1
  podLabels: {}
  resources:
    requests:
      cpu: 100m
      memory: 1000Mi
    limits:
      cpu: 500m
      memory: 1500Mi
  jvm:
    heapPct: "70.0"
    initSecs: 50
  hostAliases: []
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podAnnotations: {}
  priorityClassName: ""
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPU: 80
    targetMemory: 80

# openapi Deployment
openapi:
  enabled: false
  secret:
    enabled: false
    content: ""
  replicas: 1
  podLabels: {}
  resources:
    requests:
      cpu: 100m
      memory: 1000Mi
    limits:
      cpu: 500m
      memory: 1500Mi
  jvm:
    heapPct: "70.0"
    initSecs: 50
  hostAliases: []
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podAnnotations: {}
  priorityClassName: ""
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPU: 80
    targetMemory: 80

# plugin Deployment
plugin:
  enabled: true
  replicas: 1
  podLabels: {}
  resources:
    requests:
      cpu: 100m
      memory: 1000Mi
    limits:
      cpu: 500m
      memory: 1500Mi
  jvm:
    heapPct: "70.0"
    initSecs: 50
  hostAliases: []
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podAnnotations: {}
  priorityClassName: ""
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPU: 80
    targetMemory: 80

# process Deployment
process:
  enabled: true
  replicas: 1
  podLabels: {}
  resources:
    requests:
      cpu: 100m
      memory: 1000Mi
    limits:
      cpu: 500m
      memory: 1500Mi
  jvm:
    heapPct: "70.0"
    initSecs: 50
  hostAliases: []
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podAnnotations: {}
  priorityClassName: ""
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPU: 80
    targetMemory: 80

# project Deployment
project:
  enabled: true
  replicas: 1
  podLabels: {}
  resources:
    requests:
      cpu: 100m
      memory: 1000Mi
    limits:
      cpu: 500m
      memory: 1500Mi
  jvm:
    heapPct: "70.0"
    initSecs: 50
  hostAliases: []
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podAnnotations: {}
  priorityClassName: ""
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPU: 80
    targetMemory: 80

# quality Deployment
quality:
  enabled: true
  replicas: 1
  podLabels: {}
  resources:
    requests:
      cpu: 100m
      memory: 1000Mi
    limits:
      cpu: 500m
      memory: 1500Mi
  jvm:
    heapPct: "70.0"
    initSecs: 50
  hostAliases: []
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podAnnotations: {}
  priorityClassName: ""
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPU: 80
    targetMemory: 80

# repository Deployment
repository:
  enabled: true
  replicas: 1
  podLabels: {}
  resources:
    requests:
      cpu: 100m
      memory: 1000Mi
    limits:
      cpu: 500m
      memory: 1500Mi
  jvm:
    heapPct: "70.0"
    initSecs: 50
  hostAliases: []
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podAnnotations: {}
  priorityClassName: ""
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPU: 80
    targetMemory: 80

# store Deployment
store:
  enabled: true
  replicas: 1
  podLabels: {}
  resources:
    requests:
      cpu: 100m
      memory: 1000Mi
    limits:
      cpu: 500m
      memory: 1500Mi
  jvm:
    heapPct: "70.0"
    initSecs: 50
  hostAliases: []
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podAnnotations: {}
  priorityClassName: ""
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPU: 80
    targetMemory: 80

# ticket Deployment
ticket:
  enabled: true
  replicas: 1
  podLabels: {}
  resources:
    requests:
      cpu: 100m
      memory: 1000Mi
    limits:
      cpu: 500m
      memory: 1500Mi
  jvm:
    heapPct: "70.0"
    initSecs: 50
  hostAliases: []
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podAnnotations: {}
  priorityClassName: ""
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPU: 80
    targetMemory: 80

# websocket Deployment
websocket:
  enabled: true
  replicas: 1
  podLabels: {}
  resources:
    requests:
      cpu: 100m
      memory: 1000Mi
    limits:
      cpu: 500m
      memory: 1500Mi
  jvm:
    heapPct: "70.0"
    initSecs: 50
  hostAliases: []
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podAnnotations: {}
  priorityClassName: ""
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPU: 80
    targetMemory: 80

turbo:
  enabled: false
  image:
    registry: registry-1.docker.io/bkci
    repository: bkci-turbo
    tag: 0.0.18
    pullPolicy: IfNotPresent
    pullSecrets: []
  replicaCount: 1
  hostAliases: []
  resources:
    requests:
      cpu: 100m
      memory: 1000Mi
    limits:
      cpu: 500m
      memory: 3000Mi
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  priorityClassName: ""
  config:
    tbs:
      rootPath: ""
      urlTemplate: api/v1/{engine}/resource/{resource_type}
      dashboard: ""
    devops:
      rootPath: ""
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPU: 80
    targetMemory: 80

# gateway Deployment
gateway:
  enabled: true
  type: ClusterIP
  replicas: 1
  podLabels: {}
  resources:
    requests:
      cpu: 100m
      memory: 500Mi
    limits:
      cpu: 500m
      memory: 800Mi
  hostAliases: []
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podAnnotations: {}
  priorityClassName: ""
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPU: 80
    targetMemory: 80

# stream Deployment
stream:
  enabled: false
  replicas: 1
  podLabels: {}
  resources:
    requests:
      cpu: 100m
      memory: 2000Mi
    limits:
      cpu: 500m
      memory: 3000Mi
  jvm:
    heapPct: "70.0"
    initSecs: 50
  hostAliases: []
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podAnnotations: {}
  priorityClassName: ""
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPU: 80
    targetMemory: 80
