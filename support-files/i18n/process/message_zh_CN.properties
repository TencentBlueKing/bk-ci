2101001=流水线: 子流水线id不存在
2101002=流水线: 子流水线不存在
2101003=流水线: 最多允许同时保存7个视图
2101004=流水线: 视图({0})不存在
2101005=流水线: 视图({0})已存在
2101006=流水线: 用户({0})无权限删除视图({1})
2101007=流水线: 流水线列表长度不能超过100
2101008=流水线: 用户无{0}权限
2101009=流水线: 流水线渠道来源不符合({0})
2101010=流水线: 插件不存在
2101011=流水线: 流水线Model不合法
2101012=流水线: 流水线出现异常:{0}
2101013=流水线名称已被使用
2101014=流水线: 模板流水线不支持编辑
2101015=流水线: 流水线名称过长
2101016=流水线: 流水线已存在
2101017=流水线: 质量红线拦截的任务[{0}]不存在
2101018=流水线: 用户({0})不在审核人员名单中
2101019=流水线: 流水线已经被{0}取消构建，请过{1}秒后再试
2101020=流水线: 不能太频繁启动构建
2101021=流水线: 该流水线不能手动启动
2101022=流水线: 该流水线不能远程触发
2101023=流水线: Webhook 的ID和名称同时为空
2101024=流水线: 要还原的流水线不存在，可能已经被删除或还原了
2101025=流水线: Stage缺少Job
2101026=流水线: 只有管理员才能操作模板
2101027=流水线: 流水线设置不存在
2101028=流水线: 模板名不能为空字符串
2101029=流水线: 流水线变量参数和常量重名
2101030=流水线: 模板名已经存在
2101031=流水线: 模板还存在实例，不允许删除
2101032=流水线: 已关联到研发商店，请先下架再删除
2101033=模板已安装到其他项目下使用，不能删除
2101034=流水线: 模板不存在
2101035=流水线: 源模板不存在
2101036=流水线: 列举流水线模板参数失败
2101037=流水线: 流水线只能有一个触发Stage
2101038=流水线: 流水线不存在
2101039=流水线: 流水线的模型不存在
2101040=流水线: 流水线的模型中指定构建容器{0}不存在
2101041=流水线: 流水线的定时触发器保存失败
2101042=流水线: Job需要至少有一个任务插件
2101043=流水线: 流水线{0}的定时触发器删除失败
2101044=SVN不支持Tag
2101045=仓库ID为空
2101046=仓库名为空
2101047=流水线: 流水线锁定
2101048=流水线: 定时触发器的定时参数不合法
2101049=流水线: 流水线队列满
2101050=流水线: 用户({0})在工程({1})下没有流水线{2}权限
2101051=模型中使用了商店镜像，但code为空
2101052=模型中使用了商店镜像，但version为空
2101053=非商店蓝盾源/第三方源的镜像value不可为空
2101054=变量名只能使用英文字母，数字和下划线，首字符不能以数字开头
2101055=Stage[{0}]准入配置不正确
2101056=流水线描述过长
2101057=定时触发器的定时参数[{0}]不能秒级触发
2101058=流水线: 入参buildId与pipelineId不匹配
2101059=流水线内包含插件市场不存在的插件
2101060=获取用户信息失败
2101061=项目不存在
2101062=流水线: 插件[{0}]不能在该环境下运行
2101063=流水线: 模板下的流水线实例{0}正在更新中，请稍后再试
2101064=流水线: 每个Model只能包含一个FinallyStage，并且处于最后位置
2101065=流水线: finallyStage的Job执行条件配置错误: {0}
2101066=流水线: 普通stage下的[{0}]Job运行条件配置错误: {0}
2101067=流水线: Model信息不完整，Stage[{0}] Job[{1}]下没有插件
2101068=流水线: 流水线模型超限，阈值为[{0}]个字符，请联系发布者
2101069=流水线: 流水线下[{0}]的[{1}]数量超限，阈值为[{2}]个，请联系发布者
2101070=流水线: 插件[{0}]的参数[{1}]值超限，阈值为[{2}]个字符，请联系发布者
2101071=流水线: final stage 处于运行中不允许被取消
2101072=Stage[{0}]的审核组[{1}]没有未配置可执行人
2101073=Stage[{0}]的审核组ID[{1}]不存在
2101074=Stage[{0}]的准入准出标识[{1}]不正确
2101075=流水线启动准备失败{0}
2101076=该模板无法更新
2101077=仓库ID和仓库名都为空
2101078=模板的版本数量不能超过{0}个
2101079=模板实例更新数量[{0}]超过系统规定的最大值[{1}]，请调整参数或咨询助手
2101080=项目[{0}]已禁用，不能启动
2101081=构建数据已过期，请使用rebuild进行重试
2101082=Stage审核参数{0}超出4000长度限制
2101083=该流水线版本还存在构建记录，不允许删除
2101084=Job[{0}]的超时配置的流水线变量[{1}]值[{2}]超出合理范围[{3}](分钟)
2101085=Job[{0}]的插件[{1}]的超时配置流水线变量[{2}]值[{3}]超出合理范围[{4}](分钟)
2101086=Job[{0}]的互斥组[{1}]超时配置的流水线变量[{2}]值[{3}]超出合理范围[{4}](分钟)
2101087=无效的GIT仓库
2101088=无效的TGIT仓库
2101089=无效的SVN仓库
2101090=无效的GITHUB仓库
2101091=无效的p4仓库
2101092=代码库{0}不存在
2101093=代码库({0})不是svn代码库
2101094=获取Svn目录失败, msg:{0}
2101095=添加流水线的定时触发器保存失败！可能是定时器参数过长！
2101096=排队中: 当前构建正在排队中
2101097=Job[{0}]的矩阵YAML配置错误: {1}
2101098={0} 非 {1} 流水线
2101099=没有找到对应的流水线
2101100=子流水线不允许循环调用,循环流水线:projectId:{0},pipelineId:{1}
2101101=该项目最多只能创建{0}条流水线
2101102=流水线: 重试3次失败
2101103=流水线: 更新失败: {0}
2101104=流水线: {0}非项目{1}管理员
2101105=排队中: 当前构建正在并发组({0})排队中
2101106=安装插件失败
2101107=暂停的流水线已开始运行
2101108=流水线: Stage[{0}]未处于等待审核
2101109={0} element大小越界
2101110=job非完成态，不能进行重试
2101111=排队超时，取消运行! [{0}]
2101112=质量红线(准出)检测失败
2101113={0}运行达到({1})分钟，超时结束运行!
2101114=stage非失败状态，不能进行重试
2101115=请设置Job运行的自定义变量
2101116=后台服务任务执行出错
2101117= 后台服务运行出错
2101118=在项目 {0} 下未找到{1}视图{2}
2101119=环境名未初始化
2101120=环境ID未初始化
2101121=以下这些环境名称不存在,请重新修改流水线！
2101122=用户没有操作这些环境的权限！环境:
2101123=以下这些环境id不存在,请重新修改流水线！id:
2101124=支持 目标环境类型: {0}
2101125=流水线组的视图范围不一致
2101126=流水线组创建达到上限
2101127=流水线组名称重复
2101128=流水线组名称不合法
2101129=流水线: 当前构建正在运行中，请勿重复提交重试请求
2101130=质量红线(准入)检测失败
2101131=Excel格式错误，或文件不存在
2101132=回调的url非法
2101133=用户（{0}）无（{1}）项目权限
2101134=回调历史记录({0})不存在
2101135=回调重试失败
2101136=回调记录({0})不存在
2101137=创建callback失败,失败原因:{0}
2101138=流水线: 流水线定时触发时代码没有变更
2101139=异常: 流水线的基础构建数据Summary不存在，请联系管理员
2101140=发布已拒绝，因为该版本已落后最新版本
2101141=流水线: 待restart构建{0}已在restart中
2101142= 最大排队数量非法
2101143=没有修改流水线组权限
2101144=变量名[{0}]来源不唯一，请修改变量名称或增加插件输出命名空间: {1}
2101145=({0})与({1})的jobId循环依赖
2101146=({0})的jobId({1})已存在
2101147=最大排队时长非法
2101148=描述说明
2101149=手动触发
2101150=定时触发
2101151=远程触发
2101152=webhook触发
2101153=服务触发
2101154=流水线触发
2101155=构建信息描述
2101156=其他构建进程挂掉的参考信息，自由添加方便打印到日志里
2101157=<a href="/console/environment/{0}/nodeDetail/{1}">查看Agent详情/Agent Detail</a>'
2101158=构建触发
2101159=构建进程心跳超时{0}秒 \n 可能原因: \n 1. 构建机网络不通，检查构建机网络代理、或所在企业安全鉴权会话是否过期。 \n 2. 业务构建进程进程被操作系统或其他程序杀掉，需自查并降低负载后重试。\n 3. 其他参考链接[Link] 其他构建进程挂掉的参考信息，自由添加方便打印卫通日志里\n 4. 平台级故障导致大面积超时。
2101160=一个项目标签组不能超过10个
2101161=同一分组下最多可添加12个标签
2101162=一个标签最多输入20个字符
2101163=流水线构建[{0}]不存在
2101164=流水线[{0}]不存在
2101165=子流水线循环调用
2101166=构建中Stage[{0}]不存在
2101167=构建中Stage[{0}]未处于等待把关状态
2101168=执行条件表达式解析失败
2101169=触发审核未通过
2101170=触发不在审核状态中
2101171=生成远程触发token失败
2101172=找不到对应子流水线的构建记录
2101173=找不到对应子流水线
2101174=用户（{0}) 无权限获取流水线({1})信息({2})
2101175=子流水线参数过滤失败
2101176=模版下存在无权限的插件
2101177=流水线编排数量非法
2101178=最大并发数量非法
2101179=流水线: 流水线构建已结束，不能取消
2101180=无权访问插件{0}的流水线信息，请联系组件管理员
2101181=分组({0})已存在
2101182=分组标签({0})已存在
2101183=用户没有操作模板的权限

2101184=流水线版本({0})不存在
2101185=该流水不存在草稿版本
2101186=转换YAML时出现异常
2101187=常量({0})的取值为空
2101188=流水线YAML文件后缀{0}不正确
2101189=流水线的stage为空
2101190=该版本无法执行

2101191=触发详情{0}不存在
2101192=触发事件{0}不存在
2101193=触发类型{0}不支持重放
2101194=重放流水线ID不能为空
2101195=Webhook {0} 不存在

2101196=获取git项目信息失败
2101197=获取mr信息失败
2101198=获取mr评审信息失败
2101199=获取mr变更信息失败
2101200=获取git文件树失败
2101201=获取yaml文件内容失败
2101202=获取文件信息失败
2101203=请执行 REBASE 或 MERGE 以从远程目标分支更新您的 YAML
2101204=请求DEVNET网关超时
2101205=未知错误
2101206=由开启 PAC 模式自动创建，不支持手动修改和删除
2101207=由开启 PAC 模式自动创建，不支持手动添加/移除流水线
2101208=由开启 PAC 模式自动创建，删除流水线请前往代码库操作
2101209=获取commit信息失败
2101210=已开启PAC模式,请先删除代码库默认分支上的yaml文件,再删除流水线
2101211=yaml文件内容不能为空
2101212=yaml文件格式错误,仅支持yaml、yml后缀和一级子目录
2101213=流水线已绑定文件{0},不能修改
2101214=流水线已绑定代码库{0},不能修改
2101215=YAML文件[{0}]已存在，关联的流水线为[{1}]
2101216=发布必须代码库developer以上权限
2101217=默认分支不存在,请先初始化代码库
2101218=当前代码库关联人({0})未进行OAUTH授权，请尝试切换代码库凭证类型
2101219=相比正式版本没有更新，请检查
2101221=task不允许被跳过
2101230=通知类型配置不正确，请检查
2101231=通知内容为空，请检查
2101232={0}使用流水线构建机复用互斥组需要声明具体的JobId，不能为空
2101233=流水线构建机复用互斥组节点 {0} 复用的 {1} 不存在，或非第三方构建机节点
2101234=在 {0} 下，构建机复用互斥组节点 {1} 与被复用的 {2} 节点调度类型不同，AgentId和AgentEnv不能互相复用
2101235=创建分支失败: {0}
2101236=用户[{0}]没有代码库[{1}]的创建分支权限
2101237=创建文件失败: {0}
2101238=用户[{0}]没有代码库[{1}]的创建文件权限
2101239=创建mr失败: {0}
2101240=用户[{0}]没有代码库[{1}]的创建mr权限
2101241=工蜂代码库[{0}]不存在或没有权限访问
2101242=工蜂服务异常
2101243=定时触发SVN分支不能为空
2101244={0}
2101245=定时触发器代码库不存在
2101246=定时触发器配置了[监听PAC]，但此流水线未开启PAC，请检查配置
2101247=定时触发器分支不能为空
2101248=定时触发分支[{0}]没有变更
2101249=定时触发分支[{0}]不存在
2101250=流水线Job:{0}的jobId为空或长度超过{1}位
2101251=流水线Job:{0}的单节点或总结点并发配置需要为小于1000的正整数
2101252=定时触发分支[{0}]未知错误
2101253=[{0}]的条件表达式的长度超过{1}位
2101254=构建入参[{0}]必填，不能为空

ATOM_POST_EXECUTE_TIP=###Tip:this is the post-action hooked by [step{0}]{1}###
ci.build-no=构建号，开启推荐版本号时有效
ci.build_num=当前构建的唯一标示ID，从1开始自增
ci.build_msg=构建信息, 最长 128 个字, 取值规则：<br/>- Push 事件：commit message<br/>- Mr 事件：Mr title<br/>- Note 事件：评论内容<br/>- Issue 事件：Issue标题<br/>- Cr 事件：Cr title<br/>- Tag 事件：Tag name<br/>- 手动触发：触发时页面上填写的构建信息
ci.pipeline_creator=流水线创建者
ci.pipeline_modifier=流水线最新修改者
ci.pipeline_version=流水线版本号
ci.project_name=项目名称
ci.build_id=当前构建ID
ci.pipeline_id=流水线ID
ci.pipeline_name=流水线名称
ci.project_id=项目ID，项目的唯一标识
ci.build_start_type=构建启动方式可能的值有 MANUAL、TIME_TRIGGER、WEB_HOOK、SERVICE、PIPELINE或者REMOTE
ci.actor=当前构建的启动人
ci.workspace=当前 Job 的工作空间
ci.failed_tasknames=流水线执行失败的所有TASK，值格式：TASK别名,TASK别名,TASK别名
ci.failed_tasks=流水线执行失败的所有TASK，值格式：[STAGE别名][JOB别名]TASK别名。若有多个并发JOB失败，使用换行(\\n)分隔
ci.remark=流水线备注，可在脚本插件中通过 echo ::set-remark xxx 的方式设置值
BUILD_NUM_RULE_STYLE=BUILD_NUM_RULE_STYLE自定义构建号规则只能由【大小写字母、数字、空格、-、_、.、:、{、}、(、)、"、+、?、$】字符组成，长度在1-256之间
CONST_PROCESS_VIEW_LABEL_ALL=全部流水线
CONST_PROCESS_VIEW_LABEL_FAVORITE=我的收藏
CONST_PROCESS_VIEW_LABEL_MY=我的流水线
CONST_PROCESS_VIEW_LABEL_PRIVATE=个人视图
CONST_PROCESS_VIEW_LABEL_PROJECT=项目视图
CONST_PROCESS_VIEW_LABEL_SYSTEM=系统视图
bkAdministrator=管理员
bkAuditResult=步骤审核结束，审核结果: [{0}]，审核人: {1}
bkAuditTimeout=审核超时
bkAutomaticExportNotSupported=### 该环境不支持自动导出 ###
bkAutomaticExportNotSupportedImage=### 该镜像暂不支持自动导出 ###
bkBeeCiNotSupport=工蜂CI不支持蓝盾老版本插件
bkBuildClustersThrough=### 可以通过 runs-on: macos-10.15 使用macOS公共构建集群。
bkBuildInReviewStatus=项目【{0}】下的流水线【{1}】#{2} 构建处于待审核状态
bkBuildInfo=构建信息
bkDetail=详情
bkBuildStatus=构建状态
bkBuildVariables=构建变量
bkBuildVariablesValue=构建变量的值
bkBuildHistory=构建历史
bkCheckFileCountAndVersion=查文件个数、版本:
bkCheckIntegrityYaml=请检查YAML的完整性，或切换为研发商店推荐的插件后再导出
bkCheckOperatingSystemCorrect=请手动修改成存在的环境，并检查操作系统是否正确
bkCheckPoolField=需检查JOB({0})的Pool字段
bkCheckTheWebData=查web端数据:
bkContinue=继续
bkComputerViewDetails={0}\n\n电脑查看详情: {1}\n手机查看详情: {2}
bkConstructionMachineNotSupported=# 注意: 暂不支持当前类型的构建机
bkContactPlugDeveloper=，请联系插件开发者
bkCreateResourceOperation=开始执行 创建资源 操作\n
bkCreateResourcesOperationParameters=创建资源 操作参数:
bkCreator=创建人
bkEmailNotificationContentEmpty=邮件通知内容为空
bkEmptyTitle=Message Title is empty(标题为空)
bkEnterUrlAddressImage=###请直接填入镜像(TLinux2.2公共镜像)的URL地址，若存在鉴权请增加 credentials 字段###
bkExperiencePathEmpty=体验路径为空
bkExport=的导出,
bkExportSystemCredentials=# 注意: 不支持系统凭证(用户名、密码)的导出，请在stream项目设置下重新添加凭据！ \n
bkExportTime=# 导出时间:
bkFailedUploadFile=上传文件失败:
bkFindRecommendedReplacementPlug=请在蓝盾研发商店查找推荐的替换插件！
bkFirstStageEnvNotEmpty=第一阶段的环境不能为空
bkIdentifiedSensitiveInformation=# ①识别出为敏感信息，不支持导出\n
bkIncorrectNotificationMethod=通知方式不正确
bkInvalidNotificationRecipient=通知接收者不合法:
bkMessageContentEmpty=Message Body is empty(消息内容为空)
bkMessageSubjectEmpty=邮件主题为空
bkModificationGuidelines=请联系插件开发者改造插件
bkMutexGroupSingleBuild=当前互斥组[{0}]同时只能运行一个构建任务，开始排队！
bkNoMatchFileDistribute=匹配不到待分发的文件: {0}
bkNoRightExportPipeline=用户({0})无权限在工程({1})下导出流水线
bkNodeNotExistUnderNewBusiness=# 注意: 【{0}】的节点【{1}】在新业务下可能不存在，
bkNonTimedTriggerSkip=非定时触发，直接跳过
bkRetryTimedTriggerSkip=重试定时触发，直接跳过
bkNotConfirmedCanExecuted=插件 {0} 尚未确认是否可以在工蜂CI执行
bkNotExistUnderNewBusiness=# 注意: 【{0}】的环境【{1}】在新业务下可能不存在，
bkNotSupportCurrentConstructionMachine=# 注意: 工蜂CI暂不支持当前类型的构建机
bkNoteDefaultXcodeVersion=注意默认的Xcode版本为12.2，若需自定义，请在JOB下自行执行 xcode-select 命令切换 ###
bkOldPlugNotSupport=内置老插件不支持导出，请使用市场插件 ###
bkOnlyVisiblePcgBusiness=# 注意: 【{0}】仅对PCG业务可见，请检查当前业务是否属于PCG！ \n
bkOverrule=驳回
bkTrigger=触发
bkOperationCompletedSuccessfully=查询版本上传 CDN 任务状态 操作 成功执行完毕\n
bkOperationParameters=\"上传动态资源版本\" 操作参数：
bkParametersBeExported=# \n# tips: 部分参数导出会存在[该字段限制导出，请手动填写],需要手动指定。原因有:\n
bkPipelineName=流水线名称
bkPipelinedId=# 流水线ID:
bkPleaseManuallyModify=请手动修改成存在的节点
bkPleaseUseStageAudit=人工审核插件请改用Stage审核 ###
bkPlugNotSupported=# 注意: 不支持插件【{0}({1})】的导出
bkPollingWaitForQualityResult=第 {0} 次轮询等待红线结果
bkProcessingCurrentReportedTaskPleaseWait=正在处理当前上报的任务, 请稍等。。。
bkPullGitWarehouseCode=拉取Git仓库代码
bkQualityCheckIntercepted=质量红线({0})检测被拦截
bkQualityCheckResult=检测红线结果
bkQualityCheckSucceed=质量红线({0})检测已通过
bkQualityToBeReview=质量红线({0})待审核!审核人: {1}
bkQueryFavoritePipeline=查询收藏的流水线:
bkQueryPipelineInfo=查流水线信息:
bkQueryVersionUpload=开始执行 查询版本上传 CDN 任务状态 操作\n
bkQuickApprovalMoa=【通过MOA快速审批】
bkQuickApprovalPc=【通过PC快速审批】
bkReceiverEmpty=Message Receivers is empty(接收人为空)
bkRecipientEmpty=收件人为空
bkRemoteCallSourceIp=本次远程调用的来源IP是[{0}]
bkResponseResult=预发布单个或多个渠道响应结果:
bkSearchStore=请在研发商店搜索新插件替换
bkSendWecomContent=发送企业微信内容: ({0}) 到 {1}
bkSendWecomContentFailed=发送企业微信内容: ({0}) 到 {1}失败:
bkSendWecomContentSuccessfully=发送企业微信内容: ({0}) 到 {1}成功
bkSendWecomMessage=send enterprise wechat message(发送企业微信消息):\n{0}\nto\n{1}
bkSensitiveInformationInParameters=# 注意: [插件]输入参数可能存在敏感信息，请仔细检查，谨慎分享！！！ \n
bkStartPerformingGcloudOperation=开始对文件（{0}）执行Gcloud相关操作，详情请去gcloud官方地址查看: 
bkStartReleaseOperation=开始执行 预发布 操作\n
bkStartUploadOperation=开始执行 \"上传动态资源版本\" 操作
bkStreamNotSupport=# 注意: [插件]Stream不支持蓝盾老版本的插件，请在研发商店搜索新插件替换 \n
bkSuccessfullyDistributed=跨项目构件分发成功，共分发了{0}个文件
bkSuccessfullyFailed=跨项目构件分发失败，
bkTriggeredByGitEventPlugin=因【Git事件触发】插件中，MR Request Hook勾选了【MR为同源同目标分支时，等待队列只保留最新触发的任务】配置，该次构建已被新触发的构建
bkUnknownContextExists=# ②部分字段校验格式时存在未知上下文，不支持导出\n
bkUserNoPipelineExecutePermissions=用户（{0}) 没有流水线({1})的执行权限
bkVersionExperienceCreatedSuccessfully=版本体验({0})创建成功
bkViewIdAndNameCannotBeEmptyTogether=<viewId>和<viewName>不能同时为空, 填<viewName>时需同时填写参数<isProject>
bkViewResult=查看结果:
bkWaitQueryVersion=\"等待查询版本上传\" CDN 任务状态 操作执行完毕: \n
bkWecomNotice=企业微信通知内容:
bkWorkerBeeCiNotSupport=# 注意: [插件]工蜂CI不支持依赖蓝盾项目的服务（如凭证、节点等），
LimitMessage=[该字段限制导出，请手动填写]
templateType.constraint=来自商店
templateType.customize=自定义模板
templateType.public=公共模版
unclassified=未分组

bkPendingApproval=步骤等待审核
bkReviewers=待审核人
bkReviewer=审核人
bkDescription=审核说明
bkParams=审核参数
bkAuditResultsApprove=审核结果：继续
bkAuditResultsReject=审核结果：驳回
bkFinalApproval=步骤审核结束
bkReviewComments=审核意见
bkQueueTimeout=排队超时
bkJobQueueTimeout=Job排队超时，请检查并发配置
bkTriggerUser=触发人
bkTclsEnvironmentMessage=获取 TCLS 环境失败，请检查用户名密码是否正确，错误信息：
bkTclsEnvironment=获取 TCLS 环境失败，请检查用户名密码是否正确
bkStartUser=执行人
bkWhenTheCustomVariablesAreAllSatisfied=[自定义变量全部满足时不运行]
bkCustomVariablesAreAllSatisfied=[自定义变量全部满足时运行]
bkCheckTaskRunCondition=检查插件运行条件:
bkTaskDisabled=插件被禁用 = true
bkOnlyWhenPreviousTaskHasFailed=[只有前面有任务失败时才运行]
bkItDoesNotRunUnlessItIsCanceled=[即使前面有插件运行失败也运行，除非被取消才不运行]
bkRunsEvenIfCanceled=[即使前面有插件运行失败也运行，即使被取消也运行]
bkJobFailureOrCancel=Job失败或被取消 skip=true
bkCheckJobRunCondition=检查Job运行条件:
bkReleaseLock=释放互斥组锁
bkGetLocked=获得锁定 锁定期:
bkQueueDisabled=未开启排队
bkCurrentNumberOfQueues=[当前排队数[{0}], 已等待[{1}} 秒]
bkQueueFull=队列满
bkEnqueue=当前排队数[{0}]. 入队等待
bkMutuallyExclusiveGroups=Job#{0}|互斥组Mutex[{1}]|
bkLocked=锁定中
bkClick=查看
bkCurrent=当前
bkPreviousStageCancel=[上游 Stage 取消时]:
bkPreviousStageFailed=[上游 Stage 失败时]:
bkPreviousStageSuccess=[上游 Stage 成功时]:
bkUnexecuteTask=终止构建，跳过
bkConditionInvalid=执行条件判断失败
bkUnexecutePostactionTask=[SystemLog]收到终止指令
bkMaxParallel=并行上限:
bkManuallySkipped=被手动跳过
bkEvent={0}事件
bkWarehouseEvents=仓库事件
bkVmStartAlready=重复启动构建机:
bkContinueWhenError=失败自动跳过
bkMutexWaiting=互斥中
bkQueuing=排队中
bkPending=审核中
bkQualityIn=质量红线(准入)
bkQualityOut=质量红线(准出)
bkBuildFinishedAndDenyPause=构建已结束，禁止暂停请求
commonShutdownSuccessContent=【${{%s}}】- 【${{%s}}】#${{%s}} 执行成功，耗时${{%s}}, 触发人: ${{%s}}。
commonShutdownFailureContent=【${{%s}}】- 【${{%s}}】#${{%s}} 执行失败，耗时${{%s}}, 触发人: ${{%s}}。
bkBeforePosition=准入-满足条件才能执行控制点
bkAfterPosition=准出-满足条件才能执行后续插件
bkTgitPushEventDesc=[{0}] 提交 [<a href="{1}" target="_blank">{2}</a>] 由 <span class="trigger-user">{3}</span> 推送 
bkTgitIssueCreatedEventDesc=议题 [<a href="{0}" target="_blank">!{1}</a>] 由 <span class="trigger-user">{2}</span> 创建 
bkTgitIssueUpdatedEventDesc=议题 [<a href="{0}" target="_blank">!{1}</a>] 由 <span class="trigger-user">{2}</span> 更新 
bkTgitIssueClosedEventDesc=议题 [<a href="{0}" target="_blank">!{1}</a>] 由 <span class="trigger-user">{2}</span> 关闭 
bkTgitIssueReopenedEventDesc=议题 [<a href="{0}" target="_blank">!{1}</a>] 由 <span class="trigger-user">{2}</span> 重新打开 
bkTgitMrCreatedEventDesc=合并请求 [<a href="{0}" target="_blank">!{1}</a>] 由 <span class="trigger-user">{2}</span> 创建
bkTgitMrUpdatedEventDesc=合并请求 [<a href="{0}" target="_blank">!{1}</a>] 由 <span class="trigger-user">{2}</span> 更新
bkTgitMrClosedEventDesc=合并请求 [<a href="{0}" target="_blank">!{1}</a>] 由 <span class="trigger-user">{2}</span> 关闭
bkTgitMrReopenedEventDesc=合并请求 [<a href="{0}" target="_blank">!{1}</a>] 由 <span class="trigger-user">{2}</span> 重新打开
bkTgitMrPushUpdatedEventDesc=合并请求 [<a href="{0}" target="_blank">!{1}</a>] 由 <span class="trigger-user">{2}</span> 在源分支提交代码触发
bkTgitMrMergedEventDesc=合并请求 [<a href="{0}" target="_blank">!{1}</a>] 由 <span class="trigger-user">{2}</span> 合并
bkTgitTagPushEventDesc=[{0}] 创建Tag [<a href="{1}" target="_blank">{2}</a>] 由 <span class="trigger-user">{3}</span> 推送
bkTgitTagDeleteEventDesc=[{0}] Tag [<a href="{1}" target="_blank">{2}</a>] 由 <span class="trigger-user">{3}</span> 删除
bkTgitNoteEventDesc=评论 [<a href="{0}" target="_blank">{1}</a>] 由 <span class="trigger-user">{2}</span> 发表 
bkTgitReviewCreatedEventDesc=代码审查 [<a href="{0}" target="_blank">{1}</a>] 由 <span class="trigger-user">{2}</span> 创建
bkTgitReviewApprovedEventDesc=代码审查 [<a href="{0}" target="_blank">{1}</a>] 由 <span class="trigger-user">{2}</span> 评审通过
bkTgitReviewApprovingEventDesc=代码审查 [<a href="{0}" target="_blank">{1}</a>] 评审中
bkTgitReviewClosedEventDesc=代码审查 [<a href="{0}" target="_blank">{1}</a>] 已关闭
bkTgitReviewChangeDeniedEventDesc=代码审查 [<a href="{0}" target="_blank">{1}</a>] 被 <span class="trigger-user">{2}</span> 拒绝
bkTgitReviewChangeRequiredEventDesc=代码审查 [<a href="{0}" target="_blank">{1}</a>] 由 <span class="trigger-user">{2}</span> 要求修改
bkGithubPushEventDesc=[{0}] 提交 [<a href="{1}" target="_blank">{2}</a>] 由 <span class="trigger-user">{3}</span> 推送
bkGithubCreateBranchEventDesc=分支 [<a href="{0}" target="_blank">{1}</a>] 由 <span class="trigger-user">{2}</span> 创建
bkGithubCreateTagEventDesc=Tag [<a href="{0}" target="_blank">{1}</a>] 由 <span class="trigger-user">{2}</span> 推送
bkGithubPrEventDesc=Pull request [<a href="{0}" target="_blank">{1}</a>] 由 <span class="trigger-user">{2}</span> {3}
bkP4EventDesc=Change {0} 由 <span class="trigger-user">{1}</span> {2}
bkSvnCommitEventDesc=提交 [{0}] 由 <span class="trigger-user">{1}</span> 推送
bkManualStartEventDesc=<span class="trigger-user">{0}</span> 手动触发
bkRemoteStartEventDesc=<span class="trigger-user">{0} [{1}]</span> 远程触发
bkServiceStartEventDesc=<span class="trigger-user">{0}</span> 触发的流水线调用
bkPipelineStartEventDesc=[<a href="{1}" target="_blank">{2}</a>] <span class="trigger-user">{0}</span> 子流水线调用
bkTimingStartEventDesc=<span class="trigger-user">{0}</span> 定时触发
bkEventReplayDesc=事件 [<a target="_self" href="?eventId={0}">{0}</a>] 由 <span class="trigger-user">{1}</span> 重放
bkRepoTriggerEventTypeNotMatch=事件类型不满足触发条件
bkRepoTriggerBranchNotMatch=分支[{0}]不满足触发条件
bkRepoTriggerBranchIgnored=分支[{0}]被排除
bkRepoTriggerTargetBranchNotMatch=MR目标分支[{0}]不满足触发条件
bkRepoTriggerTargetBranchIgnored=MR目标分支[{0}]被排除
bkRepoTriggerSourceBranchNotMatch=MR源分支[{0}]不满足触发条件
bkRepoTriggerSourceBranchIgnored=MR源分支[{0}]被排除
bkRepoTriggerUserNotMatch=触发人[{0}]不匹配
bkRepoTriggerUserIgnored=触发人[{0}]被排除
bkRepoTriggerPathNotMatch=路径不满足触发条件
bkRepoTriggerPathIgnored=路径被排除
bkRepoTriggerTagNameNotMatch=Tag 名称[{0}]不满足触发条件
bkRepoTriggerTagNameIgnored=Tag 名称[{0}]被排除
bkRepoTriggerTagSourceBranchNotMatch=Tag 来源分支不满足触发条件
bkRepoTriggerNoteContentNotMatch=评论内容不满足触发条件
bkRepoTriggerNoteActionNotMatch=评论类型不满足触发条件
bkRepoTriggerReviewActionNotMatch=评审类型不满足触发条件
bkRepoTriggerIssueActionNotMatch=Issue 动作不满足触发条件
bkMergeYamlCreateFileTitle=[{0}]新增流水线[{1}]
bkMergeYamlUpdateFileTitle=[{0}]修改流水线[{1}]
bkBuildQueueWaitingForConcurrency=构建的并发模式为：{0}，正在等待并发组[{1}]的[{2}]个构建执行完成，当前正在执行构建{3}
bkBuildQueueWaiting=构建的并发模式为：{0}，正在等待[{1}]个构建执行完成
bkBuildCancelByConcurrency=构建将被并发组[{0}]中优先级更高的构建{1}取消

operationLogType.NORMAL_SAVE_OPERATION=普通保存操作
operationLogType.CREATE_PIPELINE_AND_DRAFT=创建了草稿
operationLogType.CREATE_DRAFT_VERSION=新草稿基于
operationLogType.UPDATE_DRAFT_VERSION=修改了草稿
operationLogType.CREATE_BRANCH_VERSION=新增分支版本
operationLogType.UPDATE_BRANCH_VERSION=修改分支版本
operationLogType.RELEASE_MASTER_VERSION=发布版本
operationLogType.DISABLE_PIPELINE=禁用了流水线
operationLogType.ADD_PIPELINE_OWNER=添加执行者
operationLogType.ADD_PIPELINE_TO_GROUP=添加到流水线组
operationLogType.MOVE_PIPELINE_OUT_OF_GROUP=移出流水线组
operationLogType.UPDATE_PIPELINE_BY_OPENAPI=修改配置新增版本

trigger.build.param.basic=流水线内置变量
trigger.build.param.codeGitWebHookTrigger.ci.repo_type.desc=触发的代码库类型
trigger.build.param.codeGitWebHookTrigger.ci.repo_url.desc=触发的代码库链接
trigger.build.param.codeGitWebHookTrigger.ci.repo.desc=触发的代码库全名, 例如:gourp_name/repo_name
trigger.build.param.codeGitWebHookTrigger.ci.repo_group.desc=触发的代码库组名
trigger.build.param.codeGitWebHookTrigger.ci.repo_name.desc=触发的代码库名称
trigger.build.param.codeGitWebHookTrigger.ci.repo_alias_name.desc=触发的代码库在蓝盾的别名
trigger.build.param.codeGitWebHookTrigger.ci.event.desc=触发的事件类型
trigger.build.param.codeGitWebHookTrigger.ci.event_url.desc=触发事件的链接地址
trigger.build.param.codeGitWebHookTrigger.ci.branch.desc=触发的分支或 Tag
trigger.build.param.codeGitWebHookTrigger.ci.build_msg.desc=构建信息，根据事件类型取值规则如下: <br/>- Push:最后一次提交信息<br/>- Mr:Mr 标题<br/>- Note: 评论内容<br/>- Issue: Issue 标题<br/>- Review: Cr 标题<br/>- Tag: Tag 名称
trigger.build.param.codeGitWebHookTrigger.ci.commit_message.desc=提交信息，根据事件类型取值规则如下：<br/>- Push:最后一次提交信息<br/>- Mr:Mr 标题<br/>- Note: 评论内容<br/>- Issue: Issue 标题<br/>- Review: Cr 标题<br/>- Tag: Tag 最后一次提交信息
trigger.build.param.codeGitWebHookTrigger.ci.action.desc=触发动作
trigger.build.param.codeGitWebHookTrigger.ci.actor.desc=触发人
trigger.build.param.codeGitWebHookTrigger.ci.before_sha.desc=上一次push的commitSha, 当 Push-commit、Tag-push 触发时有效
trigger.build.param.codeGitWebHookTrigger.ci.before_sha_short.desc=上一次push的上一次push的commitSha前8位, 当 Push-commit、Tag-push 触发时有效,
trigger.build.param.codeGitWebHookTrigger.ci.sha.desc=Commit id
trigger.build.param.codeGitWebHookTrigger.ci.sha_short.desc=Commit id 的前 8 位
trigger.build.param.codeGitWebHookTrigger.ci.operation_kind.desc=本次PUSH触发的操作类型, 规则如下: <br/>- create: 创建分支或合并普通MR的push<br/>- delete: 删除分支的push<br/>- update: 文件修改的push<br/>- update_nonfastforward: non-fast-forward 提交
trigger.build.param.codeGitWebHookTrigger.ci.mr_proposer.desc=合并请求的作者或提交者
trigger.build.param.codeGitWebHookTrigger.ci.head_repo_url.desc=合并请求的目标代码库URL
trigger.build.param.codeGitWebHookTrigger.ci.base_repo_url.desc=合并请求的源代码库URL
trigger.build.param.codeGitWebHookTrigger.ci.head_ref.desc=合并请求的目标分支
trigger.build.param.codeGitWebHookTrigger.ci.base_ref.desc=合并请求的源分支
trigger.build.param.codeGitWebHookTrigger.ci.mr_id.desc=合并请求的id
trigger.build.param.codeGitWebHookTrigger.ci.mr_iid.desc=合并请求的序号
trigger.build.param.codeGitWebHookTrigger.ci.mr_desc.desc=合并请求的描述
trigger.build.param.codeGitWebHookTrigger.ci.mr_title.desc=合并请求的标题
trigger.build.param.codeGitWebHookTrigger.ci.mr_url.desc=合并请求的链接
trigger.build.param.codeGitWebHookTrigger.ci.mr_reviewers.desc=合并请求的评审人( 包括必要评审人 )
trigger.build.param.codeGitWebHookTrigger.ci.milestone_name.desc=合并请求的里程碑名称
trigger.build.param.codeGitWebHookTrigger.ci.milestone_id.desc=合并请求的里程碑 id
trigger.build.param.codeGitWebHookTrigger.ci.commit_author.desc=Tag 提交用户
trigger.build.param.codeGitWebHookTrigger.ci.tag_from.desc=Tag 来源, 分支名或Commit sha
trigger.build.param.codeGitWebHookTrigger.ci.issue_title.desc=Issue 标题
trigger.build.param.codeGitWebHookTrigger.ci.issue_id.desc=Issue id
trigger.build.param.codeGitWebHookTrigger.ci.issue_iid.desc=Issue 序号
trigger.build.param.codeGitWebHookTrigger.ci.issue_description.desc=Issue 描述
trigger.build.param.codeGitWebHookTrigger.ci.issue_state.desc=Issue 状态
trigger.build.param.codeGitWebHookTrigger.ci.issue_owner.desc=Issue 创建者
trigger.build.param.codeGitWebHookTrigger.ci.issue_milestone_id.desc=Issue 里程碑id
trigger.build.param.codeGitWebHookTrigger.ci.note_comment.desc=评论内容
trigger.build.param.codeGitWebHookTrigger.ci.note_id.desc=评论 ID
trigger.build.param.codeGitWebHookTrigger.ci.repo_id.desc=代码库Id
trigger.build.param.codeGitWebHookTrigger.ci.note_type.desc=评论类型
trigger.build.param.codeGitWebHookTrigger.ci.note_author.desc=评论作者
trigger.build.param.codeGitWebHookTrigger.ci.create_time.desc=评论创建时间
trigger.build.param.codeGitWebHookTrigger.ci.modify_time.desc=评论更新时间
trigger.build.param.codeGitWebHookTrigger.ci.review_id.desc=代码评审的ID
trigger.build.param.codeGitWebHookTrigger.ci.review_iid.desc=评审的序号
trigger.build.param.codeGitWebHookTrigger.ci.review_type.desc=评审类型
trigger.build.param.codeGitWebHookTrigger.ci.review_reviewers.desc=评审人列表, 以,分割
trigger.build.param.codeGitWebHookTrigger.ci.review_state.desc=评审状态
trigger.build.param.codeGitWebHookTrigger.ci.review_owner.desc=评审事件的作者
trigger.build.param.codeGitWebHookTrigger.common=Git 事件触发 - 公共变量
trigger.build.param.codeGitWebHookTrigger.PUSH=Git 事件触发 - 推送事件
trigger.build.param.codeGitWebHookTrigger.TAG_PUSH=Git 事件触发 - Tag 推送事件
trigger.build.param.codeGitWebHookTrigger.MERGE_REQUEST=Git 事件触发 - 合并请求事件
trigger.build.param.codeGitWebHookTrigger.MERGE_REQUEST_ACCEPT=Git 事件触发 - 合并请求已合并事件
trigger.build.param.codeGitWebHookTrigger.ISSUES=Git 事件触发 - 议题事件
trigger.build.param.codeGitWebHookTrigger.NOTE=Git 事件触发 - 评论事件
trigger.build.param.codeGitWebHookTrigger.REVIEW=Git 事件触发 - 评审事件
trigger.build.param.codeTGitWebHookTrigger.ci.repo_type.desc=触发的代码库类型
trigger.build.param.codeTGitWebHookTrigger.ci.repo_url.desc=触发的代码库链接
trigger.build.param.codeTGitWebHookTrigger.ci.repo.desc=触发的代码库全名, 例如:gourp_name/repo_name
trigger.build.param.codeTGitWebHookTrigger.ci.repo_group.desc=触发的代码库组名
trigger.build.param.codeTGitWebHookTrigger.ci.repo_name.desc=触发的代码库名称
trigger.build.param.codeTGitWebHookTrigger.ci.repo_alias_name.desc=触发的代码库在蓝盾的别名
trigger.build.param.codeTGitWebHookTrigger.ci.event.desc=触发的事件类型
trigger.build.param.codeTGitWebHookTrigger.ci.event_url.desc=触发事件的链接地址
trigger.build.param.codeTGitWebHookTrigger.ci.branch.desc=触发的分支或 Tag
trigger.build.param.codeTGitWebHookTrigger.ci.build_msg.desc=构建信息，根据事件类型取值规则如下: <br/>- Push:最后一次提交信息<br/>- Mr:Mr 标题<br/>- Note: 评论内容<br/>- Issue: Issue 标题<br/>- Review: Cr 标题<br/>- Tag: Tag 名称
trigger.build.param.codeTGitWebHookTrigger.ci.commit_message.desc=提交信息，根据事件类型取值规则如下：<br/>- Push:最后一次提交信息<br/>- Mr:Mr 标题<br/>- Note: 评论内容<br/>- Issue: Issue 标题<br/>- Review: Cr 标题<br/>- Tag: Tag 最后一次提交信息
trigger.build.param.codeTGitWebHookTrigger.ci.action.desc=触发动作
trigger.build.param.codeTGitWebHookTrigger.ci.actor.desc=触发人
trigger.build.param.codeTGitWebHookTrigger.ci.before_sha.desc=当 Push-commit、Tag-push 触发时有效, 上一次push的sha
trigger.build.param.codeTGitWebHookTrigger.ci.before_sha_short.desc=当 Push-commit、Tag-push 触发时有效, 上一次push的sha前8位
trigger.build.param.codeTGitWebHookTrigger.ci.sha.desc=Commit id
trigger.build.param.codeTGitWebHookTrigger.ci.sha_short.desc=Commit id 的前 8 位
trigger.build.param.codeTGitWebHookTrigger.ci.operation_kind.desc=本次PUSH触发的操作类型, 规则如下: <br/>- create: 创建分支或合并普通MR的push<br/>- delete: 删除分支的push<br/>- update: 文件修改的push<br/>- update_nonfastforward: non-fast-forward 提交
trigger.build.param.codeTGitWebHookTrigger.ci.mr_proposer.desc=合并请求的作者或提交者
trigger.build.param.codeTGitWebHookTrigger.ci.head_repo_url.desc=合并请求的目标代码库URL
trigger.build.param.codeTGitWebHookTrigger.ci.base_repo_url.desc=合并请求的源代码库URL
trigger.build.param.codeTGitWebHookTrigger.ci.head_ref.desc=合并请求的目标分支
trigger.build.param.codeTGitWebHookTrigger.ci.base_ref.desc=合并请求的源分支
trigger.build.param.codeTGitWebHookTrigger.ci.mr_id.desc=合并请求的id
trigger.build.param.codeTGitWebHookTrigger.ci.mr_iid.desc=合并请求的序号
trigger.build.param.codeTGitWebHookTrigger.ci.mr_desc.desc=合并请求的描述
trigger.build.param.codeTGitWebHookTrigger.ci.mr_title.desc=合并请求的标题
trigger.build.param.codeTGitWebHookTrigger.ci.mr_url.desc=合并请求的链接
trigger.build.param.codeTGitWebHookTrigger.ci.mr_reviewers.desc=合并请求的评审人( 包括必要评审人 )
trigger.build.param.codeTGitWebHookTrigger.ci.milestone_name.desc=合并请求的里程碑名称
trigger.build.param.codeTGitWebHookTrigger.ci.milestone_id.desc=合并请求的里程碑 id
trigger.build.param.codeTGitWebHookTrigger.ci.commit_author.desc=Tag 提交用户
trigger.build.param.codeTGitWebHookTrigger.ci.tag_from.desc=Tag 来源, 分支名或Commit sha
trigger.build.param.codeTGitWebHookTrigger.ci.issue_title.desc=Issue 标题
trigger.build.param.codeTGitWebHookTrigger.ci.issue_id.desc=Issue id
trigger.build.param.codeTGitWebHookTrigger.ci.issue_iid.desc=Issue 序号
trigger.build.param.codeTGitWebHookTrigger.ci.issue_description.desc=Issue 描述
trigger.build.param.codeTGitWebHookTrigger.ci.issue_state.desc=Issue 状态
trigger.build.param.codeTGitWebHookTrigger.ci.issue_owner.desc=Issue 创建者
trigger.build.param.codeTGitWebHookTrigger.ci.issue_milestone_id.desc=Issue 里程碑id
trigger.build.param.codeTGitWebHookTrigger.ci.note_comment.desc=评论内容
trigger.build.param.codeTGitWebHookTrigger.ci.note_id.desc=评论 ID
trigger.build.param.codeTGitWebHookTrigger.ci.repo_id.desc=代码库Id
trigger.build.param.codeTGitWebHookTrigger.ci.note_type.desc=评论类型
trigger.build.param.codeTGitWebHookTrigger.ci.note_author.desc=评论作者
trigger.build.param.codeTGitWebHookTrigger.ci.create_time.desc=评论创建时间
trigger.build.param.codeTGitWebHookTrigger.ci.modify_time.desc=评论更新时间
trigger.build.param.codeTGitWebHookTrigger.ci.review_id.desc=代码评审的ID
trigger.build.param.codeTGitWebHookTrigger.ci.review_iid.desc=评审的序号
trigger.build.param.codeTGitWebHookTrigger.ci.review_type.desc=评审类型
trigger.build.param.codeTGitWebHookTrigger.ci.review_reviewers.desc=评审人列表, 以,分割
trigger.build.param.codeTGitWebHookTrigger.ci.review_state.desc=评审状态
trigger.build.param.codeTGitWebHookTrigger.ci.review_owner.desc=评审事件的作者
trigger.build.param.codeTGitWebHookTrigger.PUSH=TGit 事件触发 - 推送事件
trigger.build.param.codeTGitWebHookTrigger.TAG_PUSH=TGit 事件触发 - Tag 推送事件
trigger.build.param.codeTGitWebHookTrigger.MERGE_REQUEST=TGit 事件触发 - 合并请求事件
trigger.build.param.codeTGitWebHookTrigger.MERGE_REQUEST_ACCEPT=TGit 事件触发 - 合并请求已合并事件
trigger.build.param.codeTGitWebHookTrigger.ISSUES=TGit 事件触发 - 议题事件
trigger.build.param.codeTGitWebHookTrigger.NOTE=TGit 事件触发 - 评论事件
trigger.build.param.codeTGitWebHookTrigger.REVIEW=TGit 事件触发 - 评审事件
trigger.build.param.codeTGitWebHookTrigger.common=TGit 事件触发 - 公共变量
trigger.build.param.codeGitlabWebHookTrigger.ci.repo_type.desc=触发的代码库类型
trigger.build.param.codeGitlabWebHookTrigger.ci.repo_url.desc=触发的代码库链接
trigger.build.param.codeGitlabWebHookTrigger.ci.repo.desc=触发的代码库全名, 例如:gourp_name/repo_name
trigger.build.param.codeGitlabWebHookTrigger.ci.repo_group.desc=触发的代码库组名
trigger.build.param.codeGitlabWebHookTrigger.ci.repo_name.desc=触发的代码库名称
trigger.build.param.codeGitlabWebHookTrigger.ci.repo_alias_name.desc=触发的代码库在蓝盾的别名
trigger.build.param.codeGitlabWebHookTrigger.ci.event.desc=触发的事件类型
trigger.build.param.codeGitlabWebHookTrigger.ci.event_url.desc=触发事件的链接地址
trigger.build.param.codeGitlabWebHookTrigger.ci.branch.desc=触发的分支或 Tag
trigger.build.param.codeGitlabWebHookTrigger.ci.build_msg.desc=构建信息，根据事件类型取值规则如下: <br/>- Push:最后一次提交信息<br/>- Mr:Mr 标题<br/>- Note: 评论内容<br/>- Issue: Issue 标题<br/>- Review: Cr 标题<br/>- Tag: Tag 名称
trigger.build.param.codeGitlabWebHookTrigger.ci.commit_message.desc=提交信息，根据事件类型取值规则如下：<br/>- Push:最后一次提交信息<br/>- Mr:Mr 标题<br/>- Note: 评论内容<br/>- Issue: Issue 标题<br/>- Review: Cr 标题<br/>- Tag: Tag 最后一次提交信息
trigger.build.param.codeGitlabWebHookTrigger.ci.action.desc=触发动作
trigger.build.param.codeGitlabWebHookTrigger.ci.actor.desc=触发人
trigger.build.param.codeGitlabWebHookTrigger.ci.before_sha.desc=当 Push-commit、Tag-push 触发时有效, 上一次push的sha
trigger.build.param.codeGitlabWebHookTrigger.ci.before_sha_short.desc=当 Push-commit、Tag-push 触发时有效, 上一次push的sha前8位
trigger.build.param.codeGitlabWebHookTrigger.ci.sha.desc=Commit id
trigger.build.param.codeGitlabWebHookTrigger.ci.sha_short.desc=Commit id 的前 8 位
trigger.build.param.codeGitlabWebHookTrigger.ci.operation_kind.desc=本次PUSH触发的操作类型, 规则如下: <br/>- create: 创建分支或合并普通MR的push<br/>- delete: 删除分支的push<br/>- update: 文件修改的push<br/>- update_nonfastforward: non-fast-forward 提交
trigger.build.param.codeGitlabWebHookTrigger.ci.mr_proposer.desc=合并请求的作者或提交者
trigger.build.param.codeGitlabWebHookTrigger.ci.head_repo_url.desc=合并请求的目标代码库URL
trigger.build.param.codeGitlabWebHookTrigger.ci.base_repo_url.desc=合并请求的源代码库URL
trigger.build.param.codeGitlabWebHookTrigger.ci.head_ref.desc=合并请求的目标分支
trigger.build.param.codeGitlabWebHookTrigger.ci.base_ref.desc=合并请求的源分支
trigger.build.param.codeGitlabWebHookTrigger.ci.mr_id.desc=合并请求的id
trigger.build.param.codeGitlabWebHookTrigger.ci.mr_iid.desc=合并请求的序号
trigger.build.param.codeGitlabWebHookTrigger.ci.mr_desc.desc=合并请求的描述
trigger.build.param.codeGitlabWebHookTrigger.ci.mr_title.desc=合并请求的标题
trigger.build.param.codeGitlabWebHookTrigger.ci.mr_url.desc=合并请求的链接
trigger.build.param.codeGitlabWebHookTrigger.ci.mr_reviewers.desc=合并请求的评审人( 包括必要评审人 )
trigger.build.param.codeGitlabWebHookTrigger.ci.milestone_name.desc=合并请求的里程碑名称
trigger.build.param.codeGitlabWebHookTrigger.ci.milestone_id.desc=合并请求的里程碑 id
trigger.build.param.codeGitlabWebHookTrigger.ci.commit_author.desc=Tag 提交用户
trigger.build.param.codeGitlabWebHookTrigger.ci.tag_from.desc=Tag 来源, 分支名或Commit sha
trigger.build.param.codeGitlabWebHookTrigger.ci.issue_title.desc=Issue 标题
trigger.build.param.codeGitlabWebHookTrigger.ci.issue_id.desc=Issue id
trigger.build.param.codeGitlabWebHookTrigger.ci.issue_iid.desc=Issue 序号
trigger.build.param.codeGitlabWebHookTrigger.ci.issue_description.desc=Issue 描述
trigger.build.param.codeGitlabWebHookTrigger.ci.issue_state.desc=Issue 状态
trigger.build.param.codeGitlabWebHookTrigger.ci.issue_owner.desc=Issue 创建者
trigger.build.param.codeGitlabWebHookTrigger.ci.issue_milestone_id.desc=Issue 里程碑id
trigger.build.param.codeGitlabWebHookTrigger.ci.note_comment.desc=评论内容
trigger.build.param.codeGitlabWebHookTrigger.ci.note_id.desc=评论 ID
trigger.build.param.codeGitlabWebHookTrigger.ci.repo_id.desc=代码库Id
trigger.build.param.codeGitlabWebHookTrigger.ci.note_type.desc=评论类型
trigger.build.param.codeGitlabWebHookTrigger.ci.note_author.desc=评论作者
trigger.build.param.codeGitlabWebHookTrigger.ci.create_time.desc=评论创建时间
trigger.build.param.codeGitlabWebHookTrigger.ci.modify_time.desc=评论更新时间
trigger.build.param.codeGitlabWebHookTrigger.ci.review_id.desc=代码评审的ID
trigger.build.param.codeGitlabWebHookTrigger.ci.review_iid.desc=评审的序号
trigger.build.param.codeGitlabWebHookTrigger.ci.review_type.desc=评审类型
trigger.build.param.codeGitlabWebHookTrigger.ci.review_reviewers.desc=评审人列表, 以,分割
trigger.build.param.codeGitlabWebHookTrigger.ci.review_state.desc=评审状态
trigger.build.param.codeGitlabWebHookTrigger.ci.review_owner.desc=评审事件的作者
trigger.build.param.codeGitlabWebHookTrigger.common=Gitlab 事件触发 - 公共变量
trigger.build.param.codeGitlabWebHookTrigger.PUSH=Gitlab 事件触发 - 推送事件
trigger.build.param.codeGitlabWebHookTrigger.TAG_PUSH=Gitlab 事件触发 - Tag 推送事件
trigger.build.param.codeGitlabWebHookTrigger.MERGE_REQUEST=Gitlab 事件触发 - 合并请求事件
trigger.build.param.codeGitlabWebHookTrigger.MERGE_REQUEST_ACCEPT=Gitlab 事件触发 - 合并请求已合并事件
trigger.build.param.codeGitlabWebHookTrigger.ISSUES=Gitlab 事件触发 - 议题事件
trigger.build.param.codeGitlabWebHookTrigger.NOTE=Gitlab 事件触发 - 评论事件
trigger.build.param.codeGitlabWebHookTrigger.REVIEW=Gitlab 事件触发 - 评审事件
trigger.build.param.codeGithubWebHookTrigger.ci.repo_type.desc=触发的代码库类型
trigger.build.param.codeGithubWebHookTrigger.ci.repo_url.desc=触发的代码库链接
trigger.build.param.codeGithubWebHookTrigger.ci.repo.desc=触发的代码库全名, 例如:gourp_name/repo_name
trigger.build.param.codeGithubWebHookTrigger.ci.repo_group.desc=触发的代码库组名
trigger.build.param.codeGithubWebHookTrigger.ci.repo_name.desc=触发的代码库名称
trigger.build.param.codeGithubWebHookTrigger.ci.repo_alias_name.desc=触发的代码库在蓝盾的别名
trigger.build.param.codeGithubWebHookTrigger.ci.event.desc=触发的事件类型
trigger.build.param.codeGithubWebHookTrigger.ci.event_url.desc=触发事件的链接地址
trigger.build.param.codeGithubWebHookTrigger.ci.branch.desc=触发的分支或 Tag
trigger.build.param.codeGithubWebHookTrigger.ci.build_msg.desc=构建信息，根据事件类型取值规则如下: <br/>- Push:最后一次提交信息<br/>- Pr:Pr 标题<br/>- Note: 评论内容<br/>- Issue: Issue 标题<br/>- Review: Cr 标题<br/>- create: Tag或分支名称
trigger.build.param.codeGithubWebHookTrigger.ci.commit_message.desc=提交信息，根据事件类型取值规则如下：<br/>- Push:最后一次提交信息<br/>- Pr:Pr 标题<br/>- Note: 评论内容<br/>- Issue: Issue 标题<br/>- Review: Cr 标题<br/>- Tag: Tag或分支最后一次提交信息
trigger.build.param.codeGithubWebHookTrigger.ci.action.desc=触发动作
trigger.build.param.codeGithubWebHookTrigger.ci.actor.desc=触发人
trigger.build.param.codeGithubWebHookTrigger.ci.before_sha.desc=当 Push-commit, 上一次push的sha
trigger.build.param.codeGithubWebHookTrigger.ci.before_sha_short.desc=当 Push-commit, 上一次push的sha前8位
trigger.build.param.codeGithubWebHookTrigger.ci.sha.desc=Commit id
trigger.build.param.codeGithubWebHookTrigger.ci.sha_short.desc=Commit id 的前 8 位
trigger.build.param.codeGithubWebHookTrigger.ci.mr_proposer.desc=拉取请求的作者或提交者
trigger.build.param.codeGithubWebHookTrigger.ci.head_repo_url.desc=拉取请求的目标代码库URL
trigger.build.param.codeGithubWebHookTrigger.ci.base_repo_url.desc=拉取请求的源代码库URL
trigger.build.param.codeGithubWebHookTrigger.ci.head_ref.desc=拉取请求的目标分支
trigger.build.param.codeGithubWebHookTrigger.ci.base_ref.desc=拉取请求的源分支
trigger.build.param.codeGithubWebHookTrigger.ci.mr_id.desc=拉取请求的id
trigger.build.param.codeGithubWebHookTrigger.ci.mr_iid.desc=拉取请求的序号
trigger.build.param.codeGithubWebHookTrigger.ci.mr_desc.desc=拉取请求的描述
trigger.build.param.codeGithubWebHookTrigger.ci.mr_title.desc=拉取请求的标题
trigger.build.param.codeGithubWebHookTrigger.ci.mr_url.desc=拉取请求的链接
trigger.build.param.codeGithubWebHookTrigger.ci.mr_reviewers.desc=拉取请求的评审人( 包括必要评审人 )
trigger.build.param.codeGithubWebHookTrigger.ci.milestone_name.desc=拉取请求的里程碑名称
trigger.build.param.codeGithubWebHookTrigger.ci.milestone_id.desc=拉取请求的里程碑 id
trigger.build.param.codeGithubWebHookTrigger.ci.commit_author.desc=Tag 提交用户
trigger.build.param.codeGithubWebHookTrigger.ci.issue_title.desc=Issue 标题
trigger.build.param.codeGithubWebHookTrigger.ci.issue_id.desc=Issue id
trigger.build.param.codeGithubWebHookTrigger.ci.issue_iid.desc=Issue 序号
trigger.build.param.codeGithubWebHookTrigger.ci.issue_description.desc=Issue 描述
trigger.build.param.codeGithubWebHookTrigger.ci.issue_state.desc=Issue 状态
trigger.build.param.codeGithubWebHookTrigger.ci.issue_owner.desc=Issue 创建者
trigger.build.param.codeGithubWebHookTrigger.ci.issue_milestone_id.desc=Issue 里程碑id
trigger.build.param.codeGithubWebHookTrigger.ci.note_comment.desc=评论内容
trigger.build.param.codeGithubWebHookTrigger.ci.note_id.desc=评论 ID
trigger.build.param.codeGithubWebHookTrigger.ci.repo_id.desc=代码库Id
trigger.build.param.codeGithubWebHookTrigger.ci.note_type.desc=评论类型
trigger.build.param.codeGithubWebHookTrigger.ci.note_author.desc=评论作者
trigger.build.param.codeGithubWebHookTrigger.ci.create_time.desc=评论创建时间
trigger.build.param.codeGithubWebHookTrigger.ci.modify_time.desc=评论更新时间
trigger.build.param.codeGithubWebHookTrigger.ci.review_id.desc=代码评审的ID
trigger.build.param.codeGithubWebHookTrigger.ci.review_iid.desc=评审的序号
trigger.build.param.codeGithubWebHookTrigger.ci.review_type.desc=评审类型
trigger.build.param.codeGithubWebHookTrigger.ci.review_reviewers.desc=评审人列表, 以,分割
trigger.build.param.codeGithubWebHookTrigger.ci.review_state.desc=评审状态
trigger.build.param.codeGithubWebHookTrigger.ci.review_owner.desc=评审事件的作者
trigger.build.param.codeGithubWebHookTrigger.ci.create_ref.desc=创建的分支名或Tag名
trigger.build.param.codeGithubWebHookTrigger.ci.create_type.desc=创建要素的类型
trigger.build.param.codeGithubWebHookTrigger.PUSH=Github 事件触发 - 推送事件
trigger.build.param.codeGithubWebHookTrigger.ISSUES=Github 事件触发 - 议题事件
trigger.build.param.codeGithubWebHookTrigger.NOTE=Github 事件触发 - 评论事件
trigger.build.param.codeGithubWebHookTrigger.REVIEW=Github 事件触发 - 评审事件
trigger.build.param.codeGithubWebHookTrigger.CREATE=Github 事件触发 - 创建 Tag/Branch 事件
trigger.build.param.codeGithubWebHookTrigger.PULL_REQUEST=Github 事件触发 - 拉取请求事件
trigger.build.param.codeGithubWebHookTrigger.PULL_REQUEST_ACCEPT=Github 事件触发 - 拉取请求已合并事件
trigger.build.param.codeGithubWebHookTrigger.common=Github 事件触发 - 公共变量
trigger.build.param.codeSVNWebHookTrigger.ci.sha.desc=SVN提交版本号
trigger.build.param.codeSVNWebHookTrigger.ci.actor.desc=SVN提交人
trigger.build.param.codeSVNWebHookTrigger.ci.event.desc=触发事件描述
trigger.build.param.codeSVNWebHookTrigger.ci.build_msg.desc=触发信息
trigger.build.param.codeSVNWebHookTrigger.ci.repo.desc=触发的代码库
trigger.build.param.codeSVNWebHookTrigger.ci.repo_alias_name.desc=触发的代码库在蓝盾的别名
trigger.build.param.codeSVNWebHookTrigger.ci.repo_url.desc=触发的代码库链接
trigger.build.param.codeSVNWebHookTrigger.POST_COMMIT=SVN 事件触发 - 公共变量
trigger.build.param.codeP4WebHookTrigger.ci.sha.desc=P4提交版本号
trigger.build.param.codeP4WebHookTrigger.ci.actor.desc=P4提交人
trigger.build.param.codeP4WebHookTrigger.ci.event.desc=触发事件类型
trigger.build.param.codeP4WebHookTrigger.ci.build_msg.desc=触发信息
trigger.build.param.codeP4WebHookTrigger.ci.repo.desc=触发的代码库
trigger.build.param.codeP4WebHookTrigger.ci.repo_alias_name.desc=触发的代码库在蓝盾的别名
trigger.build.param.codeP4WebHookTrigger.ci.repo_url.desc=触发的代码库链接
trigger.build.param.codeP4WebHookTrigger.common=P4 事件触发 - 公共变量
bkRepoTriggerPrActionNotMatch=Pull request 动作不满足触发条件
bkAgentReuseMutex=Agent复用互斥组Mutex[{0}]|
bkAgentReuseMutexAgentIdNull=Agent复用互斥组Mutex|AgentId为空|
bkNotSubPipelineExecutePermissionErrorTitle=用户[{0}]没有如下子流水线的执行权限，保存失败:
bkNotSubPipelineExecutePermissionErrorMessage=Stage[{0}]-Job[{1}]-Step[{2}]:<a target="_blank" href="{3}">{4}</a>
bkPipelineElementCheckFailedMessage=流水线插件有效性校验失败
bkRepoTriggerMrActionNotMatch=Merge request 动作不满足触发条件
bkRepoTriggerPushActionNotMatch=Push 动作不满足触发条件
bkPipelineRunConditionResult=自定义条件[{0}]的计算结果为：{1}
bkPipelineRunConditionNotMatch=，条件未满足即将跳过
bkPipelineRunConditionWithError=自定义条件计算出错：{0}
