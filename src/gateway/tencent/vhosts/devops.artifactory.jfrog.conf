#流水线归档文件，归档到构件号下
location ~ /(archive|report)/result/(.*) {
    auth_request /auth/build;

    # 设置auth的变量
    include auth.request.set.build.conf;

    include set.artifactory.conf;

    set $access_type 'build';
    set $type $1;
    set $path $2;

    # 设置proxy header的变量
    include proxy.set.header.build.conf;

    # 反向代理到目标ip，端口，路径和参数

    proxy_pass http://$domain/generic-local/bk-$type/$projectId/$pipelineId/$buildId/$path?$args;
}

#自定义归档文件，归档到项目下
location ~ /(custom|atom)/result/(.*) {
    auth_request /auth/build;

    # 设置auth的变量
    include auth.request.set.build.conf;

    include set.artifactory.conf;

    set $access_type 'build';
    set $type $1;
    set $path $2;

    # 设置proxy header的变量
    include proxy.set.header.build.conf;

    # 反向代理到目标ip，端口，路径和参数
    proxy_pass http://$domain/generic-local/bk-$type/$projectId/$path?$args;
}

# 安全加固归档路径
location ~ /gs/result/([\w-_]*)/(.*) {
    auth_request /auth/service;

    include set.artifactory.conf;

    set $access_type 'build';
    set $project_code $1;
    set $path $2;

    # 设置proxy header的变量
    include proxy.set.header.common.conf;

    # 反向代理到目标ip，端口，路径和参数
    proxy_pass http://$domain/generic-local/bk-custom/$project_code/gs/$path?$args;
}

# service微服务（第三方服务）的自定义归档
location ~ /custom/service/result/([\w-_]+)/(.*) {
    auth_request /auth/service;

    include set.artifactory.conf;

    set $access_type 'service';
    set $project_code $1;
    set $path $2;

    # 设置proxy header的变量
    include proxy.set.header.common.conf;

    # 反向代理到目标ip，端口，路径和参数
    proxy_pass http://$domain/generic-local/bk-custom/$project_code/$path?$args;
}

# 微服务归档文件
location ~ /service/result/([\w-_]+)/(\w+|p-\w+)/(\w+|b-\w+)/(.*) {
    auth_request /auth/service;

    include set.artifactory.conf;

    set $access_type 'service';
    set $project_code $1;
    set $pipeline_id $2;
    set $build_id $3;
    set $sub_path $4;

    # 设置proxy header的变量
    include proxy.set.header.common.conf;

    # 反向代理到目标ip，端口，路径和参数
    proxy_pass http://$domain/generic-local/bk-archive/$project_code/$pipeline_id/$build_id/$sub_path?$args;
}

# jfrogapi的build层服务分发
location ~ /jfrog/api/build/(archive|custom|plugin|atom)/(.*) {
    auth_request /auth/build;

    # 设置auth的变量
    include auth.request.set.build.conf;

    include set.artifactory.conf;

    set $access_type 'build';
    set $service_code $1;
    set $sub_path $2;

    # 设置proxy header的变量
    include proxy.set.header.build.conf;

    # 反向代理到目标ip，端口，路径和参数
    proxy_pass http://$domain/api/storage/generic-local/bk-$service_code/$projectId/$sub_path?$args;
}

# jfrogapi的build层服务分发
location ~ /jfrog/api/service/(archive|custom)/(.*) {
    auth_request /auth/service;

    include set.artifactory.conf;

    set $access_type 'build';
    set $service_code $1;
    set $sub_path $2;

    # 设置proxy header的变量
    include proxy.set.header.common.conf;

    # 反向代理到目标ip，端口，路径和参数
    proxy_pass http://$domain/api/storage/generic-local/bk-$service_code/$sub_path?$args;
}

# jfrog为插件SDK开发而用的一些接口请求转发
location ~ /jfrog/api/buildAgent/(custom)/([^/]+)/(.*) {
    include method.get.only.conf;
    auth_request /auth/build;

    # 设置auth的变量
    include auth.request.set.build.conf;

    include set.artifactory.conf;

    set $access_type 'build';
    set $service_code $1;
    set $sub_path $2;

    # 设置proxy header的变量
    include proxy.set.header.build.conf;

    # 反向代理到目标ip，端口，路径和参数
    proxy_pass http://$domain/generic-local/bk-$service_code/$projectId/$sub_path?$args;
}

# jfrog为插件SDK开发而用的一些接口请求转发
location ~ /jfrog/api/buildAgent/(archive)/([^/]+)/(.*) {
    include method.get.only.conf;
    auth_request /auth/build;

    include set.artifactory.conf;

    set $access_type 'build';
    set $service_code $1;
    set $sub_path $2;

    # 设置proxy header的变量
    include proxy.set.header.common.conf;

    # 反向代理到目标ip，端口，路径和参数
    proxy_pass http://$domain/generic-local/bk-$service_code/$projectId/$pipelineId/$buildId/$sub_path?$args;
}

# jfrogcopyapi的build层服务分发
location ~ /jfrog/api/build/search/aql {
    auth_request /auth/build;

    # 设置auth的变量
    include auth.request.set.build.conf;

    include set.artifactory.conf;

    set $access_type 'build';

    # 设置proxy header的变量
    include proxy.set.header.build.conf;

    # 反向代理到目标ip，端口，路径和参数
    proxy_pass http://$domain/api/search/aql?$args;
}

# jfrogcopyapi的build层服务分发
location ~ /jfrog/api/service/search/aql {
    auth_request /auth/service;

    include set.artifactory.conf;

    set $access_type 'build';

    # 设置proxy header的变量
    include proxy.set.header.common.conf;

    # 反向代理到目标ip，端口，路径和参数
    proxy_pass http://$domain/api/search/aql?$args;
}


location ~ /dockerbuild/credential {
    auth_request /auth/build;

    # 设置auth的变量
    include auth.request.set.build.conf;

    include set.artifactory.conf;

    # 设置proxy header的变量
    include proxy.set.header.build.conf;

    content_by_lua_file 'conf/lua/content/content_dockerbuild_credential.lua';
}

# jfrog存储层服务分发
location ~ /jfrog/storage/user/(artifactory|credential|pipeline|codecc|bcs|report)/(\w*)/([\w-_]+)/(.*[^/])$ {
    proxy_intercept_errors on;
    include error/error.html.conf;
    header_filter_by_lua_file 'conf/lua/cors_filter.lua';
    # include method.get.only.conf;
    auth_request /auth/user;

    # 设置auth的变量
    include auth.request.set.user.conf;

    include set.artifactory.conf;

    set $access_type 'user';
    set $service_code $1;
    set $resource_type $2;
    set $project_code $3;
    set $resource_code $4;
    set $storage_path '';

    access_by_lua_file 'conf/lua/router_jfrog.lua';

    # 设置proxy header的变量
    include proxy.set.header.user.conf;

    # 反向代理到目标ip，端口，路径和参数
    proxy_pass http://$domain/$storage_path$project_code/$resource_code?$args;
}


# jfrog的build层服务分发
location ~ /jfrog/storage/build/(archive|custom)/(.*) {
    include method.get.only.conf;
    auth_request /auth/build;

    # 设置auth的变量
    include auth.request.set.build.conf;

    include set.artifactory.conf;

    set $access_type 'build';
    set $service_code $1;
    set $sub_path $2;

    # 设置proxy header的变量
    include proxy.set.header.build.conf;

    # 反向代理到目标ip，端口，路径和参数
    proxy_pass http://$domain/generic-local/bk-$service_code/$projectId/$sub_path?$args;
}

# jfrog的build层服务分发，atom原子市场(old)
location ~ /jfrog/storage/build/(atom)/([^/]+)/(.*) {
    include method.get.only.conf;
    auth_request /auth/build;

    # 设置auth的变量
    include auth.request.set.build.conf;

    include set.artifactory.conf;

    set $access_type 'build';
    set $service_code $1;
    set $atom_code $2;
    set $sub_path $3;

    # 设置proxy header的变量
    include proxy.set.header.build.conf;

    # 反向代理到目标ip，端口，路径和参数
    proxy_pass http://$domain/generic-local/bk-$service_code/$projectId/$atom_code/$sub_path?$args;
}

# bkrepo的build层服务分发, atom原子市场(new , 临时方案 , 需要插件商城直连bkrepo)
location ~ /repo/storge/build/atom/(.*) {
    include method.get.only.conf;
    auth_request /auth/build;

    # 设置proxy header的变量
    include proxy.set.header.build.conf;
    include auth.request.set.build.conf;

    # 域名
    set_by_lua_block $domain {
        return config.bkrepo.domain
    }
    proxy_set_header Host $domain;
    proxy_set_header Authorization "Basic Z19ia3N0b3JlOmJrc3RvcmUyMDIx";

    set $access_type 'build';
    set $sub_path $1;

    # 反向代理到目标ip，端口，路径和参数
    proxy_pass http://$domain/generic/ext/bkstore/atom/$sub_path?publicFlag=true;
}

# jfrogstorage的第三方层服务分发
location ~ /jfrog/storage/service/(archive|custom|atom)/(.*) {
    include method.get.only.conf;
    auth_request /auth/service;

    include set.artifactory.conf;

    set $access_type 'service';
    set $service_code $1;
    set $sub_path $2;

    # 设置proxy header的变量
    include proxy.set.header.common.conf;

    # 反向代理到目标ip，端口，路径和参数
    proxy_pass http://$domain/generic-local/bk-$service_code/$sub_path?$args;
}

# jfrogstorage的第三方层服务分发
location ~ /jfrog/storage/thirdparty/(custom|archive)/(.*[^/])$ {
    include method.get.only.conf;

    include set.artifactory.conf;

    set $access_type 'thirdparty';
    set $service_code $1;
    set $sub_path $2;

    # 设置proxy header的变量
    include proxy.set.header.common.conf;

    # 反向代理到目标ip，端口，路径和参数
    proxy_pass http://$domain/generic-local/bk-$service_code/$sub_path?$args;
}

# jfrog的ide-plugin下载
location ~ ^/ide-plugin/(.*) {
    include method.get.only.conf;
    include set.artifactory.conf;
    set $sub_path $1;

    set_by_lua_block $domain {
        return config.artifactory.domain
    }

    # 设置proxy header的变量
    include proxy.set.header.common.conf;

    more_set_headers "Content-Disposition: ";

    # 反向代理到目标ip，端口，路径和参数
    proxy_pass http://$domain/generic-public/ide-plugin/$sub_path?$args;
}

# jfrog的bk-plugin-fe下载
location ~ ^/bk-plugin-fe/(.*) {
    include method.get.only.conf;
    set $sub_path $1;

    set_by_lua_block $domain {
        return config.bkrepo.static_domain
    }

    header_filter_by_lua_block {
        if string.find(ngx.var.sub_path,"html$") then
            ngx.header["Cache-Control"] = "no-cache"
        else
            ngx.header["Cache-Control"] = "max-age=86400"
        end
    }

    # 设置proxy header的变量
    include proxy.set.header.common.conf;

    more_set_headers "Content-Disposition: ";

    # 反向代理到目标ip，端口，路径和参数
    proxy_pass http://$domain/bk-store/bk-plugin-fe/$sub_path?$args;
}
