# DEVNET网关转发到IDC网关
location / {
    set_by_lua_block $domain {
        if ngx.var.host == "devgw.devops.oa.com" then
        return "v2.devops.oa.com"
        end
        local domain = string.gsub(ngx.var.host , "-devnet" , "")
        domain = string.gsub(domain, "devnet%.", "")
        domain = string.gsub(domain, "devgw%.", "")
        return domain
    }
    set_by_lua_block $gw_token {
        return ngx.req.get_headers()["X-DEVOPS-TOKEN"] or config.gw_token or "null"
    }

    # 设置proxy header的变量
    proxy_set_header Host $domain;
    proxy_set_header X-DEVOPS-TOKEN $gw_token;
    include proxy.set.header.common.conf;

    # 反向代理到目标ip，端口，路径和参数
    proxy_pass http://$domain;
}


# devnet的IOS签名
location ~ ^/ios/sign/(.*) {
    auth_request /auth/build;

    # 设置auth的变量
    include auth.request.set.build.conf;

    set_by_lua_block $domain {
        local env = config.env
        if env == "prod" then
        local domain = ngx.var.host
        if (string.match(domain, 'sh%-devnet') ~= nil or string.match(domain, 'sh%-devgw') ~= nil) then
        return "sh-ios-sign"
        end
        if (string.match(domain, 'cd%-devnet') ~= nil or string.match(domain, 'cd%-devgw') ~= nil) then
        return "cd-ios-sign"
        end
        if (string.match(domain, 'tj%-devnet') ~= nil or string.match(domain, 'tj%-devgw') ~= nil) then
        return "tj-ios-sign"
        end
        return "ios-sign"
        else
        return "dev-ios-sign"
        end
    }

    set_by_lua_block $env {
        return config.env
    }

    # 设置proxy header的变量
    include proxy.set.header.build.conf;

    # 反向代理到目标ip，端口，路径和参数
    proxy_pass http://$domain/$1?$args&projectId=$projectId&pipelineId=$pipelineId&buildId=$buildId&env=$env;
}


# devnet的
location ~ ^/ios/preview/sign/(.*) {
    auth_request /auth/service;

    set_by_lua_block $projectId {
        local env = config.env
        if (env == "dev") then
        return "iospreviewdev"
        end
        if (env == "test") then
        return "iospreviewtest"
        end
        if (env == "prod") then
        return "iospreview"
        end
        return "iospreview"
    }
    set_by_lua_block $pipelineId {
        local env = config.env
        if (env == "dev") then
        return "9c17c65184cd4058844287f7f1db8a13"
        end
        if (env == "test") then
        return "a45296a3c70e47efa98b1e5e12cbcb46"
        end
        if (env == "prod") then
        return "2130e8dde5ef480e8c1a178db53d5cd4"
        end
        return "2130e8dde5ef480e8c1a178db53d5cd4"
    }

    set_by_lua_block $buildId {
        local env = config.env
        if (env == "dev") then
        return "7f7defd1abf74af38a8413dfba3bbf3c"
        end
        if (env == "test") then
        return "8612cd8715614a0580f8daa6352eca01"
        end
        if (env == "prod") then
        return "d3459faaa7de4ba58a8f5bd8610693d7"
        end
        return "d3459faaa7de4ba58a8f5bd8610693d7"
    }

    set_by_lua_block $env {
        return config.env
    }

    # 设置proxy header的变量
    include proxy.set.header.common.conf;

    # 反向代理到目标ip，端口，路径和参数
    proxy_pass "http://ios-preview/$1?$args&projectId=$projectId&pipelineId=$pipelineId&buildId=$buildId&env=$env&repoType=1&customPath=ios_sign";
}


###### webconsole
# dockert从idc到devnet的worker的反向代理
location = /docker-console {
    access_by_lua_file "conf/lua/auth/auth_web_console.lua";
    set_by_lua_block $domain {
        local targetIP = ngx.var.arg_targetIP
        return targetIP
    }
    set_by_lua_block $containerId {
        local containerId = ngx.var.arg_containerId
        return containerId
    }
    proxy_set_header Cookie $http_cookie;
    # 后端验证使用。
    proxy_set_header X-AUTH-TOKEN "1173d88ac957e2097a7f86278102d959";

    proxy_ssl_certificate cert/console_proxy_client.crt;
    proxy_ssl_certificate_key cert/console_proxy_client.key;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "Upgrade";

    # 设置proxy header的变量
    include proxy.set.header.common.conf;

    # 反向代理到目标ip，端口，路径和参数
    proxy_pass https://$domain:9999/bcssapi/v1/consoleproxy/webconsole?containerid=$containerId&$args;
}


# dockert从idc到devnet的worker的反向代理
location = /docker-console-new {
    access_by_lua_file "conf/lua/auth/auth_web_console.lua";
    set_by_lua_block $domain {
        local targetIP = ngx.var.arg_targetIP
        return targetIP
    }
    set_by_lua_block $containerId {
        local containerId = ngx.var.arg_containerId
        return containerId
    }
    set_by_lua_block $eventId {
        local eventId = ngx.var.arg_eventId
        return eventId
    }
    proxy_set_header Cookie $http_cookie;
    # 后端验证使用。
    proxy_set_header X-AUTH-TOKEN "1173d88ac957e2097a7f86278102d959";

    proxy_ssl_certificate cert/console_proxy_client.crt;
    proxy_ssl_certificate_key cert/console_proxy_client.key;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "Upgrade";

    # 设置proxy header的变量
    include proxy.set.header.common.conf;

    # 反向代理到目标ip，端口，路径和参数
    proxy_pass https://$domain:9999/bcsapi/v1/consoleproxy/start_exec?exec_id=$eventId&container_id=$containerId&$args;
}

# dockert从idc到devnet的worker的反向代理
location = /docker-console-new-v2 {
    access_by_lua_file "conf/lua/auth/auth_web_console.lua";
    set_by_lua_block $domain {
        local targetIP = ngx.var.arg_targetIP
        return targetIP
    }
    set_by_lua_block $containerId {
        local containerId = ngx.var.arg_containerId
        return containerId
    }
    set_by_lua_block $eventId {
        local eventId = ngx.var.arg_eventId
        return eventId
    }
    proxy_set_header Cookie $http_cookie;
    # 后端验证使用。
    proxy_set_header X-AUTH-TOKEN "1173d88ac957e2097a7f86278102d959";

    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "Upgrade";

    # 设置proxy header的变量
    include proxy.set.header.common.conf;

    # 反向代理到目标ip，端口，路径和参数
    proxy_pass http://$domain:9999/bcsapi/v1/consoleproxy/start_exec?exec_id=$eventId&container_id=$containerId&$args;
}

# dockert从idc到devnet的worker的反向代理
location = /docker-console-create {
    header_filter_by_lua_file 'conf/lua/cors_filter.lua';
    access_by_lua_file "conf/lua/auth/auth_web_console.lua";
    set_by_lua_block $domain {
        local targetIP = ngx.var.arg_targetIP
        return targetIP
    }

    proxy_set_header Cookie $http_cookie;
    # 后端验证使用。
    proxy_set_header X-AUTH-TOKEN "1173d88ac957e2097a7f86278102d959";
    proxy_ssl_certificate cert/console_proxy_client.crt;
    proxy_ssl_certificate_key cert/console_proxy_client.key;

    # 设置proxy header的变量
    include proxy.set.header.common.conf;

    # 反向代理到目标ip，端口，路径和参数
    proxy_pass https://$domain:9999/bcsapi/v1/consoleproxy/create_exec?$args;
}

# dockert从idc到devnet的worker的反向代理
location = /docker-console-resize {
    header_filter_by_lua_file 'conf/lua/cors_filter.lua';
    access_by_lua_file "conf/lua/auth/auth_web_console.lua";
    set_by_lua_block $domain {
        local targetIP = ngx.var.arg_targetIP
        return targetIP
    }

    proxy_set_header Cookie $http_cookie;

    # 后端验证使用。
    proxy_set_header X-AUTH-TOKEN "1173d88ac957e2097a7f86278102d959";

    proxy_ssl_certificate cert/console_proxy_client.crt;
    proxy_ssl_certificate_key cert/console_proxy_client.key;

    # 设置proxy header的变量
    include proxy.set.header.common.conf;

    # 反向代理到目标ip，端口，路径和参数
    proxy_pass https://$domain:9999/bcsapi/v1/consoleproxy/resize_exec?$args;
}

# webide proxy
location ~ /webide/([\w_-]+)/([\d\.]+)/(.*) {

    set $userName $1;
    set $ip $2;
    set $path $3;

    proxy_set_header X-DEVOPS-UID $userName;
    # websocket
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "Upgrade";
    proxy_http_version 1.1;
    # 反向代理到目标ip，端口，路径和参数
    proxy_pass http://$ip:58998/$path?$args;
}

# prebuild update proxy
location ~ ^/prebuild-update-backend/(.*) {
    set $access_type 'user';
    set $service "prebuild-update-backend";
    set $path $1;
    set_by_lua_block $domain {
        return config.prebuild.domain
    }
    set_by_lua_block $target {
        return config.prebuild.domain .. ":" ..config.prebuild.port
    }
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $domain;

    proxy_http_version 1.1;
    proxy_pass http://$target/$path?$args;
}
