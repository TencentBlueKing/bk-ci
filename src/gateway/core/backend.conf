# 构建机层服务分发
location ~ /(ms/|)([\w-_]+)/api/build/(.*) {
    auth_request /auth/build;
    auth_request_set $error_return $sent_http_x_devops_error_return;
    # 设置auth的变量
    include auth.request.set.build.conf;
    set $access_type 'build';
    set $service $2;
    set $path $3;
    set $target '';
    access_by_lua_file 'conf/lua/router_srv.lua';
    # 设置proxy header的变量
    include proxy.set.header.build.conf;
    proxy_set_header X-DEVOPS-SERVICE-NAME $service;
    # 反向代理到目标ip，端口，路径和参数
    proxy_pass http://$target/api/build/$path?$args;
}
# dockerhost层服务分发
location ~ /(ms/|)([\w-_]+)/api/dockerhost/(.*) {
    set $access_type 'build';
    set $service $2;
    set $path $3;
    set $target '';
    access_by_lua_file 'conf/lua/router_srv.lua';
    # 设置proxy header的变量
    include proxy.set.header.common.conf;
    proxy_set_header X-DEVOPS-SERVICE-NAME $service;
    # 反向代理到目标ip，端口，路径和参数
    proxy_pass http://$target/api/dockerhost/$path?$args;
}
# 第三方构建机agent
location ~ /(ms/|)([\w-_]+)/api/buildAgent/(.*) {
    set $access_type 'build';
    set $service $2;
    set $path $3;
    set $target '';
    access_by_lua_file 'conf/lua/router_srv.lua';
    # 设置proxy header的变量
    include proxy.set.header.common.conf;
    proxy_set_header X-DEVOPS-SERVICE-NAME $service;
    proxy_pass http://$target/api/buildAgent/$path?$args;
}
# OP层服务分发
location ~ /(ms/|)([\w-_]+)/api/op/(.*) {
    header_filter_by_lua_file 'conf/lua/cors_filter.lua';
    auth_request /auth/op;
    # 设置auth的变量
    include auth.request.set.user.conf;
    set $access_type 'op';
    set $service $2;
    set $path $3;
    set $target '';
    access_by_lua_file 'conf/lua/router_srv.lua';
    # 设置proxy header的变量
    include proxy.set.header.user.conf;
    proxy_set_header X-DEVOPS-SERVICE-NAME $service;
    # 反向代理到目标ip，端口，路径和参数
    proxy_pass http://$target/api/op/$path?$args;
}
# user层服务分发
location ~ /(ms/|)([\w-_]+)/api/user/(.*) {
    header_filter_by_lua_file 'conf/lua/cors_filter.lua';
    auth_request /auth/user;
    auth_request_set $error_return $sent_http_x_devops_error_return;
    auth_request_set $error_status $sent_http_x_devops_error_status;
    # 设置auth的变量
    include auth.request.set.user.conf;
    set $access_type 'user';
    set $service $2;
    set $path $3;
    set $target '';
    access_by_lua_file 'conf/lua/router_srv.lua';
    # 设置proxy header的变量
    include proxy.set.header.user.conf;
    proxy_set_header X-DEVOPS-SERVICE-NAME $service;
    # 反向代理到目标ip，端口，路径和参数
    proxy_pass http://$target/api/user/$path?$args;
}
# 手机app层服务分发
location ~ /(ms/|)([\w-_]+)/api/app/(.*) {
    auth_request /auth/app;
    auth_request_set $uid $sent_http_x_devops_uid;
    auth_request_set $organization $sent_http_x_devops_organization_name;
    set $access_type 'app';
    set $service $2;
    set $path $3;
    set $target '';
    access_by_lua_file 'conf/lua/router_srv.lua';
    proxy_set_header X-DEVOPS-UID $uid;
    proxy_set_header X-DEVOPS-ORGANIZATION-NAME $organization;
    # 设置proxy header的变量
    include proxy.set.header.common.conf;
    proxy_set_header X-DEVOPS-SERVICE-NAME $service;
    # 强制根据响应头的Content-Type
    more_set_headers "X-Content-Type-Options:nosniff";
    # 反向代理到目标ip，端口，路径和参数
    proxy_pass http://$target/api/app/$path?$args;
}
# api-html/user层服务分发
location ~ /(ms/|)([\w-_]+)/api-html/user/(.*) {
    #将错误统一处理成html格式返回
    proxy_intercept_errors on;
    include error/error.html.conf;
    header_filter_by_lua_file 'conf/lua/cors_filter.lua';
    auth_request /auth/user;
    # 设置auth的变量
    include auth.request.set.user.conf;
    set $access_type 'user';
    set $service $2;
    set $path $3;
    set $target '';
    access_by_lua_file 'conf/lua/router_srv.lua';
    # 设置proxy header的变量
    include proxy.set.header.user.conf;
    proxy_set_header X-DEVOPS-SERVICE-NAME $service;
    # 反向代理到目标ip，端口，路径和参数
    proxy_pass http://$target/api/user/$path?$args;
}
# service层服务分发
location ~ /(ms/|)([\w-_]+)/api/service/(.*) {
    auth_request /auth/service;
    # 设置auth的变量
    include auth.request.set.service.conf;
    set $access_type 'service';
    set $service $2;
    set $path $3;
    set $target '';
    set $devops_token '';
    proxy_set_header X-DEVOPS-TOKEN $devops_token;
    access_by_lua_file 'conf/lua/router_srv.lua';
    # 设置proxy header的变量
    include proxy.set.header.service.conf;
    proxy_set_header X-DEVOPS-SERVICE-NAME $service;
    # 反向代理到目标ip，端口，路径和参数
    proxy_pass http://$target/api/service/$path?$args;
}
# 外部层服务分发
location ~ /(ms/|)([\w-_]+)/api/(external|open|remotedev)/(.*) {
    header_filter_by_lua_file 'conf/lua/cors_filter.lua';
    set $access_type $3;
    set $service $2;
    set $path $4;
    set $target '';
    access_by_lua_file 'conf/lua/router_srv.lua';
    # 设置proxy header的变量
    include proxy.set.header.common.conf;
    proxy_set_header X-DEVOPS-SERVICE-NAME $service;
    # 强制根据响应头的Content-Type
    more_set_headers "X-Content-Type-Options:nosniff";
    proxy_set_header X-DEVOPS-REAL-IP $realip;
    # 反向代理到目标ip，端口，路径和参数
    proxy_pass http://$target/api/$access_type/$path?$args;
}
# apigw层服务分发
location ~ /(ms/|)([\w-_]+)/api/(apigw|apigw-user|apigw-app)/(.*) {
    header_filter_by_lua_file 'conf/lua/cors_filter_apigw.lua';
    set $access_type $3;
    set $service $2;
    set $path $4;
    set $target '';
    access_by_lua_file 'conf/lua/router_srv.lua';
    # 设置proxy header的变量
    include proxy.set.header.common.conf;
    proxy_set_header X-DEVOPS-SERVICE-NAME $service;
    # 反向代理到目标ip，端口，路径和参数
    proxy_pass http://$target/api/$access_type/$path?$args;
}
# user层服务的ws分发
location ~ /(ms/|)([\w-_]+)/(websocket|ws)/user/(.*) {
    header_filter_by_lua_file 'conf/lua/cors_filter.lua';
    auth_request /auth/user;
    # 设置auth的变量
    include auth.request.set.user.conf;
    set $access_type 'user';
    set $service $2;
    set $source $3;
    set $path $4;
    set $target '';
    access_by_lua_file 'conf/lua/router_srv.lua';
    # 设置proxy header的变量
    include proxy.set.header.user.conf;
    proxy_set_header X-DEVOPS-SERVICE-NAME $service;
    # websocket
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "Upgrade";
    # 反向代理到目标ip，端口，路径和参数
    proxy_pass http://$target/$source/user/$path?$args;
}
