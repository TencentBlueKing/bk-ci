"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkdevops_quality"] = globalThis["webpackChunkdevops_quality"] || []).push([[121],{

/***/ 7716:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   eA: () => (/* binding */ getQueryString),\n/* harmony export */   t: () => (/* binding */ convertTime)\n/* harmony export */ });\n/* unused harmony exports isVNode, isInArray, isInlineElment, getActualTop, getActualLeft, addClass, removeClass, localizeConfig, findValByKeyValue, deepClone, converStrToNum, converStrToArr, convertStrToNumArr, convertFileSize, isObject, mergeModules, getOuterHeight, getOuterWidth, getInnerWidth, deepCopy, hashID, getServiceLogoByPath, getAtomPath, getIconByType */\n/* harmony import */ var core_js_modules_es_regexp_constructor_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7309);\n/* harmony import */ var core_js_modules_es_regexp_constructor_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_constructor_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3188);\n/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9297);\n/* harmony import */ var core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\nfunction isVNode(node) {\n  return typeof node === 'object' && Object.prototype.hasOwnProperty.call(node, 'componentOptions');\n}\nfunction isInArray(ele, array) {\n  for (const item of array) {\n    if (item === ele) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction isInlineElment(node) {\n  const inlineElements = ['a', 'abbr', 'acronym', 'b', 'bdo', 'big', 'br', 'cite', 'code', 'dfn', 'em', 'font', 'i', 'img', 'input', 'kbd', 'label', 'q', 's', 'samp', 'select', 'small', 'span', 'strike', 'strong', 'sub', 'sup', 'textarea', 'tt', 'u', 'var'];\n  const tag = node.tagName.toLowerCase();\n  const display = getComputedStyle(node).display;\n  if (isInArray(tag, inlineElements) && display === 'index' || display === 'inline') {\n    console.warn('Binding node is displayed as inline element. To avoid some unexpected rendering error, please set binding node displayed as block element.');\n    return true;\n  }\n  return false;\n}\n\n/**\r\n *  获取元素相对于页面的高度\r\n *  @param node {NodeElement} 指定的DOM元素\r\n */\nfunction getActualTop(node) {\n  let actualTop = node.offsetTop;\n  let current = node.offsetParent;\n  while (current !== null) {\n    actualTop += current.offsetTop;\n    current = current.offsetParent;\n  }\n  return actualTop;\n}\n\n/**\r\n *  获取元素相对于页面左侧的宽度\r\n *  @param node {NodeElement} 指定的DOM元素\r\n */\nfunction getActualLeft(node) {\n  let actualLeft = node.offsetLeft;\n  let current = node.offsetParent;\n  while (current !== null) {\n    actualLeft += current.offsetLeft;\n    current = current.offsetParent;\n  }\n  return actualLeft;\n}\n\n/**\r\n *  对元素添加样式类\r\n *  @param node {NodeElement} 指定的DOM元素\r\n *  @param className {String} 类名\r\n */\nfunction addClass(node, className) {\n  const classNames = className.split(' ');\n  if (node.nodeType === 1) {\n    if (!node.className && classNames.length === 1) {\n      node.className = className;\n    } else {\n      let setClass = ' ' + node.className + ' ';\n      classNames.forEach(cl => {\n        if (setClass.indexOf(' ' + cl + ' ') < 0) {\n          setClass += cl + ' ';\n        }\n      });\n      const rtrim = /^\\s+|\\s+$/;\n      node.className = setClass.replace(rtrim, '');\n    }\n  }\n}\n\n/**\r\n *  对元素删除样式类\r\n *  @param node {NodeElement} 指定的DOM元素\r\n *  @param className {String} 类名\r\n */\nfunction removeClass(node, className) {\n  const classNames = className.split(' ');\n  if (node.nodeType === 1) {\n    let setClass = ' ' + node.className + ' ';\n    classNames.forEach(cl => {\n      setClass = setClass.replace(' ' + cl + ' ', ' ');\n    });\n    const rtrim = /^\\s+|\\s+$/;\n    node.className = setClass.replace(rtrim, '');\n  }\n}\n\n/**\r\n *  将传入的配置项转成本地的对象\r\n *  @param config {Object} 传入的对象\r\n *  @return obj {Object} 本地化之后的对象\r\n */\nfunction localizeConfig(config) {\n  const obj = {};\n  for (const key in config) {\n    obj[key] = config[key];\n  }\n  return obj;\n}\n\n/**\r\n *  在一个元素为对象的数组中，根据oldKey: oldValue找到指定的数组元素，并返回该数组元素中指定key的value\r\n *  @param arr - 元素为对象的数组\r\n *  @param oldKey - 查找的key\r\n *  @param oldValue - 查找的value\r\n *  @param key - 需要返回的value的指定的key\r\n *  @return result - 找到的value值，未找到返回undefined\r\n */\nfunction findValByKeyValue(arr, oldKey, oldValue, key) {\n  let result;\n  for (const obj of arr) {\n    for (const _key in obj) {\n      if (_key === oldKey && obj[_key] === oldValue) {\n        result = obj[key];\n        break;\n      }\n    }\n  }\n  return result;\n}\nfunction deepClone(obj) {\n  const _obj = {};\n  for (const key in obj) {\n    if (obj[key].toString().toLowerCase() === '[object object]') {\n      _obj[key] = deepClone(obj[key]);\n    } else {\n      _obj[key] = key === 'text' ? '' : obj[key];\n    }\n  }\n  return _obj;\n}\n\n/**\r\n *  将字符串去掉指定内容之后转成数字\r\n *  @param {String} str - 需要转换的字符串\r\n *  @param {String} indicator - 需要被去掉的内容\r\n */\nfunction converStrToNum(str, indicator) {\n  const reg = new RegExp(indicator, 'g');\n  const $str = str.replace(reg, '');\n  return ~~$str;\n}\n\n/**\r\n *  将字符串根据indicator转成数组\r\n */\nfunction converStrToArr(str, indicator) {\n  return str.length ? str.split(indicator) : [];\n}\n\n/**\r\n * 将字符串根据indicator转成数组并将内容都转成Number类型（仅限数组内容均为数字的字符串）\r\n */\nfunction convertStrToNumArr(str, indicator) {\n  return converStrToArr(str, indicator).map(item => {\n    return ~~item;\n  });\n}\nfunction prezero(num) {\n  num = Number(num);\n  if (num < 10) {\n    return '0' + num;\n  }\n  return num;\n}\nfunction convertTime(ms) {\n  if (!ms) {\n    return '--';\n  }\n  const time = new Date(ms);\n  return `${time.getFullYear()}-${prezero(time.getMonth() + 1)}-${prezero(time.getDate())} ${prezero(time.getHours())}:${prezero(time.getMinutes())}:${prezero(time.getSeconds())}`;\n}\n\n/**\r\n *  转换文件大小\r\n */\nfunction convertFileSize(size, unit) {\n  const arr = ['B', 'KB', 'MB', 'GB', 'TB'];\n  const calcSize = size / 1024;\n  let index;\n  arr.some((item, _index) => {\n    if (unit === item) {\n      index = _index;\n      return true;\n    }\n    return false;\n  });\n  const next = arr[index + 1];\n  if (calcSize > 1024) {\n    if (!next) {\n      return `${calcSize.toFixed(2)}${unit}`;\n    } else {\n      return convertFileSize(calcSize, next);\n    }\n  } else {\n    return `${calcSize.toFixed(2)}${next || unit}`;\n  }\n}\nfunction isObject(o) {\n  return o !== null && typeof o === 'object' && !Array.isArray(o);\n}\nfunction mergeModules(target) {\n  for (var _len = arguments.length, modules = new Array(_len > 1 ? _len - 1 : 0), _key2 = 1; _key2 < _len; _key2++) {\n    modules[_key2 - 1] = arguments[_key2];\n  }\n  return modules.reduce((merged, mod) => {\n    Object.keys(mod).forEach(key => {\n      if (isObject(merged[key]) && isObject(mod[key])) {\n        merged[key] = {\n          ...merged[key],\n          ...mod[key]\n        };\n      }\n    });\n    return merged;\n  }, target);\n}\n\n/**\r\n * @param {String} selector\r\n * @param {DOM element} parent\r\n */\nconst getOuterHeight = (selector, parent) => {\n  const {\n    marginTop,\n    height,\n    marginBottom\n  } = getDOMRect(selector, parent);\n  return parseFloat(marginTop) + parseFloat(height) + parseFloat(marginBottom);\n};\n\n/**\r\n * @param {String} selector\r\n * @param {DOM element} parent\r\n */\nconst getOuterWidth = (selector, parent) => {\n  const {\n    marginLeft,\n    width,\n    marginRight\n  } = getDOMRect(selector, parent);\n  return parseFloat(marginLeft) + parseFloat(width) + parseFloat(marginRight);\n};\n\n/**\r\n * @param {String} selector\r\n * @param {DOM element} parent\r\n */\nconst getInnerWidth = (selector, parent) => {\n  const {\n    width\n  } = getDOMRect(selector, parent);\n  return parseFloat(width);\n};\nconst getDOMRect = (selector, parent) => {\n  const target = isDOMElement(selector) ? selector : parent ? parent.querySelector(selector) : document.querySelector(selector);\n  if (!target) {\n    return {};\n  }\n  const style = window.getComputedStyle(target);\n  return {\n    width: style.width,\n    height: style.height,\n    marginTop: style.marginTop,\n    marginBottom: style.marginBottom,\n    marginLeft: style.marginLeft,\n    marginRight: style.marginRight\n  };\n};\nconst isDOMElement = obj => {\n  return typeof HTMLElement === 'object' ? obj instanceof HTMLElement : obj && typeof obj === 'object' && obj !== null && obj.nodeType === 1 && typeof obj.nodeName === 'string';\n};\nconst deepCopy = obj => {\n  return JSON.parse(JSON.stringify(obj));\n};\nconst hashID = function () {\n  let length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 8;\n  let pos = 0;\n  let result = '';\n  while (pos < length) {\n    const n = Math.round(Math.random() * 126) + 33;\n    result += String.fromCharCode(n);\n    pos++;\n  }\n  return result;\n};\nfunction getServiceLogoByPath(link) {\n  return link.replace(/\\/?(devops\\/)?(\\w+)\\S*$/, '$2');\n}\nfunction getAtomPath() {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key3 = 0; _key3 < _len2; _key3++) {\n    args[_key3] = arguments[_key3];\n  }\n  return args.join('-');\n}\n\n/**\r\n *  获取url参数值\r\n */\nfunction getQueryString(name) {\n  const reg = new RegExp('(^|&)' + name + '=([^&]*)(&|$)', 'i');\n  const r = window.location.search.substr(1).match(reg);\n  if (r != null) return unescape(r[2]);\n  return null;\n}\nconst ICON_MAP = {\n  manualTrigger: 'manual',\n  timerTrigger: 'timer',\n  codeGitWebHookTrigger: 'git',\n  codeSVNWebHookTrigger: 'svn',\n  codeGitlabWebHookTrigger: 'gitlab',\n  CODE_GIT: 'git',\n  CODE_SVN: 'svn',\n  CODE_GITLAB: 'gitlab',\n  linuxScript: 'script',\n  powerScript: 'script',\n  linuxPaasCodeCCScript: 'script',\n  xcodeBuild: 'xcode',\n  unity3dBuild: 'unity',\n  deployDistribution: 'deploy',\n  fileArchive: 'archive',\n  ipaFileArchive: 'ipa',\n  sendRTXNotify: 'wework',\n  sendEmailNotify: 'email',\n  sendSmsNotify: 'sms',\n  sendWechatNotify: 'weixin',\n  gcloud: 'deploy',\n  jobExecuteTaskExt: 'deploy',\n  metaFileScan: 'order',\n  unity3dScan: 'order',\n  sensitiveScan: 'order'\n};\nfunction getIconByType(type) {\n  return ICON_MAP[type] || 'order';\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7716\n");

/***/ }),

/***/ 5404:
/***/ ((module, __unused_webpack___webpack_exports__, __webpack_require__) => {

eval("// extracted by mini-css-extract-plugin\n\n    if(true) {\n      // 1713937561675\n      var cssReload = __webpack_require__(4736)(module.id, {\"locals\":false});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);\n    }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTQwNC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXZvcHMtcXVhbGl0eS8uL3NyYy92aWV3cy9pbnRlcmNlcHRfaGlzdG9yeS52dWU/OTI4YyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTtcbiAgICBpZihtb2R1bGUuaG90KSB7XG4gICAgICAvLyAxNzEzOTM3NTYxNjc1XG4gICAgICB2YXIgY3NzUmVsb2FkID0gcmVxdWlyZShcIkU6L2JrLWNpL3NyYy9mcm9udGVuZC9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9obXIvaG90TW9kdWxlUmVwbGFjZW1lbnQuanNcIikobW9kdWxlLmlkLCB7XCJsb2NhbHNcIjpmYWxzZX0pO1xuICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGNzc1JlbG9hZCk7XG4gICAgICBtb2R1bGUuaG90LmFjY2VwdCh1bmRlZmluZWQsIGNzc1JlbG9hZCk7XG4gICAgfVxuICAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5404\n");

/***/ }),

/***/ 4939:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": () => (/* binding */ intercept_history)\n});\n\n;// CONCATENATED MODULE: ../node_modules/babel-loader/lib/index.js!../node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[3]!../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/views/intercept_history.vue?vue&type=template&id=0cc048ce\nvar render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c(\"div\", {\n    staticClass: \"intercept-history-wrapper\"\n  }, [_c(\"div\", {\n    staticClass: \"inner-header\"\n  }, [_c(\"div\", {\n    staticClass: \"title\"\n  }, [_vm._v(_vm._s(_vm.$t(\"quality.红线记录\")))])]), _vm._v(\" \"), _c(\"section\", {\n    directives: [{\n      name: \"bkloading\",\n      rawName: \"v-bkloading\",\n      value: {\n        isLoading: _vm.loading.isLoading,\n        title: _vm.loading.title\n      },\n      expression: \"{\\n            isLoading: loading.isLoading,\\n            title: loading.title\\n        }\"\n    }],\n    staticClass: \"sub-view-port\"\n  }, [_vm.showContent ? _c(\"div\", {\n    staticClass: \"intercept-history-content\"\n  }, [_c(\"div\", {\n    staticClass: \"data-list-query\"\n  }, [_c(\"div\", {\n    staticClass: \"search-item\"\n  }, [_c(\"div\", {\n    staticClass: \"search-title\"\n  }, [_vm._v(_vm._s(_vm.$t(\"quality.状态：\")))]), _vm._v(\" \"), _c(\"bk-select\", {\n    model: {\n      value: _vm.searchInfo.interceptResult,\n      callback: function ($$v) {\n        _vm.$set(_vm.searchInfo, \"interceptResult\", $$v);\n      },\n      expression: \"searchInfo.interceptResult\"\n    }\n  }, _vm._l(_vm.statusList, function (option, index) {\n    return _c(\"bk-option\", {\n      key: index,\n      attrs: {\n        id: option.value,\n        name: option.label\n      }\n    });\n  }), 1)], 1), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"search-item search-by-pipeline\"\n  }, [_c(\"div\", {\n    staticClass: \"search-title\"\n  }, [_vm._v(_vm._s(_vm.$t(\"quality.流水线：\")))]), _vm._v(\" \"), _c(\"bk-select\", {\n    attrs: {\n      searchable: true\n    },\n    model: {\n      value: _vm.searchInfo.pipelineId,\n      callback: function ($$v) {\n        _vm.$set(_vm.searchInfo, \"pipelineId\", $$v);\n      },\n      expression: \"searchInfo.pipelineId\"\n    }\n  }, _vm._l(_vm.pipelineList, function (option, index) {\n    return _c(\"bk-option\", {\n      key: index,\n      attrs: {\n        id: option.pipelineId,\n        name: option.pipelineName\n      }\n    });\n  }), 1)], 1), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"search-item search-by-rule\"\n  }, [_c(\"div\", {\n    staticClass: \"search-title\"\n  }, [_vm._v(_vm._s(_vm.$t(\"quality.规则：\")))]), _vm._v(\" \"), _c(\"bk-select\", {\n    attrs: {\n      searchable: true\n    },\n    model: {\n      value: _vm.searchInfo.ruleHashId,\n      callback: function ($$v) {\n        _vm.$set(_vm.searchInfo, \"ruleHashId\", $$v);\n      },\n      expression: \"searchInfo.ruleHashId\"\n    }\n  }, _vm._l(_vm.ruleList, function (option, index) {\n    return _c(\"bk-option\", {\n      key: index,\n      attrs: {\n        id: option.ruleHashId,\n        name: option.name\n      }\n    });\n  }), 1)], 1), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"search-item search-by-date\"\n  }, [_c(\"div\", {\n    staticClass: \"search-title\"\n  }, [_vm._v(_vm._s(_vm.$t(\"quality.时间：\")))]), _vm._v(\" \"), _c(\"bk-date-picker\", {\n    attrs: {\n      placement: \"bottom-end\",\n      placeholder: _vm.$t(\"quality.起止时间\"),\n      type: \"daterange\"\n    },\n    on: {\n      change: _vm.changeDate\n    }\n  })], 1), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"search-button\"\n  }, [_c(\"bk-button\", {\n    attrs: {\n      theme: \"primary\"\n    },\n    on: {\n      click: _vm.query\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"quality.查询\")))])], 1)]), _vm._v(\" \"), _vm.showContent ? _c(\"div\", {\n    staticClass: \"intercept-table-wrapper\"\n  }, [_c(\"bk-table\", {\n    staticClass: \"intercept-history-table\",\n    attrs: {\n      size: \"small\",\n      data: _vm.interceptList,\n      \"empty-text\": _vm.$t(\"quality.暂时没有拦截记录\"),\n      pagination: _vm.pagination\n    },\n    on: {\n      \"page-change\": _vm.handlePageChange,\n      \"page-limit-change\": _vm.limitChange\n    }\n  }, [_c(\"bk-table-column\", {\n    attrs: {\n      label: _vm.$t(\"quality.序号\"),\n      prop: \"num\",\n      width: \"80\"\n    },\n    scopedSlots: _vm._u([{\n      key: \"default\",\n      fn: function (props) {\n        return [_c(\"span\", [_vm._v(_vm._s(props.row.num))])];\n      }\n    }], null, false, 2545994480)\n  }), _vm._v(\" \"), _c(\"bk-table-column\", {\n    attrs: {\n      label: _vm.$t(\"quality.关联流水线\"),\n      prop: \"pipelineName\"\n    },\n    scopedSlots: _vm._u([{\n      key: \"default\",\n      fn: function (props) {\n        return [props.row.pipelineIsDelete ? _c(\"span\", {\n          staticClass: \"disabled-pipeline\",\n          attrs: {\n            title: props.row.pipelineName\n          }\n        }, [_vm._v(_vm._s(props.row.pipelineName))]) : _c(\"a\", {\n          staticClass: \"item-pipelinename\",\n          attrs: {\n            title: props.row.pipelineName,\n            target: \"_blank\",\n            href: `/console/pipeline/${_vm.projectId}/${props.row.pipelineId}/detail/${props.row.buildId}`\n          }\n        }, [_vm._v(_vm._s(props.row.pipelineName) + \"\\n                            \")])];\n      }\n    }], null, false, 4134072540)\n  }), _vm._v(\" \"), _c(\"bk-table-column\", {\n    attrs: {\n      label: _vm.$t(\"quality.规则名称\"),\n      prop: \"ruleName\",\n      width: \"150\"\n    },\n    scopedSlots: _vm._u([{\n      key: \"default\",\n      fn: function (props) {\n        return [_c(\"span\", [_vm._v(_vm._s(props.row.ruleName))])];\n      }\n    }], null, false, 943140911)\n  }), _vm._v(\" \"), _c(\"bk-table-column\", {\n    attrs: {\n      label: _vm.$t(\"状态\"),\n      prop: \"interceptResult\",\n      width: \"150\"\n    },\n    scopedSlots: _vm._u([{\n      key: \"default\",\n      fn: function (props) {\n        return [props.row.interceptResult === \"PASS\" ? _c(\"span\", {\n          staticStyle: {\n            color: \"#30D878\"\n          }\n        }, [_vm._v(_vm._s(_vm.$t(\"quality.已通过\")))]) : _vm._e(), _vm._v(\" \"), props.row.interceptResult === \"FAIL\" ? _c(\"span\", [_vm._v(_vm._s(_vm.$t(\"quality.拦截后直接终止\")))]) : _vm._e(), _vm._v(\" \"), props.row.interceptResult === \"WAIT\" ? _c(\"span\", [_vm._v(_vm._s(_vm.$t(\"quality.拦截后审核中\")))]) : _vm._e(), _vm._v(\" \"), props.row.interceptResult === \"INTERCEPT\" ? _c(\"span\", [_vm._v(_vm._s(_vm.$t(\"quality.拦截后审核终止\")))]) : _vm._e(), _vm._v(\" \"), props.row.interceptResult === \"INTERCEPT_PASS\" ? _c(\"span\", [_vm._v(_vm._s(_vm.$t(\"quality.拦截后审核继续\")))]) : _vm._e(), _vm._v(\" \"), props.row.interceptResult === \"INTERCEPT_TIMEOUT\" ? _c(\"span\", [_vm._v(_vm._s(_vm.$t(\"quality.拦截后超时终止\")))]) : _vm._e()];\n      }\n    }], null, false, 211687606)\n  }), _vm._v(\" \"), _c(\"bk-table-column\", {\n    attrs: {\n      label: _vm.$t(\"实际审核人\"),\n      prop: \"qualityRuleBuildHisOpt\",\n      width: \"100\"\n    },\n    scopedSlots: _vm._u([{\n      key: \"default\",\n      fn: function (props) {\n        return [props.row.qualityRuleBuildHisOpt ? _c(\"span\", [_vm._v(_vm._s(props.row.qualityRuleBuildHisOpt.gateOptUser))]) : _c(\"span\", [_vm._v(\"--\")])];\n      }\n    }], null, false, 3705316598)\n  }), _vm._v(\" \"), _c(\"bk-table-column\", {\n    attrs: {\n      label: _vm.$t(\"quality.内容\"),\n      prop: \"remark\",\n      \"min-width\": \"200\"\n    },\n    scopedSlots: _vm._u([{\n      key: \"default\",\n      fn: function (props) {\n        return [_c(\"bk-popover\", {\n          attrs: {\n            placement: \"top-start\",\n            delay: 500\n          }\n        }, [_c(\"p\", {\n          staticClass: \"item-remark\"\n        }, [_vm._v(_vm._s(props.row.remark))]), _vm._v(\" \"), _c(\"template\", {\n          slot: \"content\"\n        }, [_c(\"p\", {\n          staticStyle: {\n            \"max-width\": \"300px\",\n            \"text-align\": \"left\",\n            \"white-space\": \"normal\",\n            \"word-break\": \"break-all\",\n            \"font-weight\": \"400\"\n          }\n        }, [_vm._v(_vm._s(props.row.remark))])])], 2)];\n      }\n    }], null, false, 1138338322)\n  }), _vm._v(\" \"), _c(\"bk-table-column\", {\n    attrs: {\n      label: _vm.$t(\"quality.拦截时间\"),\n      prop: \"timestamp\"\n    },\n    scopedSlots: _vm._u([{\n      key: \"default\",\n      fn: function (props) {\n        return [_vm._v(\"\\n                            \" + _vm._s(_vm.localConvertTime(props.row.timestamp)) + \"\\n                        \")];\n      }\n    }], null, false, 3241248541)\n  })], 1)], 1) : _vm._e()]) : _vm._e()])]);\n};\nvar staticRenderFns = [];\nrender._withStripped = true;\n\n;// CONCATENATED MODULE: ./src/views/intercept_history.vue?vue&type=template&id=0cc048ce\n\n// EXTERNAL MODULE: ./src/utils/util.js\nvar util = __webpack_require__(7716);\n;// CONCATENATED MODULE: ../node_modules/babel-loader/lib/index.js!../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/views/intercept_history.vue?vue&type=script&lang=js\n\n/* harmony default export */ const intercept_historyvue_type_script_lang_js = ({\n  data() {\n    return {\n      showContent: false,\n      statusList: [{\n        label: this.$t('quality.全部'),\n        value: 'ALL'\n      }, {\n        label: this.$t('quality.已通过'),\n        value: 'PASS'\n      }, {\n        label: this.$t('quality.拦截后直接终止'),\n        value: 'FAIL'\n      }, {\n        label: this.$t('quality.拦截后审核中'),\n        value: 'WAIT'\n      }, {\n        label: this.$t('quality.拦截后审核终止'),\n        value: 'INTERCEPT'\n      }, {\n        label: this.$t('quality.拦截后审核继续'),\n        value: 'INTERCEPT_PASS'\n      }, {\n        label: this.$t('quality.拦截后超时终止'),\n        value: 'INTERCEPT_TIMEOUT'\n      }],\n      pipelineList: [],\n      ruleList: [],\n      interceptList: [],\n      loading: {\n        isLoading: false,\n        title: ''\n      },\n      searchInfo: {\n        interceptResult: '',\n        pipelineId: '',\n        ruleHashId: '',\n        startTime: '',\n        endTime: ''\n      },\n      pagination: {\n        current: 1,\n        count: 0,\n        limit: 10\n      }\n    };\n  },\n  computed: {\n    projectId() {\n      return this.$route.params.projectId;\n    }\n  },\n  watch: {\n    projectId() {\n      this.$router.push({\n        name: 'qualityOverview',\n        params: {\n          projectId: this.projectId\n        }\n      });\n    }\n  },\n  created() {\n    this.initData();\n  },\n  async mounted() {\n    await this.init();\n  },\n  methods: {\n    async init() {\n      const {\n        loading,\n        pagination\n      } = this;\n      loading.isLoading = true;\n      loading.title = this.$t('quality.数据加载中，请稍候');\n      try {\n        await this.requestList(pagination.current, pagination.limit);\n      } catch (err) {\n        this.$bkMessage({\n          message: err.message ? err.message : err,\n          theme: 'error'\n        });\n      } finally {\n        setTimeout(() => {\n          this.loading.isLoading = false;\n          this.showContent = true;\n        }, 100);\n      }\n    },\n    async query() {\n      this.pagination.current = 1;\n      this.loading.isLoading = true;\n      await this.requestList(this.pagination.current, this.pagination.limit);\n      setTimeout(() => {\n        this.loading.isLoading = false;\n      }, 100);\n    },\n    async requestList(page, pageSize) {\n      const params = this.getParams();\n      try {\n        const res = await this.$store.dispatch('quality/requestInterceptList', {\n          projectId: this.projectId,\n          page,\n          pageSize,\n          params\n        });\n        this.interceptList.splice(0, this.interceptList.length);\n        if (res.records) {\n          res.records.forEach(item => {\n            this.interceptList.push(item);\n          });\n          this.pagination.count = res.count;\n        }\n      } catch (err) {\n        const message = err.message ? err.message : err;\n        const theme = 'error';\n        this.$bkMessage({\n          message,\n          theme\n        });\n      }\n    },\n    async initData() {\n      if (this.$route.hash === '#INTERCEPT') {\n        this.searchInfo.interceptResult = 'FAIL';\n      }\n      await this.requestPipelineList();\n      await this.requestRuleList();\n    },\n    getParams() {\n      const params = {};\n      params.interceptResult = !this.searchInfo.interceptResult ? undefined : this.searchInfo.interceptResult === 'ALL' ? undefined : this.searchInfo.interceptResult;\n      params.ruleHashId = !this.searchInfo.ruleHashId ? undefined : this.searchInfo.ruleHashId === 'all' ? undefined : this.searchInfo.ruleHashId;\n      params.pipelineId = !this.searchInfo.pipelineId ? undefined : this.searchInfo.pipelineId === 'all' ? undefined : this.searchInfo.pipelineId;\n      params.startTime = this.searchInfo.startTime || undefined;\n      params.endTime = this.searchInfo.endTime || undefined;\n      return params;\n    },\n    async requestPipelineList() {\n      try {\n        const res = await this.$store.dispatch('quality/requestPipelineList', {\n          projectId: this.projectId\n        });\n        if (res) {\n          this.pipelineList.splice(0, this.pipelineList.length);\n          res.forEach(item => {\n            this.pipelineList.push(item);\n          });\n          this.pipelineList.unshift({\n            pipelineId: 'all',\n            pipelineName: this.$t('quality.全部')\n          });\n        }\n      } catch (err) {\n        const message = err.message ? err.message : err;\n        const theme = 'error';\n        this.$bkMessage({\n          message,\n          theme\n        });\n      }\n    },\n    async requestRuleList() {\n      try {\n        const res = await this.$store.dispatch('quality/requestRuleList', {\n          projectId: this.projectId,\n          page: 1,\n          pageSize: 10000\n        });\n        this.ruleList.splice(0, this.ruleList.length);\n        if (res.records) {\n          res.records.forEach(item => {\n            this.ruleList.push(item);\n          });\n          this.ruleList.unshift({\n            ruleHashId: 'all',\n            name: this.$t('quality.全部')\n          });\n        }\n      } catch (err) {\n        const message = err.message ? err.message : err;\n        const theme = 'error';\n        this.$bkMessage({\n          message,\n          theme\n        });\n      }\n    },\n    async handlePageChange(page) {\n      this.pagination.current = page;\n      this.loading.isLoading = true;\n      await this.requestList(this.pagination.current, this.pagination.limit);\n      this.loading.isLoading = false;\n    },\n    async limitChange(limit) {\n      this.pagination.limit = limit;\n      this.pagination.current = 1;\n      this.loading.isLoading = true;\n      await this.requestList(this.pagination.current, this.pagination.limit);\n      this.loading.isLoading = false;\n    },\n    changeDate(newValue) {\n      const start = newValue[0];\n      const end = newValue[1];\n      this.searchInfo.startTime = Date.parse(new Date(start)) / 1000;\n      this.searchInfo.endTime = Date.parse(new Date(end)) / 1000;\n    },\n    /**\r\n     * 处理时间格式\r\n     */\n    localConvertTime(timestamp) {\n      return (0,util/* convertTime */.t)(timestamp * 1000);\n    }\n  }\n});\n;// CONCATENATED MODULE: ./src/views/intercept_history.vue?vue&type=script&lang=js\n /* harmony default export */ const views_intercept_historyvue_type_script_lang_js = (intercept_historyvue_type_script_lang_js); \n// EXTERNAL MODULE: ../node_modules/mini-css-extract-plugin/dist/loader.js??clonedRuleSet-3.use[0]!./node_modules/css-loader/dist/cjs.js!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/sass-loader/dist/cjs.js!../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/views/intercept_history.vue?vue&type=style&index=0&id=0cc048ce&prod&lang=scss\nvar intercept_historyvue_type_style_index_0_id_0cc048ce_prod_lang_scss = __webpack_require__(5404);\n;// CONCATENATED MODULE: ./src/views/intercept_history.vue?vue&type=style&index=0&id=0cc048ce&prod&lang=scss\n\n// EXTERNAL MODULE: ../node_modules/vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(7658);\n;// CONCATENATED MODULE: ./src/views/intercept_history.vue\n\n\n\n;\n\n\n/* normalize component */\n\nvar component = (0,componentNormalizer/* default */.A)(\n  views_intercept_historyvue_type_script_lang_js,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ const intercept_history = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4939\n");

/***/ })

}]);