"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkdevops_quality"] = globalThis["webpackChunkdevops_quality"] || []).push([[709],{

/***/ 8386:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  beforeSiteImage: {\n    'zh-CN': __webpack_require__(9843),\n    'en-US': __webpack_require__(909)\n  },\n  afterSiteImage: {\n    'zh-CN': __webpack_require__(2650),\n    'en-US': __webpack_require__(4430)\n  },\n  indicatorImage: {\n    'zh-CN': __webpack_require__(4756),\n    'en-US': __webpack_require__(2540)\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODM4Ni5qcyIsIm1hcHBpbmdzIjoiOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGV2b3BzLXF1YWxpdHkvLi9zcmMvdXRpbHMvaTE4bkltYWdlcy5qcz8zNzAzIl0sInNvdXJjZXNDb250ZW50IjpbIlxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBiZWZvcmVTaXRlSW1hZ2U6IHtcclxuICAgICAgICAnemgtQ04nOiByZXF1aXJlKCdAL2ltYWdlcy9hZG1pc3Npb24tcHJldmlldy5wbmcnKSxcclxuICAgICAgICAnZW4tVVMnOiByZXF1aXJlKCdAL2ltYWdlcy9hZG1pc3Npb24tcHJldmlld19lbi5wbmcnKVxyXG4gICAgfSxcclxuICAgIGFmdGVyU2l0ZUltYWdlOiB7XHJcbiAgICAgICAgJ3poLUNOJzogcmVxdWlyZSgnQC9pbWFnZXMvcHJvbXB0LXByZXZpZXcucG5nJyksXHJcbiAgICAgICAgJ2VuLVVTJzogcmVxdWlyZSgnQC9pbWFnZXMvcHJvbXB0LXByZXZpZXdfZW4ucG5nJylcclxuICAgIH0sXHJcbiAgICBpbmRpY2F0b3JJbWFnZToge1xyXG4gICAgICAgICd6aC1DTic6IHJlcXVpcmUoJ0AvaW1hZ2VzL2luZGljYXRvci1kZXNjLnBuZycpLFxyXG4gICAgICAgICdlbi1VUyc6IHJlcXVpcmUoJ0AvaW1hZ2VzL2luZGljYXRvci1kZXNjX2VuLnBuZycpXHJcbiAgICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///8386\n");

/***/ }),

/***/ 4619:
/***/ ((module, __unused_webpack___webpack_exports__, __webpack_require__) => {

eval("// extracted by mini-css-extract-plugin\n\n    if(true) {\n      // 1713937558025\n      var cssReload = __webpack_require__(4736)(module.id, {\"locals\":false});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);\n    }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDYxOS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXZvcHMtcXVhbGl0eS8uL3NyYy9jb21wb25lbnRzL2Rldm9wcy9lbXB0eVRpcHMudnVlPzVlZDAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307XG4gICAgaWYobW9kdWxlLmhvdCkge1xuICAgICAgLy8gMTcxMzkzNzU1ODAyNVxuICAgICAgdmFyIGNzc1JlbG9hZCA9IHJlcXVpcmUoXCJFOi9iay1jaS9zcmMvZnJvbnRlbmQvbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvaG1yL2hvdE1vZHVsZVJlcGxhY2VtZW50LmpzXCIpKG1vZHVsZS5pZCwge1wibG9jYWxzXCI6ZmFsc2V9KTtcbiAgICAgIG1vZHVsZS5ob3QuZGlzcG9zZShjc3NSZWxvYWQpO1xuICAgICAgbW9kdWxlLmhvdC5hY2NlcHQodW5kZWZpbmVkLCBjc3NSZWxvYWQpO1xuICAgIH1cbiAgIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4619\n");

/***/ }),

/***/ 2621:
/***/ ((module, __unused_webpack___webpack_exports__, __webpack_require__) => {

eval("// extracted by mini-css-extract-plugin\n\n    if(true) {\n      // 1713937561599\n      var cssReload = __webpack_require__(4736)(module.id, {\"locals\":false});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);\n    }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjYyMS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXZvcHMtcXVhbGl0eS8uL3NyYy9jb21wb25lbnRzL2Rldm9wcy9tZXRhZGF0YS1wYW5lbC52dWU/ZWE5YSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTtcbiAgICBpZihtb2R1bGUuaG90KSB7XG4gICAgICAvLyAxNzEzOTM3NTYxNTk5XG4gICAgICB2YXIgY3NzUmVsb2FkID0gcmVxdWlyZShcIkU6L2JrLWNpL3NyYy9mcm9udGVuZC9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9obXIvaG90TW9kdWxlUmVwbGFjZW1lbnQuanNcIikobW9kdWxlLmlkLCB7XCJsb2NhbHNcIjpmYWxzZX0pO1xuICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGNzc1JlbG9hZCk7XG4gICAgICBtb2R1bGUuaG90LmFjY2VwdCh1bmRlZmluZWQsIGNzc1JlbG9hZCk7XG4gICAgfVxuICAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2621\n");

/***/ }),

/***/ 6758:
/***/ ((module, __unused_webpack___webpack_exports__, __webpack_require__) => {

eval("// extracted by mini-css-extract-plugin\n\n    if(true) {\n      // 1713937561584\n      var cssReload = __webpack_require__(4736)(module.id, {\"locals\":false});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);\n    }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjc1OC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXZvcHMtcXVhbGl0eS8uL3NyYy9jb21wb25lbnRzL2Rldm9wcy9waXBlbGluZS1saXN0LnZ1ZT8xNzU2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9O1xuICAgIGlmKG1vZHVsZS5ob3QpIHtcbiAgICAgIC8vIDE3MTM5Mzc1NjE1ODRcbiAgICAgIHZhciBjc3NSZWxvYWQgPSByZXF1aXJlKFwiRTovYmstY2kvc3JjL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2htci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qc1wiKShtb2R1bGUuaWQsIHtcImxvY2Fsc1wiOmZhbHNlfSk7XG4gICAgICBtb2R1bGUuaG90LmRpc3Bvc2UoY3NzUmVsb2FkKTtcbiAgICAgIG1vZHVsZS5ob3QuYWNjZXB0KHVuZGVmaW5lZCwgY3NzUmVsb2FkKTtcbiAgICB9XG4gICJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6758\n");

/***/ }),

/***/ 1756:
/***/ ((module, __unused_webpack___webpack_exports__, __webpack_require__) => {

eval("// extracted by mini-css-extract-plugin\n\n    if(true) {\n      // 1713937561592\n      var cssReload = __webpack_require__(4736)(module.id, {\"locals\":false});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);\n    }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTc1Ni5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXZvcHMtcXVhbGl0eS8uL3NyYy9jb21wb25lbnRzL2Rldm9wcy90ZW1wbGF0ZS1saXN0LnZ1ZT81NWU4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9O1xuICAgIGlmKG1vZHVsZS5ob3QpIHtcbiAgICAgIC8vIDE3MTM5Mzc1NjE1OTJcbiAgICAgIHZhciBjc3NSZWxvYWQgPSByZXF1aXJlKFwiRTovYmstY2kvc3JjL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2htci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qc1wiKShtb2R1bGUuaWQsIHtcImxvY2Fsc1wiOmZhbHNlfSk7XG4gICAgICBtb2R1bGUuaG90LmRpc3Bvc2UoY3NzUmVsb2FkKTtcbiAgICAgIG1vZHVsZS5ob3QuYWNjZXB0KHVuZGVmaW5lZCwgY3NzUmVsb2FkKTtcbiAgICB9XG4gICJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1756\n");

/***/ }),

/***/ 6559:
/***/ ((module, __unused_webpack___webpack_exports__, __webpack_require__) => {

eval("// extracted by mini-css-extract-plugin\n\n    if(true) {\n      // 1713937561744\n      var cssReload = __webpack_require__(4736)(module.id, {\"locals\":false});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);\n    }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjU1OS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXZvcHMtcXVhbGl0eS8uL3NyYy92aWV3cy9jcmVhdGVfcnVsZXMudnVlP2NiNDciXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307XG4gICAgaWYobW9kdWxlLmhvdCkge1xuICAgICAgLy8gMTcxMzkzNzU2MTc0NFxuICAgICAgdmFyIGNzc1JlbG9hZCA9IHJlcXVpcmUoXCJFOi9iay1jaS9zcmMvZnJvbnRlbmQvbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvaG1yL2hvdE1vZHVsZVJlcGxhY2VtZW50LmpzXCIpKG1vZHVsZS5pZCwge1wibG9jYWxzXCI6ZmFsc2V9KTtcbiAgICAgIG1vZHVsZS5ob3QuZGlzcG9zZShjc3NSZWxvYWQpO1xuICAgICAgbW9kdWxlLmhvdC5hY2NlcHQodW5kZWZpbmVkLCBjc3NSZWxvYWQpO1xuICAgIH1cbiAgIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6559\n");

/***/ }),

/***/ 7434:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": () => (/* binding */ create_rules)\n});\n\n// EXTERNAL MODULE: ../node_modules/core-js/modules/es.array.includes.js\nvar es_array_includes = __webpack_require__(7406);\n// EXTERNAL MODULE: ../node_modules/core-js/modules/es.regexp.exec.js\nvar es_regexp_exec = __webpack_require__(3188);\n// EXTERNAL MODULE: ../node_modules/core-js/modules/es.string.replace.js\nvar es_string_replace = __webpack_require__(9297);\n;// CONCATENATED MODULE: ../node_modules/babel-loader/lib/index.js!../node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[3]!../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/views/create_rules.vue?vue&type=template&id=966acdd6\n\n\n\nvar render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c(\"div\", {\n    directives: [{\n      name: \"bkloading\",\n      rawName: \"v-bkloading\",\n      value: {\n        isLoading: _vm.loading.isLoading,\n        title: _vm.loading.title\n      },\n      expression: \"{\\n        isLoading: loading.isLoading,\\n        title: loading.title\\n    }\"\n    }],\n    staticClass: \"create-rule-wrapper\"\n  }, [_c(\"div\", {\n    staticClass: \"info-header\"\n  }, [_c(\"div\", {\n    staticClass: \"title\"\n  }, [_c(\"span\", {\n    staticClass: \"header-text\"\n  }, [_vm._v(_vm._s(_vm.title))])])]), _vm._v(\" \"), _vm.hasPermission && _vm.showContent ? _c(\"div\", {\n    staticClass: \"create-rule-content\"\n  }, [_c(\"div\", {\n    staticClass: \"fast-create\"\n  }, [_c(\"div\", {\n    staticClass: \"info-title\"\n  }, [_vm._v(_vm._s(_vm.$t(\"quality.快捷创建规则\")))]), _vm._v(\" \"), _c(\"ul\", {\n    staticClass: \"rule-types-container\"\n  }, _vm._l(_vm.fastTypeRuleList, function (entry, index) {\n    return _c(\"li\", {\n      key: index,\n      class: {\n        \"type-item-card\": true,\n        \"active-item\": _vm.curFastType === entry.hashId\n      },\n      attrs: {\n        title: entry.name\n      },\n      on: {\n        click: function ($event) {\n          return _vm.changeFastType(entry);\n        }\n      }\n    }, [_vm.templateName.includes(entry.name) ? _c(\"div\", {\n      staticClass: \"template-icon\"\n    }, [[\"日常构建\", \"Daily Build\"].includes(entry.name) ? _c(\"icon\", {\n      attrs: {\n        name: \"daily-build\",\n        size: \"14\"\n      }\n    }) : _vm._e(), _vm._v(\" \"), [\"版本转测\", \"Version Testing\"].includes(entry.name) ? _c(\"icon\", {\n      attrs: {\n        name: \"version-test\",\n        size: \"14\"\n      }\n    }) : _vm._e(), _vm._v(\" \"), [\"发布上线\", \"Deploy to Production\"].includes(entry.name) ? _c(\"icon\", {\n      attrs: {\n        name: \"release-online\",\n        size: \"14\"\n      }\n    }) : _vm._e()], 1) : _c(\"i\", {\n      class: {\n        \"devops-icon\": true,\n        \"label-icon\": true,\n        \"icon-placeholder\": true\n      }\n    }), _vm._v(\" \"), _c(\"span\", {\n      staticClass: \"card-label\"\n    }, [_vm._v(_vm._s(entry.name))]), _vm._v(\" \"), _vm.curFastType === entry.hashId ? _c(\"i\", {\n      staticClass: \"devops-icon icon-check-circle-shape\"\n    }) : _vm._e()]);\n  }), 0)]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"create-steps-rule\"\n  }, [_c(\"div\", {\n    staticClass: \"create-rule-form\"\n  }, [_c(\"p\", {\n    staticClass: \"info-title\"\n  }, [_vm._v(_vm._s(_vm.$t(\"quality.基本信息\")))]), _vm._v(\" \"), _c(\"hr\"), _vm._v(\" \"), _c(\"bk-form\", {\n    attrs: {\n      \"label-width\": 100,\n      model: _vm.createRuleForm\n    }\n  }, [_c(\"devops-form-item\", {\n    attrs: {\n      label: _vm.$t(\"quality.名称\"),\n      required: true,\n      property: \"name\",\n      \"is-error\": _vm.errors.has(\"ruleName\"),\n      \"error-msg\": _vm.errors.first(\"ruleName\")\n    }\n  }, [_c(\"bk-input\", {\n    directives: [{\n      name: \"validate\",\n      rawName: \"v-validate\",\n      value: \"required\",\n      expression: \"'required'\"\n    }],\n    staticClass: \"rule-name-input\",\n    attrs: {\n      placeholder: _vm.$t(\"quality.请输入规则名称\"),\n      name: \"ruleName\"\n    },\n    model: {\n      value: _vm.createRuleForm.name,\n      callback: function ($$v) {\n        _vm.$set(_vm.createRuleForm, \"name\", $$v);\n      },\n      expression: \"createRuleForm.name\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"bk-form-item\", {\n    attrs: {\n      label: _vm.$t(\"quality.描述\"),\n      property: \"desc\"\n    }\n  }, [_c(\"bk-input\", {\n    staticClass: \"rule-desc-input\",\n    attrs: {\n      type: \"text\",\n      placeholder: _vm.$t(\"quality.请输入描述\"),\n      name: \"ruleDesc\"\n    },\n    model: {\n      value: _vm.createRuleForm.desc,\n      callback: function ($$v) {\n        _vm.$set(_vm.createRuleForm, \"desc\", $$v);\n      },\n      expression: \"createRuleForm.desc\"\n    }\n  })], 1)], 1), _vm._v(\" \"), _c(\"p\", {\n    staticClass: \"info-title\",\n    staticStyle: {\n      \"margin-top\": \"28px\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"quality.指标\")) + \"\\n                    \"), _c(\"bk-popover\", {\n    attrs: {\n      placement: \"right\"\n    }\n  }, [_c(\"i\", {\n    staticClass: \"devops-icon icon-info-circle\"\n  }), _vm._v(\" \"), _c(\"template\", {\n    slot: \"content\"\n  }, [_c(\"p\", {\n    staticStyle: {\n      width: \"200px\",\n      \"text-align\": \"left\",\n      \"white-space\": \"normal\",\n      \"word-break\": \"break-all\",\n      \"font-weight\": \"400\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"quality.选择关注的指标并设置范围，不满足的流水线将会在控制点位置停住\")))])])], 2), _vm._v(\" \"), _c(\"a\", {\n    staticClass: \"add-indicator\",\n    attrs: {\n      target: \"_blank\",\n      href: `/console/quality/${_vm.projectId}/metadataList`\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"quality.缺少需要的指标？\")))])], 1), _vm._v(\" \"), _c(\"hr\"), _vm._v(\" \"), _vm.createRuleForm.indicators.length ? _c(\"table\", {\n    staticClass: \"rule-metadata-table\",\n    staticStyle: {\n      \"border-collapse\": \"separate\",\n      \"border-spacing\": \"0px 10px\"\n    }\n  }, [_c(\"tr\", [_c(\"th\", {\n    attrs: {\n      width: \"323\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"quality.指标名称\")))]), _vm._v(\" \"), _c(\"th\", {\n    attrs: {\n      width: \"118\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"quality.操作\")))]), _vm._v(\" \"), _c(\"th\", {\n    attrs: {\n      width: \"118\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"quality.阈值\")))]), _vm._v(\" \"), _c(\"th\", {\n    attrs: {\n      width: \"100\"\n    }\n  })]), _vm._v(\" \"), _vm._l(_vm.createRuleForm.indicators, function (row, index) {\n    return _c(\"tr\", {\n      key: index\n    }, [_c(\"td\", {\n      staticClass: \"indicator-item\"\n    }, [_c(\"div\", {\n      staticClass: \"metadata-name\",\n      attrs: {\n        title: _vm.getIndicatorName(row)\n      }\n    }, [_vm._v(_vm._s(row.cnName) + \"\\n                                \"), row.type === \"CUSTOM\" ? _c(\"span\", [_vm._v(\"(\" + _vm._s(row.enName) + \")\")]) : _vm._e()])]), _vm._v(\" \"), _c(\"td\", {\n      staticClass: \"handler-item\",\n      staticStyle: {\n        \"border-left\": \"none\"\n      }\n    }, [_c(\"bk-select\", {\n      attrs: {\n        disabled: row.readOnly\n      },\n      model: {\n        value: row.operation,\n        callback: function ($$v) {\n          _vm.$set(row, \"operation\", $$v);\n        },\n        expression: \"row.operation\"\n      }\n    }, _vm._l(row.operationList, function (option, optionIndex) {\n      return _c(\"bk-option\", {\n        key: optionIndex,\n        attrs: {\n          id: option.value,\n          name: option.label\n        }\n      });\n    }), 1)], 1), _vm._v(\" \"), _c(\"td\", {\n      staticClass: \"threshold-item\",\n      staticStyle: {\n        \"border-left\": \"none\"\n      }\n    }, [row.thresholdType === \"BOOLEAN\" ? _c(\"bk-select\", {\n      attrs: {\n        disabled: row.readOnly\n      },\n      model: {\n        value: row.threshold,\n        callback: function ($$v) {\n          _vm.$set(row, \"threshold\", $$v);\n        },\n        expression: \"row.threshold\"\n      }\n    }, _vm._l(_vm.optionBoolean, function (option, optionIndex) {\n      return _c(\"bk-option\", {\n        key: optionIndex,\n        attrs: {\n          id: option.value,\n          name: option.label\n        }\n      });\n    }), 1) : _vm._e(), _vm._v(\" \"), row.thresholdType === \"INT\" ? _c(\"input\", {\n      directives: [{\n        name: \"model\",\n        rawName: \"v-model\",\n        value: row.threshold,\n        expression: \"row.threshold\"\n      }],\n      staticClass: \"bk-form-input\",\n      attrs: {\n        type: \"number\",\n        disabled: row.readOnly,\n        onkeypress: \"return(/[\\\\d]/.test(String.fromCharCode(event.keyCode)))\"\n      },\n      domProps: {\n        value: row.threshold\n      },\n      on: {\n        input: function ($event) {\n          if ($event.target.composing) return;\n          _vm.$set(row, \"threshold\", $event.target.value);\n        }\n      }\n    }) : _vm._e(), _vm._v(\" \"), row.thresholdType === \"FLOAT\" ? _c(\"input\", {\n      directives: [{\n        name: \"model\",\n        rawName: \"v-model\",\n        value: row.threshold,\n        expression: \"row.threshold\"\n      }],\n      staticClass: \"bk-form-input\",\n      attrs: {\n        type: \"number\",\n        disabled: row.readOnly,\n        onkeypress: \"return(/[\\\\d\\\\.]/.test(String.fromCharCode(event.keyCode)))\"\n      },\n      domProps: {\n        value: row.threshold\n      },\n      on: {\n        input: function ($event) {\n          if ($event.target.composing) return;\n          _vm.$set(row, \"threshold\", $event.target.value);\n        }\n      }\n    }) : _vm._e(), _vm._v(\" \"), row.thresholdType === \"STRING\" ? _c(\"input\", {\n      directives: [{\n        name: \"model\",\n        rawName: \"v-model\",\n        value: row.threshold,\n        expression: \"row.threshold\"\n      }],\n      staticClass: \"bk-form-input\",\n      attrs: {\n        type: \"text\",\n        disabled: row.readOnly\n      },\n      domProps: {\n        value: row.threshold\n      },\n      on: {\n        input: function ($event) {\n          if ($event.target.composing) return;\n          _vm.$set(row, \"threshold\", $event.target.value);\n        }\n      }\n    }) : _vm._e()], 1), _vm._v(\" \"), _c(\"td\", [_c(\"i\", {\n      staticClass: \"devops-icon icon-plus-circle-shape\",\n      on: {\n        click: function ($event) {\n          return _vm.selectMetadata(index);\n        }\n      }\n    }), _vm._v(\" \"), _c(\"i\", {\n      staticClass: \"devops-icon icon-minus-circle-shape\",\n      on: {\n        click: function ($event) {\n          return _vm.reduceMetadata(row, index);\n        }\n      }\n    })])]);\n  })], 2) : _vm._e(), _vm._v(\" \"), _vm.includeOpenINdicator ? _c(\"p\", {\n    staticClass: \"error-tips open-tips\"\n  }, [_vm._v(_vm._s(_vm.$t(\"quality.腾讯开源规范指标不支持修改\")))]) : _vm._e(), _vm._v(\" \"), !_vm.createRuleForm.indicators.length ? _c(\"div\", {\n    staticClass: \"no-metadata-row\"\n  }, [_vm._v(\"\\n                    \" + _vm._s(_vm.$t(\"quality.还未添加指标，\")) + \"\\n                    \"), _c(\"span\", {\n    on: {\n      click: function ($event) {\n        return _vm.selectMetadata(0);\n      }\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"quality.立即添加\")))])]) : _vm._e(), _vm._v(\" \"), _c(\"p\", {\n    staticClass: \"info-title\",\n    staticStyle: {\n      \"margin-top\": \"28px\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"quality.控制点\")) + \"\\n                    \"), _c(\"bk-popover\", {\n    attrs: {\n      placement: \"right\"\n    }\n  }, [_c(\"i\", {\n    staticClass: \"devops-icon icon-info-circle\"\n  }), _vm._v(\" \"), _c(\"template\", {\n    slot: \"content\"\n  }, [_c(\"p\", {\n    staticStyle: {\n      width: \"200px\",\n      \"text-align\": \"left\",\n      \"white-space\": \"normal\",\n      \"word-break\": \"break-all\",\n      \"font-weight\": \"400\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"quality.控制点插件需要满足全部指标条件才能顺利执行\")))])])], 2)], 1), _vm._v(\" \"), _c(\"hr\"), _vm._v(\" \"), _c(\"bk-form\", {\n    attrs: {\n      \"label-width\": 100,\n      model: _vm.createRuleForm\n    }\n  }, [_c(\"devops-form-item\", {\n    attrs: {\n      label: _vm.$t(\"quality.控制点名称\"),\n      required: true,\n      property: \"controlPointName\",\n      \"is-error\": _vm.errors.has(\"controlPoint\"),\n      \"error-msg\": _vm.errors.first(\"controlPoint\")\n    }\n  }, [_c(\"bk-input\", {\n    directives: [{\n      name: \"validate\",\n      rawName: \"v-validate\",\n      value: \"required\",\n      expression: \"'required'\"\n    }],\n    staticClass: \"control-point-name\",\n    attrs: {\n      placeholder: _vm.$t(\"quality.请选择\"),\n      disabled: \"\",\n      name: \"controlPoint\"\n    },\n    model: {\n      value: _vm.createRuleForm.controlPointName,\n      callback: function ($$v) {\n        _vm.$set(_vm.createRuleForm, \"controlPointName\", $$v);\n      },\n      expression: \"createRuleForm.controlPointName\"\n    }\n  }), _vm._v(\" \"), _c(\"span\", {\n    staticClass: \"select-control-point\",\n    on: {\n      click: function ($event) {\n        return _vm.selectControlPoint();\n      }\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"quality.选择控制点\")))])], 1), _vm._v(\" \"), _c(\"bk-form-item\", {\n    attrs: {\n      label: _vm.$t(\"quality.红线位置\"),\n      required: true,\n      property: \"controlPointPosition\",\n      \"is-error\": _vm.errors.has(\"controlPointPosition\"),\n      \"error-msg\": _vm.errors.first(\"controlPointPosition\")\n    }\n  }, [_c(\"bk-select\", {\n    staticStyle: {\n      width: \"467px\"\n    },\n    model: {\n      value: _vm.createRuleForm.controlPointPosition,\n      callback: function ($$v) {\n        _vm.$set(_vm.createRuleForm, \"controlPointPosition\", $$v);\n      },\n      expression: \"createRuleForm.controlPointPosition\"\n    }\n  }, _vm._l(_vm.createRuleForm.availablePosition, function (option, index) {\n    return _c(\"bk-option\", {\n      key: index,\n      attrs: {\n        id: option.name,\n        name: option.cnName\n      }\n    });\n  }), 1)], 1), _vm._v(\" \"), _c(\"devops-form-item\", {\n    attrs: {\n      label: _vm.$t(\"quality.控制点前缀\"),\n      property: \"id\",\n      \"is-error\": _vm.errors.has(\"gatewayId\"),\n      \"error-msg\": _vm.errors.first(\"gatewayId\")\n    }\n  }, [_c(\"bk-input\", {\n    directives: [{\n      name: \"validate\",\n      rawName: \"v-validate\",\n      value: {\n        max: 10,\n        customRuleId: true\n      },\n      expression: \"{\\n                                max: 10,\\n                                customRuleId: true\\n                            }\"\n    }],\n    staticClass: \"rule-name-input\",\n    attrs: {\n      placeholder: _vm.$t(\"quality.默认可不填，不填则对所有控制点生效。仅支持英文和数字，例如gate1\"),\n      name: \"gatewayId\"\n    },\n    model: {\n      value: _vm.createRuleForm.gatewayId,\n      callback: function ($$v) {\n        _vm.$set(_vm.createRuleForm, \"gatewayId\", $$v);\n      },\n      expression: \"createRuleForm.gatewayId\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"p\", {\n    staticClass: \"gateway-id-tips\"\n  }, [_c(\"i\", {\n    staticClass: \"devops-icon icon-info-circle-shape\"\n  }), _vm._v(\" \"), _c(\"span\", [_vm._v(_vm._s(_vm.$t(\"quality.若输入了前缀（例如gate1），红线将只对名称以前缀加下划线开头的控制点生效（例如gate1_XX）\")))])]), _vm._v(\" \"), _c(\"bk-form-item\", {\n    staticClass: \"blod-label\",\n    attrs: {\n      label: _vm.$t(\"quality.生效范围\"),\n      property: \"controlPointPosition\"\n    }\n  }, [_c(\"bk-dropdown-menu\", {\n    ref: \"dropdown\",\n    on: {\n      show: function ($event) {\n        _vm.isDropdownShow = true;\n      },\n      hide: function ($event) {\n        _vm.isDropdownShow = false;\n      }\n    }\n  }, [_c(\"bk-button\", {\n    attrs: {\n      slot: \"dropdown-trigger\",\n      type: \"primary\"\n    },\n    slot: \"dropdown-trigger\"\n  }, [_c(\"i\", {\n    staticClass: \"devops-icon icon-plus select-effect-btn\"\n  }), _c(\"span\", [_vm._v(_vm._s(_vm.$t(\"quality.选择流水线/模板\")))]), _vm._v(\" \"), _c(\"i\", {\n    class: [\"devops-icon icon-angle-down\", {\n      \"icon-flip\": _vm.isDropdownShow\n    }]\n  })]), _vm._v(\" \"), _c(\"ul\", {\n    staticClass: \"bk-dropdown-list\",\n    attrs: {\n      slot: \"dropdown-content\"\n    },\n    slot: \"dropdown-content\"\n  }, [_c(\"li\", [_c(\"a\", {\n    attrs: {\n      href: \"javascript:;\"\n    },\n    on: {\n      click: function ($event) {\n        return _vm.triggerHandler(\"pipeline\");\n      }\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"quality.单流水线\")))])]), _vm._v(\" \"), _c(\"li\", [_c(\"a\", {\n    attrs: {\n      href: \"javascript:;\"\n    },\n    on: {\n      click: function ($event) {\n        return _vm.triggerHandler(\"template\");\n      }\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"quality.模板\")))])])])], 1), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"pipeline-table-container\"\n  }, [_c(\"bk-table\", {\n    directives: [{\n      name: \"bkloading\",\n      rawName: \"v-bkloading\",\n      value: {\n        isLoading: _vm.tableLoading\n      },\n      expression: \"{\\n                                    isLoading: tableLoading\\n                                }\"\n    }],\n    staticClass: \"effect-pipeline-table\",\n    attrs: {\n      size: \"small\",\n      \"outer-border\": false,\n      data: _vm.createRuleForm.pipelineList\n    }\n  }, [_c(\"bk-table-column\", {\n    attrs: {\n      label: _vm.$t(\"quality.名称\"),\n      width: \"200\"\n    },\n    scopedSlots: _vm._u([{\n      key: \"default\",\n      fn: function (props) {\n        return [_c(\"span\", [_vm._v(_vm._s(props.row.type === \"pipeline\" ? props.row.pipelineName : props.row.templateName))])];\n      }\n    }], null, false, 4156453814)\n  }), _vm._v(\" \"), _c(\"bk-table-column\", {\n    attrs: {\n      label: _vm.$t(\"quality.类型\"),\n      prop: \"elementCount\"\n    },\n    scopedSlots: _vm._u([{\n      key: \"default\",\n      fn: function (props) {\n        return [_c(\"span\", [_vm._v(_vm._s(props.row.type === \"pipeline\" ? _vm.$t(\"quality.单流水线\") : _vm.$t(\"quality.模板\")))])];\n      }\n    }], null, false, 2637562469)\n  }), _vm._v(\" \"), _c(\"bk-table-column\", {\n    attrs: {\n      label: _vm.$t(\"quality.相关插件\"),\n      \"min-width\": \"260\"\n    },\n    scopedSlots: _vm._u([{\n      key: \"default\",\n      fn: function (props) {\n        return [props.row.lackPointElement.length ? _c(\"p\", {\n          staticClass: \"atom-tips\",\n          attrs: {\n            title: _vm.$t(\"quality.缺少指标所需的{0}插件\", [_vm.getPipelineStatus(props.row.lackPointElement)])\n          }\n        }, [_c(\"span\", {\n          staticClass: \"mark-circle\"\n        }), _vm._v(\"\\n                                            \" + _vm._s(_vm.$t(\"quality.缺少指标所需的{0}插件\", [_vm.getPipelineStatus(props.row.lackPointElement)])) + \"\\n                                        \")]) : _vm._e(), _vm._v(\" \"), _vm.checkAtomAsync(props.row.existElement) ? _c(\"p\", {\n          staticClass: \"atom-tips\",\n          attrs: {\n            title: _vm.$t(\"quality.{0}插件不是同步，无法及时获取产出结果\", [_vm.getAsyncAtom(props.row.existElement)])\n          }\n        }, [_c(\"span\", {\n          staticClass: \"mark-circle\"\n        }), _vm._v(\"\\n                                            \" + _vm._s(_vm.$t(\"quality.{0}插件不是同步，无法及时获取产出结果\", [_vm.getAsyncAtom(props.row.existElement)])) + \"\\n                                        \")]) : _vm._e(), !props.row.lackPointElement.length && !_vm.checkAtomAsync(props.row.existElement) && !props.row.isSetPipeline ? _c(\"p\", {\n          staticStyle: {\n            color: \"#00C873\"\n          }\n        }, [_vm._v(\"\\n                                            \" + _vm._s(_vm.$t(\"quality.指标所需插件完整\")) + \"\\n                                        \")]) : _vm._e(), _vm._v(\" \"), _vm.checkAtomCount(props.row.existElement) ? _c(\"p\", {\n          staticClass: \"atom-tips\"\n        }, [_c(\"span\", {\n          staticClass: \"mark-circle\"\n        }), _vm._v(_vm._s(_vm.$t(\"quality.若有多个控制点插件，请将需配置红线的控制点插件名称开头加上控制点前缀+下划线。\")) + \"\\n                                        \")]) : _vm._e(), _vm._v(\" \"), props.row.isSetPipeline ? _c(\"p\", [_vm._v(\"-\")]) : _vm._e()];\n      }\n    }], null, false, 2212673784)\n  }), _vm._v(\" \"), _c(\"bk-table-column\", {\n    attrs: {\n      label: _vm.$t(\"quality.操作\")\n    },\n    scopedSlots: _vm._u([{\n      key: \"default\",\n      fn: function (props) {\n        return [props.row.type === \"pipeline\" && (props.row.lackPointElement.length || _vm.checkAtomAsync(props.row.existElement) || _vm.checkAtomCount(props.row.existElement)) && !props.row.isRefresh ? _c(\"a\", {\n          staticClass: \"add-btn\",\n          attrs: {\n            target: \"_blank\",\n            href: `/console/pipeline/${_vm.projectId}/${props.row.pipelineId}/edit`\n          },\n          on: {\n            click: function ($event) {\n              return _vm.updatePipelineStatus(props.row.pipelineId);\n            }\n          }\n        }, [_vm._v(_vm._s(_vm.$t(\"quality.去修改\")))]) : props.row.type === \"template\" && (props.row.lackPointElement.length || _vm.checkAtomAsync(props.row.existElement) || _vm.checkAtomCount(props.row.existElement)) && !props.row.isRefresh ? _c(\"a\", {\n          staticClass: \"add-btn\",\n          attrs: {\n            target: \"_blank\",\n            href: `/console/pipeline/${_vm.projectId}/template/${props.row.templateId}/edit`\n          },\n          on: {\n            click: function ($event) {\n              return _vm.updateTemplateStatus(props.row.templateId);\n            }\n          }\n        }, [_vm._v(_vm._s(_vm.$t(\"quality.去修改\")))]) : props.row.isRefresh ? _c(\"span\", {\n          staticClass: \"add-btn\",\n          on: {\n            click: _vm.handleRefresh\n          }\n        }, [_vm._v(_vm._s(_vm.$t(\"quality.刷新\")))]) : _c(\"span\", [_vm._v(\"-\")])];\n      }\n    }], null, false, 355249553)\n  }), _vm._v(\" \"), _c(\"template\", {\n    slot: \"empty\"\n  }, [_c(\"div\", {\n    staticClass: \"no-data\"\n  }, [_vm._v(_vm._s(_vm.$t(\"quality.未选择流水线\")))])])], 2)], 1)], 1), _vm._v(\" \"), _c(\"bk-form-item\", {\n    staticClass: \"blod-label\",\n    attrs: {\n      label: _vm.$t(\"quality.操作\")\n    }\n  }, [_c(\"div\", {\n    staticClass: \"rule-item-content notice-type-content\"\n  }, [_c(\"bk-radio-group\", {\n    model: {\n      value: _vm.createRuleForm.operation,\n      callback: function ($$v) {\n        _vm.$set(_vm.createRuleForm, \"operation\", $$v);\n      },\n      expression: \"createRuleForm.operation\"\n    }\n  }, [_c(\"bk-radio\", {\n    attrs: {\n      value: \"END\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"quality.终止后通知\")))]), _vm._v(\" \"), _c(\"bk-radio\", {\n    attrs: {\n      value: \"AUDIT\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"quality.人工审核\")))])], 1), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"selected-item-tooltips notice-item-tooltips\",\n    class: {\n      \"system-active\": _vm.createRuleForm.operation === \"END\"\n    }\n  }, [_vm.createRuleForm.operation === \"END\" ? _c(\"bk-form\", {\n    attrs: {\n      \"label-width\": 120,\n      model: _vm.createRuleForm\n    }\n  }, [_c(\"bk-form-item\", {\n    staticClass: \"notice-type-item\",\n    attrs: {\n      label: _vm.$t(\"quality.通知方式\"),\n      required: true\n    }\n  }, [_c(\"bk-checkbox-group\", {\n    model: {\n      value: _vm.createRuleForm.notifyTypeList,\n      callback: function ($$v) {\n        _vm.$set(_vm.createRuleForm, \"notifyTypeList\", $$v);\n      },\n      expression: \"createRuleForm.notifyTypeList\"\n    }\n  }, _vm._l(_vm.noticeTypeList, function (entry, index) {\n    return _c(\"bk-checkbox\", {\n      key: index,\n      attrs: {\n        value: entry.value\n      }\n    }, [_c(\"logo\", {\n      staticClass: \"nav-icon\",\n      attrs: {\n        name: entry.name,\n        size: \"30\"\n      }\n    })], 1);\n  }), 1)], 1), _vm._v(\" \"), _c(\"bk-form-item\", {\n    staticClass: \"notice-group-item\",\n    attrs: {\n      label: _vm.$t(\"quality.发送通知到\"),\n      property: \"desc\"\n    }\n  }, [_c(\"bk-checkbox-group\", {\n    model: {\n      value: _vm.createRuleForm.notifyGroupList,\n      callback: function ($$v) {\n        _vm.$set(_vm.createRuleForm, \"notifyGroupList\", $$v);\n      },\n      expression: \"createRuleForm.notifyGroupList\"\n    }\n  }, [_vm._l(_vm.groupList, function (col, index) {\n    return _c(\"bk-checkbox\", {\n      key: index,\n      attrs: {\n        value: col.groupHashId\n      }\n    }, [_c(\"span\", {\n      staticClass: \"notice-name\",\n      attrs: {\n        title: col.name\n      }\n    }, [_vm._v(_vm._s(col.name))]), _vm._v(\" \"), _c(\"bk-popover\", {\n      attrs: {\n        delay: 500,\n        placement: \"top\"\n      }\n    }, [_c(\"i\", {\n      staticClass: \"devops-icon icon-member-list\"\n    }), _vm._v(\" \"), _c(\"template\", {\n      slot: \"content\"\n    }, [_c(\"p\", {\n      staticStyle: {\n        \"max-width\": \"300px\",\n        \"text-align\": \"left\",\n        \"white-space\": \"normal\",\n        \"word-break\": \"break-all\",\n        \"font-weight\": \"400\"\n      }\n    }, _vm._l(col.innerUsers, function (entry, opIndex) {\n      return _c(\"span\", {\n        key: opIndex\n      }, [_vm._v(_vm._s(entry.replace('\"', \"\"))), opIndex !== col.innerUsers.length - 1 ? _c(\"span\", [_vm._v(\",\")]) : _vm._e()]);\n    }), 0)])], 2)], 1);\n  }), _vm._v(\" \"), _c(\"bk-checkbox\", {\n    staticClass: \"add-group\",\n    attrs: {\n      disabled: true\n    },\n    nativeOn: {\n      click: function ($event) {\n        return _vm.toCreateGroup.apply(null, arguments);\n      }\n    }\n  }, [_c(\"i\", {\n    staticClass: \"devops-icon icon-plus-circle\"\n  }), _vm._v(\" \"), _c(\"span\", {\n    staticClass: \"bk-checkbox-text create-group\"\n  }, [_vm._v(_vm._s(_vm.$t(\"quality.新增通知组\")))])])], 2)], 1), _vm._v(\" \"), _c(\"bk-form-item\", {\n    attrs: {\n      label: _vm.$t(\"quality.附加通知人员\"),\n      desc: _vm.$t(\"quality.请输入通知人员，支持输入流水线变量，默认发给流水线触发人\")\n    }\n  }, [_vm.isExtendTx ? _c(\"staff-input\", {\n    attrs: {\n      name: \"attacher\",\n      value: _vm.createRuleForm.notifyUserList,\n      \"handle-change\": _vm.handleChange\n    }\n  }) : _c(\"user-input\", {\n    attrs: {\n      \"handle-change\": _vm.handleChange,\n      name: \"attacher\",\n      value: _vm.createRuleForm.notifyUserList,\n      placeholder: _vm.$t(\"quality.请输入通知人员，支持输入流水线变量，默认发给流水线触发人\")\n    }\n  })], 1)], 1) : _c(\"bk-form\", {\n    staticClass: \"user-audit-form\",\n    attrs: {\n      \"label-width\": 120,\n      model: _vm.createRuleForm\n    }\n  }, [_c(\"bk-form-item\", {\n    attrs: {\n      label: _vm.$t(\"quality.审核人\"),\n      desc: _vm.$t(\"quality.请输入审核人，支持输入流水线变量\"),\n      required: true\n    }\n  }, [_vm.isExtendTx ? _c(\"staff-input\", {\n    attrs: {\n      name: \"reviewer\",\n      value: _vm.createRuleForm.auditUserList,\n      \"handle-change\": _vm.handleChange\n    }\n  }) : _c(\"user-input\", {\n    attrs: {\n      \"handle-change\": _vm.handleChange,\n      name: \"reviewer\",\n      value: _vm.createRuleForm.auditUserList,\n      placeholder: _vm.$t(\"quality.请输入审核人，支持输入流水线变量\")\n    }\n  })], 1), _vm._v(\" \"), _c(\"bk-form-item\", {\n    attrs: {\n      label: _vm.$t(\"quality.审核超时时间\")\n    }\n  }, [_c(\"bk-input\", {\n    attrs: {\n      type: \"number\",\n      placeholder: _vm.$t(\"quality.超时以分钟为单位，最高60\")\n    },\n    model: {\n      value: _vm.createRuleForm.auditTimeoutMinutes,\n      callback: function ($$v) {\n        _vm.$set(_vm.createRuleForm, \"auditTimeoutMinutes\", $$v);\n      },\n      expression: \"createRuleForm.auditTimeoutMinutes\"\n    }\n  }), _vm._v(\" \"), _c(\"span\", {\n    staticClass: \"time-unit\"\n  }, [_vm._v(_vm._s(_vm.$t(\"quality.分钟\")))]), _vm._v(\" \"), _c(\"p\", {\n    staticClass: \"prompt-tips\"\n  }, [_vm._v(_vm._s(_vm.$t(\"quality.默认为15分钟，最长不超过60分钟\")))])], 1)], 1)], 1)], 1)])], 1), _vm._v(\" \"), _c(\"div\", [_c(\"bk-button\", {\n    staticClass: \"submit-handle\",\n    attrs: {\n      theme: \"primary\"\n    },\n    on: {\n      click: function ($event) {\n        return _vm.submit();\n      }\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"quality.提交\")))]), _vm._v(\" \"), _c(\"bk-button\", {\n    staticClass: \"submit-handle\",\n    attrs: {\n      theme: \"default\"\n    },\n    on: {\n      click: function ($event) {\n        return _vm.toRuleList();\n      }\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"quality.取消\")))])], 1)], 1), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"rule-preview\"\n  }, [_c(\"p\", {\n    staticClass: \"info-title\"\n  }, [_vm._v(_vm._s(_vm.$t(\"quality.红线预览\")))]), _vm._v(\" \"), _c(\"hr\"), _vm._v(\" \"), _vm.createRuleForm.controlPointPosition === \"AFTER\" ? _c(\"p\", {\n    staticClass: \"priview-tips\"\n  }, [_vm._v(\"\\n                    \" + _vm._s(_vm.$t(\"quality.流水线在执行控制点1之后需满足2的阈值条件，否则将不会执行后续插件。\", [_vm.createRuleForm.controlPointName || \"-\", _vm.currentINdicators || \"-\"])) + \"\\n                \")]) : _c(\"p\", {\n    staticClass: \"priview-tips\"\n  }, [_vm._v(\"\\n                    \" + _vm._s(_vm.$t(\"quality.流水线在执行控制点1之前需满足2的阈值条件，否则将会停在红线位置。\", [_vm.createRuleForm.controlPointName || \"-\", _vm.currentINdicators || \"-\"])) + \"\\n                \")]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"preview-image\"\n  }, [_vm.createRuleForm.controlPointPosition ? _c(\"img\", {\n    attrs: {\n      src: _vm.createRuleForm.controlPointPosition === \"BEFORE\" ? _vm.beforeSiteImg : _vm.afterSiteImg\n    }\n  }) : _vm._e()])])])]) : _vm._e(), _vm._v(\" \"), _c(\"bk-sideslider\", {\n    staticClass: \"metadata-side-slider\",\n    attrs: {\n      \"is-show\": _vm.sideSliderConfig.show,\n      \"quick-close\": _vm.sideSliderConfig.quickClose,\n      width: _vm.sideSliderConfig.width\n    },\n    on: {\n      \"update:isShow\": function ($event) {\n        return _vm.$set(_vm.sideSliderConfig, \"show\", $event);\n      },\n      \"update:is-show\": function ($event) {\n        return _vm.$set(_vm.sideSliderConfig, \"show\", $event);\n      }\n    }\n  }, [_c(\"header\", {\n    staticClass: \"metadata-panel-header\",\n    attrs: {\n      slot: \"header\"\n    },\n    slot: \"header\"\n  }, [_c(\"span\", [_vm._v(_vm._s(_vm.sideSliderConfig.title))]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"search-input-row\",\n    class: {\n      \"crtl-point-panel\": _vm.isCtrPointPanel\n    }\n  }, [_c(\"input\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.searchKey,\n      expression: \"searchKey\"\n    }],\n    staticClass: \"bk-form-input\",\n    attrs: {\n      type: \"text\"\n    },\n    domProps: {\n      value: _vm.searchKey\n    },\n    on: {\n      keyup: function ($event) {\n        if (!$event.type.indexOf(\"key\") && _vm._k($event.keyCode, \"enter\", 13, $event.key, \"Enter\")) return null;\n        return _vm.handleSearch();\n      },\n      input: function ($event) {\n        if ($event.target.composing) return;\n        _vm.searchKey = $event.target.value;\n      }\n    }\n  }), _vm._v(\" \"), _c(\"i\", {\n    staticClass: \"bk-icon icon-search\",\n    on: {\n      click: function ($event) {\n        return _vm.handleSearch();\n      }\n    }\n  })])]), _vm._v(\" \"), _c(\"template\", {\n    slot: \"content\"\n  }, [_c(\"div\", {\n    directives: [{\n      name: \"bkloading\",\n      rawName: \"v-bkloading\",\n      value: {\n        isLoading: _vm.sideSliderConfig.loading.isLoading,\n        title: _vm.sideSliderConfig.loading.title\n      },\n      expression: \"{\\n                    isLoading: sideSliderConfig.loading.isLoading,\\n                    title: sideSliderConfig.loading.title\\n                }\"\n    }],\n    staticStyle: {\n      width: \"100%\",\n      height: \"100%\"\n    }\n  }, [_c(\"metadata-panel\", {\n    ref: \"metadataPanel\",\n    attrs: {\n      \"is-panel-show\": _vm.sideSliderConfig.show,\n      \"panel-type\": _vm.panelType,\n      \"search-key\": _vm.searchKey,\n      \"selected-atom\": _vm.createRuleForm.controlPoint,\n      \"selected-meta\": _vm.createRuleForm.indicators\n    },\n    on: {\n      comfireHandle: _vm.handleMetadata\n    }\n  })], 1)])], 2), _vm._v(\" \"), !_vm.hasPermission && _vm.showContent ? _c(\"empty-tips\", {\n    attrs: {\n      title: _vm.emptyTipsConfig.title,\n      desc: _vm.emptyTipsConfig.desc,\n      btns: _vm.emptyTipsConfig.btns\n    }\n  }) : _vm._e(), _vm._v(\" \"), _c(\"pipeline-list\", {\n    attrs: {\n      \"is-show\": _vm.showPipelineList,\n      \"selected-pielines\": _vm.selectedPipelines\n    },\n    on: {\n      comfire: _vm.comfirePipelineList,\n      close: _vm.closePipelineList\n    }\n  }), _vm._v(\" \"), _c(\"TemplateList\", {\n    attrs: {\n      \"is-show\": _vm.showTemplateList,\n      \"selected-templates\": _vm.selectedTemplates\n    },\n    on: {\n      comfire: _vm.comfireTemplateList,\n      close: _vm.closeTemplateList\n    }\n  }), _vm._v(\" \"), _c(\"createGroup\", {\n    attrs: {\n      \"node-select-conf\": _vm.nodeSelectConf,\n      \"create-group-form\": _vm.createGroupForm,\n      loading: _vm.dialogLoading,\n      \"on-change\": _vm.handleChange,\n      \"error-handler\": _vm.errorHandler,\n      \"cancel-fn\": _vm.cancelFn\n    },\n    on: {\n      confirmFn: _vm.confirmFn\n    }\n  })], 1);\n};\nvar staticRenderFns = [];\nrender._withStripped = true;\n\n;// CONCATENATED MODULE: ./src/views/create_rules.vue?vue&type=template&id=966acdd6\n\n// EXTERNAL MODULE: ../node_modules/@babel/runtime/helpers/esm/extends.js\nvar esm_extends = __webpack_require__(8102);\n// EXTERNAL MODULE: ./src/components/devops/StaffInput/index.vue + 11 modules\nvar StaffInput = __webpack_require__(1708);\n// EXTERNAL MODULE: ./src/components/devops/UserInput/index.vue + 6 modules\nvar UserInput = __webpack_require__(5155);\n// EXTERNAL MODULE: ./src/components/devops/create_group.vue + 6 modules\nvar create_group = __webpack_require__(6415);\n;// CONCATENATED MODULE: ../node_modules/babel-loader/lib/index.js!../node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[3]!../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/devops/emptyTips.vue?vue&type=template&id=76f81e04\nvar emptyTipsvue_type_template_id_76f81e04_render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c(\"section\", {\n    staticClass: \"devops-empty-tips\"\n  }, [_c(\"h2\", {\n    staticClass: \"title\"\n  }, [_vm._v(_vm._s(_vm.title))]), _vm._v(\" \"), _c(\"p\", {\n    staticClass: \"desc\"\n  }, [_vm._v(_vm._s(_vm.desc))]), _vm._v(\" \"), _c(\"p\", {\n    staticClass: \"btns-row\"\n  }, [_vm._t(\"btns\", function () {\n    return [_vm.btns.length ? _vm._l(_vm.btns, function (btn, index) {\n      return _c(\"button\", {\n        key: index,\n        staticClass: \"bk-button\",\n        class: [`bk-${btn.type}`, `bk-button-${btn.size}`],\n        on: {\n          click: btn.handler\n        }\n      }, [_vm._v(\"\\n                    \" + _vm._s(btn.text) + \"\\n                \")]);\n    }) : _vm._e()];\n  })], 2)]);\n};\nvar emptyTipsvue_type_template_id_76f81e04_staticRenderFns = [];\nemptyTipsvue_type_template_id_76f81e04_render._withStripped = true;\n\n;// CONCATENATED MODULE: ./src/components/devops/emptyTips.vue?vue&type=template&id=76f81e04\n\n;// CONCATENATED MODULE: ../node_modules/babel-loader/lib/index.js!../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/devops/emptyTips.vue?vue&type=script&lang=js\n/* harmony default export */ const emptyTipsvue_type_script_lang_js = ({\n  props: {\n    title: {\n      type: String,\n      default: ''\n    },\n    desc: {\n      type: String,\n      default: ''\n    },\n    btns: {\n      type: Array,\n      default() {\n        return [];\n      }\n    }\n  }\n});\n;// CONCATENATED MODULE: ./src/components/devops/emptyTips.vue?vue&type=script&lang=js\n /* harmony default export */ const devops_emptyTipsvue_type_script_lang_js = (emptyTipsvue_type_script_lang_js); \n// EXTERNAL MODULE: ../node_modules/mini-css-extract-plugin/dist/loader.js??clonedRuleSet-3.use[0]!./node_modules/css-loader/dist/cjs.js!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/sass-loader/dist/cjs.js!../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/devops/emptyTips.vue?vue&type=style&index=0&id=76f81e04&prod&lang=scss\nvar emptyTipsvue_type_style_index_0_id_76f81e04_prod_lang_scss = __webpack_require__(4619);\n;// CONCATENATED MODULE: ./src/components/devops/emptyTips.vue?vue&type=style&index=0&id=76f81e04&prod&lang=scss\n\n// EXTERNAL MODULE: ../node_modules/vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(7658);\n;// CONCATENATED MODULE: ./src/components/devops/emptyTips.vue\n\n\n\n;\n\n\n/* normalize component */\n\nvar component = (0,componentNormalizer/* default */.A)(\n  devops_emptyTipsvue_type_script_lang_js,\n  emptyTipsvue_type_template_id_76f81e04_render,\n  emptyTipsvue_type_template_id_76f81e04_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ const emptyTips = (component.exports);\n;// CONCATENATED MODULE: ../node_modules/babel-loader/lib/index.js!../node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[3]!../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/devops/metadata-panel.vue?vue&type=template&id=f0a1766c\nvar metadata_panelvue_type_template_id_f0a1766c_render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c(\"div\", {\n    directives: [{\n      name: \"bkloading\",\n      rawName: \"v-bkloading\",\n      value: {\n        isLoading: _vm.loading\n      },\n      expression: \"{ isLoading: loading }\"\n    }],\n    staticClass: \"metadata-select-panel\"\n  }, [_c(\"div\", {\n    staticClass: \"metadata-panel-container\"\n  }, [!_vm.isCtrPointPanel ? _c(\"div\", {\n    class: {\n      \"metadata-main-tab\": true,\n      \"indicator-list-tab\": _vm.isIndexList\n    }\n  }, [_c(\"bk-tab\", {\n    attrs: {\n      active: _vm.currentTab,\n      type: \"unborder-card\"\n    },\n    on: {\n      \"tab-change\": _vm.changeTab\n    }\n  }, _vm._l(_vm.panels, function (panel, index) {\n    return _c(\"bk-tab-panel\", _vm._b({\n      key: index\n    }, \"bk-tab-panel\", panel, false));\n  }), 1)], 1) : _vm._e(), _vm._v(\" \"), _c(\"section\", {\n    staticClass: \"metadata-main-content\"\n  }, [_vm.isCtrPointPanel ? _vm._l(_vm.metaTree, function (classify, index) {\n    return _c(\"div\", {\n      key: index,\n      staticClass: \"property-item-wrapper\"\n    }, [_c(\"div\", {\n      staticClass: \"classify-header\"\n    }, [_c(\"span\", {\n      staticClass: \"title\"\n    }, [_vm._v(_vm._s(classify.stage))])]), _vm._v(\" \"), _vm._l(classify.controlPoints, function (atom, childIndex) {\n      return _c(\"div\", {\n        key: childIndex,\n        staticClass: \"control-point-wrapper\"\n      }, [atom.isDisplay ? _c(\"div\", {\n        class: {\n          \"proprety-item-contnet\": true,\n          \"control-point-content\": true,\n          \"optional-item\": !atom.isSelected\n        }\n      }, [_c(\"div\", {\n        staticClass: \"info-title\"\n      }, [_c(\"icon\", {\n        staticStyle: {\n          fill: \"#C3CDD7\"\n        },\n        attrs: {\n          name: _vm.getAtomIcon(atom.type),\n          size: \"24\"\n        }\n      }), _c(\"span\", {\n        staticClass: \"atom-name\"\n      }, [_vm._v(_vm._s(atom.name))])], 1), _vm._v(\" \"), atom.isSelected ? _c(\"div\", {\n        staticClass: \"handle-btn selected-btn\"\n      }, [_vm._v(_vm._s(_vm.$t(\"quality.已选择\")))]) : _vm._e(), _vm._v(\" \"), !atom.isSelected ? _c(\"div\", {\n        staticClass: \"handle-btn select-btn\",\n        on: {\n          click: function ($event) {\n            return _vm.selectNode(atom, \"controlPoint\");\n          }\n        }\n      }, [_vm._v(_vm._s(_vm.$t(\"quality.选择\")) + \"\\n                            \")]) : _vm._e()]) : _vm._e()]);\n    })], 2);\n  }) : _vm._e(), _vm._v(\" \"), !_vm.isCtrPointPanel && _vm.isIndexList ? _vm._l(_vm.metaTree, function (task, index) {\n    return _c(\"div\", {\n      key: index,\n      staticClass: \"task-item-wrapper\"\n    }, [task.isDisplay ? _c(\"div\", {\n      class: {\n        \"proprety-item-contnet\": true,\n        \"task-item-content\": true,\n        \"optional-item\": _vm.isIndexList && !task.isSelected,\n        hover: task.isDropdownShow\n      },\n      on: {\n        click: function ($event) {\n          return _vm.toggleDropdown(task.hashId);\n        }\n      }\n    }, [_c(\"div\", {\n      staticClass: \"task-name\",\n      attrs: {\n        title: task.name\n      }\n    }, [_vm._v(_vm._s(task.name))]), _vm._v(\" \"), _c(\"div\", {\n      staticClass: \"task-desc\",\n      attrs: {\n        title: task.desc\n      }\n    }, [_vm._v(_vm._s(task.desc))]), _vm._v(\" \"), _c(\"div\", {\n      staticClass: \"dropdown-icon\",\n      class: {\n        hide: !task.indicators.length\n      }\n    }, [_c(\"i\", {\n      class: {\n        \"devops-icon\": true,\n        \"icon-angle-double-right\": true,\n        \"icon-flip\": task.isDropdownShow\n      }\n    })]), _vm._v(\" \"), _vm.isIndexList && !task.isSelected ? _c(\"div\", {\n      staticClass: \"handle-btn select-btn\",\n      on: {\n        click: function ($event) {\n          $event.stopPropagation();\n          return _vm.selectNode(task, \"indexList\");\n        }\n      }\n    }, [_vm._v(_vm._s(_vm.$t(\"quality.添加\")))]) : _vm._e()]) : _vm._e(), _vm._v(\" \"), task.isDropdownShow ? _vm._l(task.indicators, function (metadata, metaIndex) {\n      return _c(\"div\", {\n        key: metaIndex,\n        staticClass: \"metadata-item-wrapper\"\n      }, [task.indicators.length && metadata.isDisplay ? _c(\"div\", {\n        staticClass: \"proprety-item-contnet metadata-item-content\"\n      }, [_c(\"div\", {\n        staticClass: \"meta-name\",\n        attrs: {\n          title: metadata.cnName\n        }\n      }, [_vm._v(_vm._s(metadata.cnName))]), _vm._v(\" \"), _c(\"div\", {\n        staticClass: \"meta-desc\",\n        attrs: {\n          title: metadata.desc\n        }\n      }, [_vm._v(_vm._s(metadata.desc))]), _vm._v(\" \"), metadata.isSelected ? _c(\"div\", {\n        staticClass: \"handle-btn selected-btn\"\n      }, [_vm._v(_vm._s(_vm.$t(\"quality.已选择\")))]) : _vm._e()]) : _vm._e()]);\n    }) : _vm._e()], 2);\n  }) : _vm._e(), _vm._v(\" \"), !_vm.isCtrPointPanel && !_vm.isIndexList ? _vm._l(_vm.metaTree, function (classify, index) {\n    return _c(\"div\", {\n      key: index,\n      staticClass: \"property-item-wrapper\"\n    }, [_c(\"div\", {\n      staticClass: \"classify-header\"\n    }, [_c(\"span\", {\n      staticClass: \"title\"\n    }, [_vm._v(_vm._s(classify.stage))])]), _vm._v(\" \"), _vm._l(classify.controlPoints, function (atom, atomIndex) {\n      return _c(\"div\", {\n        key: atomIndex,\n        staticClass: \"control-point-wrapper\"\n      }, [atom.isDisplay ? _c(\"div\", {\n        staticClass: \"proprety-item-contnet control-point-content\"\n      }, [_c(\"div\", {\n        staticClass: \"info-title\"\n      }, [_c(\"icon\", {\n        staticStyle: {\n          fill: \"#C3CDD7\"\n        },\n        attrs: {\n          name: _vm.getAtomIcon(atom.controlPoint),\n          size: \"24\"\n        }\n      }), _c(\"span\", {\n        staticClass: \"atom-name\"\n      }, [_vm._v(_vm._s(atom.controlPointName))])], 1)]) : _vm._e(), _vm._v(\" \"), _vm._l(atom.details, function (task, taskIndex) {\n        return _c(\"div\", {\n          key: taskIndex,\n          staticClass: \"task-item-wrapper\",\n          staticStyle: {\n            \"padding-left\": \"10px\"\n          }\n        }, [task.isDisplay || atom.isMatch ? _c(\"div\", {\n          class: {\n            \"proprety-item-contnet\": true,\n            \"task-item-content\": true,\n            hover: task.isDropdownShow\n          },\n          on: {\n            click: function ($event) {\n              return _vm.toggleDropdown(task.hashId);\n            }\n          }\n        }, [_c(\"div\", {\n          staticClass: \"task-name\",\n          attrs: {\n            title: task.detail\n          }\n        }, [_vm._v(_vm._s(task.detail))]), _vm._v(\" \"), _c(\"div\", {\n          staticClass: \"task-desc\",\n          attrs: {\n            title: task.desc\n          }\n        }, [_vm._v(_vm._s(task.desc))]), _vm._v(\" \"), _c(\"div\", {\n          staticClass: \"dropdown-icon\",\n          class: {\n            hide: !task.items.length\n          }\n        }, [_c(\"i\", {\n          class: {\n            \"devops-icon\": true,\n            \"icon-angle-double-right\": true,\n            \"icon-flip\": task.isDropdownShow\n          }\n        })])]) : _vm._e(), _vm._v(\" \"), task.isDropdownShow ? _vm._l(task.items, function (metadata, metaIndex) {\n          return _c(\"div\", {\n            key: metaIndex,\n            staticClass: \"metadata-item-wrapper\"\n          }, [task.items.length && metadata.isDisplay ? _c(\"div\", {\n            class: {\n              \"proprety-item-contnet\": true,\n              \"metadata-item-content\": true,\n              \"optional-item\": !metadata.isSelected && !_vm.isIndexList\n            }\n          }, [_c(\"div\", {\n            staticClass: \"meta-name\",\n            attrs: {\n              title: metadata.cnName\n            }\n          }, [_vm._v(_vm._s(metadata.cnName))]), _vm._v(\" \"), _c(\"div\", {\n            staticClass: \"meta-desc\",\n            attrs: {\n              title: metadata.desc\n            }\n          }, [_vm._v(_vm._s(metadata.desc))]), _vm._v(\" \"), metadata.isSelected ? _c(\"div\", {\n            staticClass: \"handle-btn selected-btn\"\n          }, [_vm._v(_vm._s(_vm.$t(\"quality.已选择\")))]) : _vm._e(), _vm._v(\" \"), !metadata.isSelected && !_vm.isIndexList ? _c(\"div\", {\n            staticClass: \"handle-btn select-btn\",\n            on: {\n              click: function ($event) {\n                return _vm.selectNode(metadata, \"singleIndex\");\n              }\n            }\n          }, [_vm._v(_vm._s(_vm.$t(\"quality.添加\")) + \"\\n                                        \")]) : _vm._e()]) : _vm._e()]);\n        }) : _vm._e()], 2);\n      })], 2);\n    })], 2);\n  }) : _vm._e()], 2)])]);\n};\nvar metadata_panelvue_type_template_id_f0a1766c_staticRenderFns = [];\nmetadata_panelvue_type_template_id_f0a1766c_render._withStripped = true;\n\n;// CONCATENATED MODULE: ./src/components/devops/metadata-panel.vue?vue&type=template&id=f0a1766c\n\n;// CONCATENATED MODULE: ../node_modules/babel-loader/lib/index.js!../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/devops/metadata-panel.vue?vue&type=script&lang=js\n/* harmony default export */ const metadata_panelvue_type_script_lang_js = ({\n  props: {\n    isPanelShow: {\n      type: Boolean,\n      default: false\n    },\n    selectedAtom: {\n      type: String,\n      default: ''\n    },\n    searchKey: {\n      type: String,\n      default: ''\n    },\n    panelType: {\n      type: String,\n      default: 'index'\n    },\n    selectedMeta: {\n      type: Array,\n      default: []\n    }\n  },\n  data() {\n    return {\n      isInit: false,\n      loading: false,\n      currentTab: 'indexList',\n      metaTree: [],\n      indicatorSetList: [],\n      indicatorList: [],\n      controlPointList: [],\n      panels: [{\n        name: 'indexList',\n        label: this.$t('quality.指标集')\n      }, {\n        name: 'singleIndex',\n        label: this.$t('quality.单个指标')\n      }]\n    };\n  },\n  computed: {\n    projectId() {\n      return this.$route.params.projectId;\n    },\n    isCtrPointPanel() {\n      return this.panelType === 'controlPoint';\n    },\n    isIndexList() {\n      return this.currentTab === 'indexList';\n    }\n  },\n  watch: {\n    isPanelShow(newVal) {\n      if (newVal && this.isCtrPointPanel) {\n        if (!this.isInit) {\n          this.requestControlPoint();\n        }\n        this.getMetaList(this.controlPointList, this.searchKey);\n      } else if (newVal && !this.isCtrPointPanel && this.isIndexList) {\n        if (!this.isInit) {\n          this.requestIndicatorSet();\n        }\n        this.requestIndicatorSet();\n      } else if (newVal && !this.isInit && !this.isCtrPointPanel && !this.isIndexList) {\n        this.requestIndicators();\n      } else {\n        this.searchKey = '';\n        this.isInit = false;\n      }\n    }\n  },\n  created() {\n    this.isInit = true;\n\n    // 组件升级之前保留 升级后需注释\n    // this.initData()\n\n    // 兼容sideslider组件升级问题（关闭侧栏时组件被销毁）\n    if (this.isCtrPointPanel) {\n      this.requestControlPoint();\n    } else if (!this.isCtrPointPanel && this.isIndexList) {\n      this.requestIndicatorSet();\n    } else if (!this.isInit && !this.isCtrPointPanel && !this.isIndexList) {\n      this.requestIndicators();\n    }\n  },\n  methods: {\n    initData() {\n      this.requestIndicatorSet();\n      this.requestIndicators();\n      this.requestControlPoint();\n    },\n    async requestIndicatorSet() {\n      this.loading = true;\n      try {\n        const res = await this.$store.dispatch('quality/requestIndicatorSet');\n        this.indicatorSetList.splice(0, this.indicatorSetList.length);\n        if (res) {\n          res.forEach(item => {\n            this.indicatorSetList.push(item);\n          });\n        }\n        this.getIndicatortList(this.indicatorSetList, this.searchKey);\n      } catch (err) {\n        const message = err.message ? err.message : err;\n        const theme = 'error';\n        this.$bkMessage({\n          message,\n          theme\n        });\n      } finally {\n        this.loading = false;\n      }\n    },\n    async requestIndicators() {\n      this.loading = true;\n      try {\n        const res = await this.$store.dispatch('quality/requestIndicators', {\n          projectId: this.projectId\n        });\n        this.indicatorList.splice(0, this.indicatorList.length);\n        if (res) {\n          res.forEach(item => {\n            this.indicatorList.push(item);\n          });\n        }\n        this.getMetaList(this.indicatorList, this.searchKey);\n      } catch (err) {\n        const message = err.message ? err.message : err;\n        const theme = 'error';\n        this.$bkMessage({\n          message,\n          theme\n        });\n      } finally {\n        this.loading = false;\n      }\n    },\n    async requestControlPoint() {\n      this.loading = true;\n      try {\n        const res = await this.$store.dispatch('quality/requestControlPoint', {\n          projectId: this.projectId\n        });\n        this.controlPointList.splice(0, this.controlPointList.length);\n        if (res) {\n          res.forEach(item => {\n            this.controlPointList.push(item);\n          });\n        }\n        this.getMetaList(this.controlPointList, this.searchKey);\n      } catch (err) {\n        const message = err.message ? err.message : err;\n        const theme = 'error';\n        this.$bkMessage({\n          message,\n          theme\n        });\n      } finally {\n        this.loading = false;\n      }\n    },\n    getMetaList(container, searchKey) {\n      container.forEach(item => {\n        item.controlPoints.forEach(atom => {\n          atom.isSelected = atom.type === this.selectedAtom; // 控制点是否已选\n          atom.isMatch = false;\n          if (searchKey) {\n            const atomName = this.isCtrPointPanel ? atom.name : atom.controlPointName;\n            atom.isDisplay = this.matchStr(atomName, searchKey);\n            atom.isMatch = this.matchStr(atomName, searchKey); // 搜索匹配到控制点\n          } else {\n            atom.isDisplay = true;\n          }\n          if (!this.isCtrPointPanel) {\n            atom.details.forEach(task => {\n              if (searchKey) {\n                const taskName = task.detail;\n                task.isDisplay = this.matchStr(taskName, searchKey);\n                if (task.isDisplay) {\n                  // 搜索匹配到指标集展开显示所属控制点\n                  atom.isDisplay = true;\n                  task.isDropdownShow = false;\n                }\n                if (atom.isMatch) {\n                  task.isDropdownShow = false;\n                }\n              } else {\n                task.isDisplay = true;\n              }\n              task.items.forEach(meta => {\n                meta.isSelected = this.selectedMeta.some(val => meta.hashId === val.hashId);\n                if (searchKey) {\n                  const metaName = meta.cnName;\n                  meta.isDisplay = this.matchStr(metaName, searchKey) || this.matchStr(task.detail, searchKey);\n                  if (meta.isDisplay) {\n                    // 搜索匹配到指标展开所属指标集\n                    task.isDisplay = true;\n                    task.isDropdownShow = true;\n                  }\n                } else {\n                  meta.isDisplay = true;\n                }\n              });\n            });\n          }\n        });\n      });\n      if (!this.isCtrPointPanel) {\n        // 查找搜索结果父节点展开\n        container.forEach(item => {\n          item.controlPoints.forEach(atom => {\n            if (searchKey && !atom.isDisplay) {\n              atom.isDisplay = atom.details.some(task => task.isDisplay);\n            }\n            atom.details.forEach(task => {\n              task.isSelected = task.items.every(meta => meta.isSelected);\n            });\n          });\n        });\n      }\n      this.metaTree = [...container];\n    },\n    getIndicatortList(container, searchKey) {\n      container.forEach(task => {\n        task.isDropdownShow = false;\n        if (searchKey) {\n          const taskName = task.name;\n          task.isDisplay = this.matchStr(taskName, searchKey);\n          if (task.isDisplay) {\n            // 搜索匹配到指标集展开显示所属控制点\n            task.isDropdownShow = false;\n          }\n        } else {\n          task.isDisplay = true;\n        }\n        task.indicators.forEach(meta => {\n          meta.isSelected = this.selectedMeta.some(val => meta.hashId === val.hashId);\n          if (searchKey) {\n            const metaName = meta.cnName;\n            meta.isDisplay = this.matchStr(metaName, searchKey);\n            if (meta.isDisplay) {\n              // 搜索匹配到指标展开所属指标集\n              task.isDisplay = true;\n              task.isDropdownShow = true;\n            }\n          } else {\n            meta.isDisplay = true;\n          }\n        });\n      });\n      container.forEach(task => {\n        task.isSelected = task.indicators.every(meta => meta.isSelected);\n      });\n      this.metaTree = [...container];\n    },\n    toggleDropdown(taskId) {\n      if (this.isIndexList) {\n        this.metaTree.forEach(task => {\n          if (task.hashId === taskId) {\n            task.isDropdownShow = !task.isDropdownShow;\n            task.indicators.map(meta => {\n              return {\n                ...meta,\n                isDisplay: task.isDropdownShow\n              };\n            });\n          }\n        });\n      } else {\n        this.metaTree.forEach(stage => {\n          stage.controlPoints.forEach(atom => {\n            atom.details.forEach(task => {\n              if (task.hashId === taskId) {\n                task.isDropdownShow = !task.isDropdownShow;\n                task.items.map(meta => {\n                  return {\n                    ...meta,\n                    isDisplay: task.isDropdownShow\n                  };\n                });\n              }\n            });\n          });\n        });\n      }\n      this.metaTree = [...this.metaTree];\n    },\n    getAtomIcon(atomType) {\n      return document.getElementById(atomType) ? atomType : 'placeholder';\n    },\n    getIndicatorDesc(metadataName) {\n      const temp = [];\n      metadataName.forEach(item => {\n        temp.push(item.name);\n      });\n      return temp.join('+');\n    },\n    matchStr(target, key) {\n      return target && target.toLowerCase().indexOf(key.toLowerCase()) > -1;\n    },\n    changeTab(tab) {\n      this.currentTab = tab;\n      if (tab === 'singleIndex') {\n        this.requestIndicators();\n        // this.getMetaList(this.indicatorList, this.searchKey)\n      } else {\n        this.getIndicatortList(this.indicatorSetList, this.searchKey);\n      }\n    },\n    toSearch() {\n      this.searchKey = this.searchKey.trim();\n      if (this.isCtrPointPanel) {\n        this.getMetaList(this.metaTree, this.searchKey);\n      } else if (!this.isCtrPointPanel && !this.isIndexList) {\n        this.getMetaList(this.metaTree, this.searchKey);\n      } else {\n        this.getIndicatortList(this.metaTree, this.searchKey);\n      }\n    },\n    selectNode(node, type) {\n      const params = {};\n      if (type === 'indexList') {\n        params.data = node.indicators;\n        params.type = 'metadata';\n      } else if (type === 'singleIndex') {\n        params.data = [{\n          ...node\n        }];\n        params.type = 'metadata';\n      } else {\n        params.data = node;\n        params.type = 'controlPoint';\n      }\n      this.$emit('comfireHandle', params);\n      if (!this.isCtrPointPanel) {\n        setTimeout(() => {\n          this.isIndexList ? this.getIndicatortList(this.indicatorSetList, this.searchKey) : this.getMetaList(this.indicatorList, this.searchKey);\n        }, 10);\n      }\n    }\n  }\n});\n;// CONCATENATED MODULE: ./src/components/devops/metadata-panel.vue?vue&type=script&lang=js\n /* harmony default export */ const devops_metadata_panelvue_type_script_lang_js = (metadata_panelvue_type_script_lang_js); \n// EXTERNAL MODULE: ../node_modules/mini-css-extract-plugin/dist/loader.js??clonedRuleSet-3.use[0]!./node_modules/css-loader/dist/cjs.js!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/sass-loader/dist/cjs.js!../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/devops/metadata-panel.vue?vue&type=style&index=0&id=f0a1766c&prod&lang=scss\nvar metadata_panelvue_type_style_index_0_id_f0a1766c_prod_lang_scss = __webpack_require__(2621);\n;// CONCATENATED MODULE: ./src/components/devops/metadata-panel.vue?vue&type=style&index=0&id=f0a1766c&prod&lang=scss\n\n;// CONCATENATED MODULE: ./src/components/devops/metadata-panel.vue\n\n\n\n;\n\n\n/* normalize component */\n\nvar metadata_panel_component = (0,componentNormalizer/* default */.A)(\n  devops_metadata_panelvue_type_script_lang_js,\n  metadata_panelvue_type_template_id_f0a1766c_render,\n  metadata_panelvue_type_template_id_f0a1766c_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ const metadata_panel = (metadata_panel_component.exports);\n;// CONCATENATED MODULE: ../node_modules/babel-loader/lib/index.js!../node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[3]!../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/devops/pipeline-list.vue?vue&type=template&id=4da782a6&scoped=true\nvar pipeline_listvue_type_template_id_4da782a6_scoped_true_render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c(\"bk-dialog\", {\n    attrs: {\n      width: \"900\",\n      position: {\n        top: 100\n      },\n      \"ext-cls\": \"pipeline-list-wrapper\",\n      \"close-icon\": _vm.pipelineListConf.closeIcon,\n      \"show-footer\": _vm.pipelineListConf.hasFooter\n    },\n    model: {\n      value: _vm.showPipelineList,\n      callback: function ($$v) {\n        _vm.showPipelineList = $$v;\n      },\n      expression: \"showPipelineList\"\n    }\n  }, [_c(\"div\", {\n    directives: [{\n      name: \"bkloading\",\n      rawName: \"v-bkloading\",\n      value: {\n        isLoading: _vm.loading\n      },\n      expression: \"{\\n        isLoading: loading\\n    }\"\n    }]\n  }, [_c(\"div\", {\n    staticClass: \"pipeline-list-header\"\n  }, [_c(\"div\", {\n    staticClass: \"title\"\n  }, [_vm._v(_vm._s(_vm.$t(\"quality.选择流水线\")))]), _vm._v(\" \"), _c(\"div\", [_c(\"i\", {\n    staticClass: \"devops-icon icon-close\",\n    staticStyle: {\n      color: \"#C3CDD7\"\n    },\n    on: {\n      click: function ($event) {\n        return _vm.cancel();\n      }\n    }\n  })])]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"query-pipeline-row\"\n  }, [_c(\"div\", {\n    staticClass: \"search-input-row\"\n  }, [_c(\"input\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.searchName,\n      expression: \"searchName\"\n    }],\n    staticClass: \"bk-form-input\",\n    attrs: {\n      type: \"text\"\n    },\n    domProps: {\n      value: _vm.searchName\n    },\n    on: {\n      keyup: function ($event) {\n        if (!$event.type.indexOf(\"key\") && _vm._k($event.keyCode, \"enter\", 13, $event.key, \"Enter\")) return null;\n        return _vm.toSearchPipeline();\n      },\n      input: function ($event) {\n        if ($event.target.composing) return;\n        _vm.searchName = $event.target.value;\n      }\n    }\n  }), _vm._v(\" \"), _c(\"i\", {\n    staticClass: \"devops-icon icon-search\",\n    on: {\n      click: function ($event) {\n        return _vm.toSearchPipeline();\n      }\n    }\n  })])]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"pipeline-content\"\n  }, [_c(\"bk-table\", {\n    ref: \"effectPipeline\",\n    staticClass: \"effect-pipeline-table\",\n    attrs: {\n      size: \"small\",\n      data: _vm.pipelineList,\n      \"empty-text\": _vm.$t(\"quality.暂无数据\"),\n      pagination: _vm.pagination\n    },\n    on: {\n      \"page-change\": _vm.handlePageChange,\n      select: _vm.selectItem,\n      \"select-all\": _vm.selectAll\n    }\n  }, [_c(\"bk-table-column\", {\n    attrs: {\n      type: \"selection\",\n      width: \"60\",\n      align: \"center\"\n    }\n  }), _vm._v(\" \"), _c(\"bk-table-column\", {\n    attrs: {\n      label: _vm.$t(\"quality.流水线名称\"),\n      prop: \"pipelineName\",\n      width: \"360\"\n    },\n    scopedSlots: _vm._u([{\n      key: \"default\",\n      fn: function (props) {\n        return [_c(\"span\", {\n          attrs: {\n            title: props.row.pipelineName\n          }\n        }, [_vm._v(_vm._s(props.row.pipelineName))])];\n      }\n    }])\n  }), _vm._v(\" \"), _c(\"bk-table-column\", {\n    attrs: {\n      label: _vm.$t(\"quality.插件个数\"),\n      prop: \"taskCount\"\n    },\n    scopedSlots: _vm._u([{\n      key: \"default\",\n      fn: function (props) {\n        return [_c(\"span\", [_vm._v(_vm._s(props.row.taskCount))])];\n      }\n    }])\n  }), _vm._v(\" \"), _c(\"bk-table-column\", {\n    attrs: {\n      label: _vm.$t(\"quality.执行总次数\"),\n      prop: \"buildCount\"\n    },\n    scopedSlots: _vm._u([{\n      key: \"default\",\n      fn: function (props) {\n        return [_c(\"span\", [_vm._v(_vm._s(props.row.buildCount))])];\n      }\n    }])\n  }), _vm._v(\" \"), _c(\"bk-table-column\", {\n    attrs: {\n      label: _vm.$t(\"quality.最后执行时间\"),\n      prop: \"latestBuildStartTime\"\n    },\n    scopedSlots: _vm._u([{\n      key: \"default\",\n      fn: function (props) {\n        return [_c(\"span\", [_vm._v(_vm._s(!props.row.latestBuildStartTime ? \"-\" : _vm.localConvertTime(props.row.latestBuildStartTime)))])];\n      }\n    }])\n  })], 1)], 1), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"footer\"\n  }, [_c(\"button\", {\n    staticClass: \"bk-button bk-primary\",\n    attrs: {\n      type: \"button\"\n    },\n    on: {\n      click: function ($event) {\n        return _vm.confirm();\n      }\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"quality.确认\")))]), _vm._v(\" \"), _c(\"button\", {\n    staticClass: \"bk-button bk-default\",\n    attrs: {\n      type: \"button\"\n    },\n    on: {\n      click: function ($event) {\n        return _vm.cancel();\n      }\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"quality.取消\")))])])])]);\n};\nvar pipeline_listvue_type_template_id_4da782a6_scoped_true_staticRenderFns = [];\npipeline_listvue_type_template_id_4da782a6_scoped_true_render._withStripped = true;\n\n;// CONCATENATED MODULE: ./src/components/devops/pipeline-list.vue?vue&type=template&id=4da782a6&scoped=true\n\n// EXTERNAL MODULE: ./src/utils/util.js\nvar util = __webpack_require__(7716);\n;// CONCATENATED MODULE: ../node_modules/babel-loader/lib/index.js!../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/devops/pipeline-list.vue?vue&type=script&lang=js\n\n\n/* harmony default export */ const pipeline_listvue_type_script_lang_js = ({\n  props: {\n    isShow: {\n      type: Boolean,\n      default: false\n    },\n    selectedPielines: {\n      type: Array,\n      default: []\n    }\n  },\n  data() {\n    return {\n      showPipelineList: false,\n      loading: false,\n      isInit: false,\n      sortType: '',\n      pipelineList: [],\n      localSelected: [],\n      pipelineViewList: [],\n      pagination: {\n        current: 1,\n        count: 0,\n        limit: 10,\n        showLimit: false\n      },\n      pipelineListConf: {\n        closeIcon: false,\n        hasHeader: false,\n        hasFooter: false,\n        quickClose: false\n      }\n    };\n  },\n  computed: {\n    projectId() {\n      return this.$route.params.projectId;\n    }\n  },\n  watch: {\n    isShow(newVal) {\n      this.showPipelineList = newVal;\n      if (newVal) {\n        this.isInit = true;\n        this.pagination.current = 1;\n        this.requestList(this.pagination.current, this.pagination.limit);\n      } else {\n        this.searchName = '';\n        this.sortType = '';\n      }\n    },\n    pipelineList: {\n      deep: true,\n      handler(val) {\n        this.allNodeSelected = val.every(item => {\n          return item.isSelected;\n        });\n      }\n    },\n    sortType(newVal) {\n      if (this.isShow) {\n        this.pagination.current = 1;\n        this.requestList(this.pagination.current, this.pagination.limit, true);\n      }\n    }\n  },\n  created() {\n    // this.requestViewList()\n  },\n  methods: {\n    // async requestViewList () {\n    //     try {\n    //         const res = await this.$store.dispatch('quality/requestPipelineViews', {\n    //             projectId: this.projectId\n    //         })\n\n    //         this.pipelineViewList.splice(0, this.pipelineViewList.length)\n\n    //         res.map(item => {\n    //             if (item.viewList.length) {\n    //                 this.pipelineViewList.push({\n    //                     name: item.label,\n    //                     children: item.viewList\n    //                 })\n    //             }\n    //         })\n    //     } catch (err) {\n    //         const message = err.message ? err.message : err\n    //         const theme = 'error'\n\n    //         this.$bkMessage({\n    //             message,\n    //             theme\n    //         })\n    //     }\n    // },\n    async requestList(page, pageSize, isPageTurn) {\n      const params = {\n        viewId: this.sortType || undefined,\n        keywords: this.searchName && this.searchName.trim(),\n        page,\n        pageSize\n      };\n      if (!isPageTurn) {\n        this.localSelected = JSON.parse(JSON.stringify(this.selectedPielines));\n      }\n      this.loading = true;\n      try {\n        const res = await this.$store.dispatch('quality/requestViewPipelines', {\n          projectId: this.projectId,\n          params\n        });\n        if (res.records) {\n          this.pipelineList.splice(0, this.pipelineList.length, ...(res.records || []));\n          this.localSelected.forEach(selection => {\n            const matchItem = this.pipelineList.find(val => val.pipelineId === selection);\n            if (matchItem) {\n              this.$refs.effectPipeline.toggleRowSelection(matchItem, true);\n            }\n          });\n          this.pagination.count = res.count;\n        }\n      } catch (err) {\n        const message = err.message ? err.message : err;\n        const theme = 'error';\n        this.$bkMessage({\n          message,\n          theme\n        });\n      } finally {\n        this.loading = false;\n      }\n    },\n    handlePageChange(page) {\n      this.pagination.current = page;\n      this.requestList(this.pagination.current, this.pagination.limit, true);\n    },\n    selectItem(selection, row) {\n      const curPageData = this.localSelected.filter(item => !this.pipelineList.some(pipeline => pipeline.pipelineId === item));\n      this.localSelected.splice(0, this.localSelected.length);\n      selection.map(item => this.localSelected.push(item.pipelineId));\n      this.localSelected = this.localSelected.concat(curPageData);\n    },\n    selectAll(selection) {\n      if (selection.length) {\n        selection.forEach(item => {\n          if (!this.localSelected.includes(item.pipelineId)) {\n            this.localSelected.push(item.pipelineId);\n          }\n        });\n      } else {\n        this.localSelected = this.localSelected.filter(item => !this.pipelineList.some(pipeline => item === pipeline.pipelineId));\n      }\n    },\n    toSearchPipeline() {\n      this.pagination.current = 1;\n      this.requestList(this.pagination.current, this.pagination.limit, true);\n    },\n    /**\r\n     * 处理时间格式\r\n     */\n    localConvertTime(timestamp) {\n      return (0,util/* convertTime */.t)(timestamp);\n    },\n    confirm() {\n      this.$emit('comfire', this.localSelected);\n    },\n    cancel() {\n      this.$emit('close');\n    }\n  }\n});\n;// CONCATENATED MODULE: ./src/components/devops/pipeline-list.vue?vue&type=script&lang=js\n /* harmony default export */ const devops_pipeline_listvue_type_script_lang_js = (pipeline_listvue_type_script_lang_js); \n// EXTERNAL MODULE: ../node_modules/mini-css-extract-plugin/dist/loader.js??clonedRuleSet-3.use[0]!./node_modules/css-loader/dist/cjs.js!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/sass-loader/dist/cjs.js!../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/devops/pipeline-list.vue?vue&type=style&index=0&id=4da782a6&prod&lang=scss&scoped=true\nvar pipeline_listvue_type_style_index_0_id_4da782a6_prod_lang_scss_scoped_true = __webpack_require__(6758);\n;// CONCATENATED MODULE: ./src/components/devops/pipeline-list.vue?vue&type=style&index=0&id=4da782a6&prod&lang=scss&scoped=true\n\n;// CONCATENATED MODULE: ./src/components/devops/pipeline-list.vue\n\n\n\n;\n\n\n/* normalize component */\n\nvar pipeline_list_component = (0,componentNormalizer/* default */.A)(\n  devops_pipeline_listvue_type_script_lang_js,\n  pipeline_listvue_type_template_id_4da782a6_scoped_true_render,\n  pipeline_listvue_type_template_id_4da782a6_scoped_true_staticRenderFns,\n  false,\n  null,\n  \"4da782a6\",\n  null\n  \n)\n\n/* harmony default export */ const pipeline_list = (pipeline_list_component.exports);\n;// CONCATENATED MODULE: ../node_modules/babel-loader/lib/index.js!../node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[3]!../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/devops/template-list.vue?vue&type=template&id=0d2bbbb2\nvar template_listvue_type_template_id_0d2bbbb2_render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c(\"bk-dialog\", {\n    attrs: {\n      width: \"900\",\n      position: {\n        top: 100\n      },\n      \"ext-cls\": \"template-list-wrapper\",\n      \"close-icon\": _vm.templateListConf.closeIcon,\n      \"show-footer\": _vm.templateListConf.hasFooter\n    },\n    model: {\n      value: _vm.showTemplateList,\n      callback: function ($$v) {\n        _vm.showTemplateList = $$v;\n      },\n      expression: \"showTemplateList\"\n    }\n  }, [_c(\"div\", {\n    directives: [{\n      name: \"bkloading\",\n      rawName: \"v-bkloading\",\n      value: {\n        isLoading: _vm.loading\n      },\n      expression: \"{\\n        isLoading: loading\\n    }\"\n    }]\n  }, [_c(\"div\", {\n    staticClass: \"template-list-header\"\n  }, [_c(\"div\", {\n    staticClass: \"title\"\n  }, [_vm._v(_vm._s(_vm.$t(\"quality.选择模板\")))]), _vm._v(\" \"), _c(\"div\", [_c(\"i\", {\n    staticClass: \"devops-icon icon-close\",\n    staticStyle: {\n      color: \"#C3CDD7\"\n    },\n    on: {\n      click: function ($event) {\n        return _vm.cancel();\n      }\n    }\n  })])]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"query-template-row\"\n  }, [_c(\"span\", {\n    staticClass: \"template-prompt\"\n  }, [_vm._v(_vm._s(_vm.$t(\"quality.选中后将对该模板当前和后续实例化的流水线生效\")))]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"search-input-row\"\n  }, [_c(\"input\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.searchName,\n      expression: \"searchName\"\n    }],\n    staticClass: \"bk-form-input\",\n    attrs: {\n      type: \"text\"\n    },\n    domProps: {\n      value: _vm.searchName\n    },\n    on: {\n      keyup: function ($event) {\n        if (!$event.type.indexOf(\"key\") && _vm._k($event.keyCode, \"enter\", 13, $event.key, \"Enter\")) return null;\n        return _vm.toSearchPipeline();\n      },\n      input: function ($event) {\n        if ($event.target.composing) return;\n        _vm.searchName = $event.target.value;\n      }\n    }\n  }), _vm._v(\" \"), _c(\"i\", {\n    staticClass: \"devops-icon icon-search\",\n    on: {\n      click: function ($event) {\n        return _vm.toSearchPipeline();\n      }\n    }\n  })])]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"template-content\"\n  }, [_c(\"bk-table\", {\n    ref: \"effectTemplate\",\n    staticClass: \"effect-pipeline-table\",\n    attrs: {\n      size: \"small\",\n      data: _vm.templateList,\n      \"empty-text\": _vm.$t(\"quality.暂无数据\"),\n      pagination: _vm.pagination\n    },\n    on: {\n      \"page-change\": _vm.handlePageChange,\n      select: _vm.selectItem,\n      \"select-all\": _vm.selectAll\n    }\n  }, [_c(\"bk-table-column\", {\n    attrs: {\n      type: \"selection\",\n      width: \"60\",\n      align: \"center\"\n    }\n  }), _vm._v(\" \"), _c(\"bk-table-column\", {\n    attrs: {\n      label: _vm.$t(\"quality.模板名称\"),\n      prop: \"name\",\n      width: \"260\"\n    },\n    scopedSlots: _vm._u([{\n      key: \"default\",\n      fn: function (props) {\n        return [_c(\"span\", {\n          attrs: {\n            title: props.row.name\n          }\n        }, [_vm._v(_vm._s(props.row.name))])];\n      }\n    }])\n  }), _vm._v(\" \"), _c(\"bk-table-column\", {\n    attrs: {\n      label: _vm.$t(\"quality.来源\"),\n      prop: \"templateType\"\n    },\n    scopedSlots: _vm._u([{\n      key: \"default\",\n      fn: function (props) {\n        return [_c(\"span\", [_vm._v(_vm._s(_vm.templateTypeFilter(props.row.templateType)))])];\n      }\n    }])\n  }), _vm._v(\" \"), _c(\"bk-table-column\", {\n    attrs: {\n      label: _vm.$t(\"quality.关联代码库\"),\n      width: \"320\"\n    },\n    scopedSlots: _vm._u([{\n      key: \"default\",\n      fn: function (props) {\n        return [_c(\"section\", {\n          staticClass: \"codelib-box\",\n          attrs: {\n            title: _vm.handleFormat(props.row.associateCodes)\n          }\n        }, _vm._l((props.row.associateCodes || []).slice(0, 3), function (entry, eIndex) {\n          return _c(\"div\", {\n            key: eIndex,\n            staticClass: \"codelib-item\"\n          }, [_vm._v(_vm._s(entry))]);\n        }), 0)];\n      }\n    }])\n  }), _vm._v(\" \"), _c(\"bk-table-column\", {\n    attrs: {\n      label: _vm.$t(\"quality.流水线实例\"),\n      prop: \"associatePipelines\"\n    },\n    scopedSlots: _vm._u([{\n      key: \"default\",\n      fn: function (props) {\n        return [_c(\"a\", {\n          staticClass: \"instance-count\",\n          attrs: {\n            target: \"_blank\",\n            href: `/console/pipeline/${_vm.projectId}/template/${props.row.templateId}/instance`\n          }\n        }, [_vm._v(_vm._s(props.row.associatePipelines.length) + \"\\n                        \")])];\n      }\n    }])\n  })], 1)], 1), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"footer\"\n  }, [_c(\"button\", {\n    staticClass: \"bk-button bk-primary\",\n    attrs: {\n      type: \"button\"\n    },\n    on: {\n      click: function ($event) {\n        return _vm.confirm();\n      }\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"quality.确认\")))]), _vm._v(\" \"), _c(\"button\", {\n    staticClass: \"bk-button bk-default\",\n    attrs: {\n      type: \"button\"\n    },\n    on: {\n      click: function ($event) {\n        return _vm.cancel();\n      }\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"quality.取消\")))])])])]);\n};\nvar template_listvue_type_template_id_0d2bbbb2_staticRenderFns = [];\ntemplate_listvue_type_template_id_0d2bbbb2_render._withStripped = true;\n\n;// CONCATENATED MODULE: ./src/components/devops/template-list.vue?vue&type=template&id=0d2bbbb2\n\n;// CONCATENATED MODULE: ../node_modules/babel-loader/lib/index.js!../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/devops/template-list.vue?vue&type=script&lang=js\n\n/* harmony default export */ const template_listvue_type_script_lang_js = ({\n  props: {\n    isShow: {\n      type: Boolean,\n      default: false\n    },\n    selectedTemplates: {\n      type: Array,\n      default: []\n    }\n  },\n  data() {\n    return {\n      showTemplateList: false,\n      loading: false,\n      sortType: '',\n      templateList: [],\n      localSelected: [],\n      pagination: {\n        current: 1,\n        count: 0,\n        limit: 10,\n        showLimit: false\n      },\n      templateListConf: {\n        closeIcon: false,\n        hasHeader: false,\n        hasFooter: false,\n        quickClose: false\n      }\n    };\n  },\n  computed: {\n    projectId() {\n      return this.$route.params.projectId;\n    }\n  },\n  watch: {\n    isShow(newVal) {\n      this.showTemplateList = newVal;\n      if (newVal) {\n        this.pagination.current = 1;\n        this.requestList(this.pagination.current, this.pagination.limit);\n      } else {\n        this.searchName = '';\n      }\n    }\n  },\n  methods: {\n    handleFormat(codes) {\n      let tips = '';\n      codes.forEach(item => {\n        tips += `${item}\\n`;\n      });\n      return tips;\n    },\n    templateTypeFilter(val) {\n      let res = '';\n      switch (val) {\n        case 'constraint':\n        case 'CONSTRAINT':\n          res = this.$t('quality.研发商店');\n          break;\n        default:\n          res = this.$t('quality.自定义');\n          break;\n      }\n      return res;\n    },\n    async requestList(page, pageSize, isPageTurn) {\n      const params = {\n        keywords: this.searchName && this.searchName.trim(),\n        page,\n        pageSize\n      };\n      if (!isPageTurn) {\n        this.localSelected = JSON.parse(JSON.stringify(this.selectedTemplates));\n      }\n      this.loading = true;\n      try {\n        const res = await this.$store.dispatch('quality/requestPipelineTemplate', {\n          projectId: this.projectId,\n          params\n        });\n        if (res.models.length) {\n          this.templateList.splice(0, this.templateList.length, ...(res.models || []));\n          this.localSelected.forEach(selection => {\n            const matchItem = this.templateList.find(val => val.templateId === selection);\n            if (matchItem) {\n              this.$refs.effectTemplate.toggleRowSelection(matchItem, true);\n            }\n          });\n          this.pagination.count = res.count;\n        }\n      } catch (err) {\n        const message = err.message ? err.message : err;\n        const theme = 'error';\n        this.$bkMessage({\n          message,\n          theme\n        });\n      } finally {\n        this.loading = false;\n      }\n    },\n    handlePageChange(page) {\n      this.pagination.current = page;\n      this.requestList(this.pagination.current, this.pagination.limit, true);\n    },\n    selectItem(selection, row) {\n      const curPageData = this.localSelected.filter(item => !this.templateList.some(template => template.templateId === item));\n      this.localSelected.splice(0, this.localSelected.length);\n      selection.map(item => this.localSelected.push(item.templateId));\n      this.localSelected = this.localSelected.concat(curPageData);\n    },\n    selectAll(selection) {\n      if (selection.length) {\n        selection.forEach(item => {\n          if (!this.localSelected.includes(item.templateId)) {\n            this.localSelected.push(item.templateId);\n          }\n        });\n      } else {\n        this.localSelected = this.localSelected.filter(item => !this.templateList.some(pipeline => item === pipeline.templateId));\n      }\n    },\n    toSearchPipeline() {\n      this.pagination.current = 1;\n      this.requestList(this.pagination.current, this.pagination.limit, true);\n    },\n    confirm() {\n      this.$emit('comfire', this.localSelected);\n    },\n    cancel() {\n      this.$emit('close');\n    }\n  }\n});\n;// CONCATENATED MODULE: ./src/components/devops/template-list.vue?vue&type=script&lang=js\n /* harmony default export */ const devops_template_listvue_type_script_lang_js = (template_listvue_type_script_lang_js); \n// EXTERNAL MODULE: ../node_modules/mini-css-extract-plugin/dist/loader.js??clonedRuleSet-3.use[0]!./node_modules/css-loader/dist/cjs.js!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/sass-loader/dist/cjs.js!../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/devops/template-list.vue?vue&type=style&index=0&id=0d2bbbb2&prod&lang=scss\nvar template_listvue_type_style_index_0_id_0d2bbbb2_prod_lang_scss = __webpack_require__(1756);\n;// CONCATENATED MODULE: ./src/components/devops/template-list.vue?vue&type=style&index=0&id=0d2bbbb2&prod&lang=scss\n\n;// CONCATENATED MODULE: ./src/components/devops/template-list.vue\n\n\n\n;\n\n\n/* normalize component */\n\nvar template_list_component = (0,componentNormalizer/* default */.A)(\n  devops_template_listvue_type_script_lang_js,\n  template_listvue_type_template_id_0d2bbbb2_render,\n  template_listvue_type_template_id_0d2bbbb2_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ const template_list = (template_list_component.exports);\n// EXTERNAL MODULE: ./src/utils/i18nImages.js\nvar i18nImages = __webpack_require__(8386);\n// EXTERNAL MODULE: ./src/utils/permission.js\nvar permission = __webpack_require__(9203);\n// EXTERNAL MODULE: external \"Vuex\"\nvar external_Vuex_ = __webpack_require__(9335);\n;// CONCATENATED MODULE: ../node_modules/babel-loader/lib/index.js!../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/views/create_rules.vue?vue&type=script&lang=js\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ const create_rulesvue_type_script_lang_js = ({\n  components: {\n    createGroup: create_group/* default */.A,\n    pipelineList: pipeline_list,\n    TemplateList: template_list,\n    metadataPanel: metadata_panel,\n    staffInput: StaffInput/* default */.A,\n    UserInput: UserInput/* default */.A,\n    emptyTips: emptyTips\n  },\n  data() {\n    return {\n      hasPermission: true,\n      showContent: false,\n      showPipelineList: false,\n      showTemplateList: false,\n      tableLoading: false,\n      isDropdownShow: false,\n      isInit: false,\n      searchKey: '',\n      panelType: '',\n      curFastType: '',\n      lastClickCount: '',\n      title: this.$t('quality.创建红线规则'),\n      beforeSiteImg: i18nImages/* default */.A.beforeSiteImage[this.$i18n.locale],\n      afterSiteImg: i18nImages/* default */.A.afterSiteImage[this.$i18n.locale],\n      templateName: [this.$t('quality.日常构建'), this.$t('quality.版本转测'), this.$t('quality.发布上线')],\n      optionBoolean: [{\n        label: this.$t('quality.是'),\n        value: 'true'\n      }, {\n        label: this.$t('quality.否'),\n        value: 'false'\n      }],\n      groupList: [],\n      fastTypeRuleList: [],\n      selectedPipelines: [],\n      selectedTemplates: [],\n      pipelineSetting: {},\n      nodeSelectConf: {\n        title: '',\n        isShow: false,\n        hasFooter: false\n      },\n      createGroupForm: {\n        idEdit: false,\n        name: '',\n        internal_list: [],\n        external_list: '',\n        desc: ''\n      },\n      dialogLoading: {\n        isLoading: false,\n        title: ''\n      },\n      errorHandler: {\n        nameError: false\n      },\n      formErrors: {\n        gateSiteError: false\n      },\n      pipelineSelectConf: {\n        selected: [],\n        searchable: true,\n        searchKey: 'alias'\n      },\n      loading: {\n        isLoading: false,\n        title: ''\n      },\n      sideSliderConfig: {\n        show: false,\n        title: this.$t('quality.指标选择'),\n        quickClose: true,\n        width: 640,\n        value: '',\n        loading: {\n          isLoading: false,\n          title: ''\n        }\n      },\n      handlerList: {\n        LT: '<',\n        LE: '<=',\n        EQ: '=',\n        GT: '>',\n        GE: '>='\n      },\n      localCreateForm: {},\n      baseForm: {\n        name: '',\n        gatewayId: '',\n        desc: '',\n        indicators: [],\n        controlPoint: '',\n        controlPointName: '',\n        controlPointPosition: '',\n        availablePosition: [],\n        pipelineList: [],\n        operation: 'END',\n        notifyTypeList: [],\n        notifyGroupList: [],\n        notifyUserList: [],\n        auditUserList: [],\n        auditTimeoutMinutes: ''\n      },\n      createRuleForm: {},\n      // 权限配置\n      emptyTipsConfig: {\n        title: this.$t('quality.没有权限'),\n        desc: this.$t('quality.你在该项目下没有【创建】拦截规则权限，请切换项目访问或申请'),\n        btns: [{\n          type: 'primary',\n          size: 'normal',\n          handler: this.changeProject,\n          text: this.$t('quality.切换项目')\n        }, {\n          type: 'success',\n          size: 'normal',\n          handler: this.goToApplyPerm,\n          text: this.$t('quality.去申请权限')\n        }]\n      },\n      customRuleId: {\n        getMessage: field => this.$t('quality.开头必须是英文字母，中间可以包含英文，数字，中划线'),\n        validate: value => /^[a-zA-Z]([a-z|A-Z|0-9|-]+)*$/.test(value)\n      }\n    };\n  },\n  computed: {\n    ...(0,external_Vuex_.mapGetters)('quality', ['getUserGroup']),\n    projectId() {\n      return this.$route.params.projectId;\n    },\n    ruleId() {\n      return this.$route.params.ruleId;\n    },\n    canRemove() {\n      return this.createRuleForm.indicators.length === 1;\n    },\n    includeOpenINdicator() {\n      return this.createRuleForm.indicators.length && this.createRuleForm.indicators.some(item => item.tag === 'TENCENTOPEN');\n    },\n    currentINdicators() {\n      const target = this.createRuleForm.indicators.map(item => item.cnName);\n      return target.join('、');\n    },\n    isExtendTx() {\n      return \"tencent\" === 'tencent';\n    },\n    noticeTypeList() {\n      const list = [{\n        name: 'work-wechat',\n        value: 'RTX',\n        isChecked: false\n      }, {\n        name: 'email',\n        value: 'EMAIL',\n        isChecked: false\n      }];\n      if (!this.isExtendTx) {\n        list.splice(0, 2);\n      }\n      return list;\n    }\n  },\n  watch: {\n    projectId(val) {\n      this.$router.push({\n        name: 'qualityOverview',\n        params: {\n          projectId: this.projectId\n        }\n      });\n    },\n    getUserGroup(val) {\n      val.forEach(item => {\n        if (this.createGroupForm.internal_list.indexOf(item) === -1) {\n          this.createGroupForm.internal_list.push(item);\n        }\n      });\n    },\n    'createRuleForm.indicators.length'(val) {\n      if (val && !this.isInit && this.selectedPipelines.length) {\n        this.checkPipelineAtom(this.selectedPipelines);\n      }\n      if (val && !this.isInit && this.selectedTemplates.length) {\n        this.checkTemplateAtom(this.selectedTemplates);\n      }\n    },\n    'createRuleForm.controlPoint'(newVal, oldVal) {\n      if (newVal && !this.isInit && this.selectedPipelines.length) {\n        this.checkPipelineAtom(this.selectedPipelines);\n      }\n      if (newVal && !this.isInit && this.selectedTemplates.length) {\n        this.checkTemplateAtom(this.selectedTemplates);\n      }\n    }\n  },\n  async created() {\n    this.addLeaveListenr();\n    if (this.ruleId) {\n      this.title = this.$t('quality.编辑红线规则');\n      this.initData();\n      await this.requestRuleDetail();\n    } else {\n      this.requestHasPermission();\n      this.createRuleForm = JSON.parse(JSON.stringify(this.baseForm));\n      if ((0,util/* getQueryString */.eA)('indicator')) {\n        this.requestIndicatorDetail((0,util/* getQueryString */.eA)('indicator'));\n      } else if ((0,util/* getQueryString */.eA)('pipelineId') && (0,util/* getQueryString */.eA)('element')) {\n        this.getPipelineDetail((0,util/* getQueryString */.eA)('pipelineId'));\n        this.getPipelineControlPoint((0,util/* getQueryString */.eA)('element'));\n      } else if ((0,util/* getQueryString */.eA)('templateId') && (0,util/* getQueryString */.eA)('element')) {\n        this.getTemplateDetail((0,util/* getQueryString */.eA)('templateId'));\n        this.getPipelineControlPoint((0,util/* getQueryString */.eA)('element'));\n      }\n    }\n  },\n  beforeDestroy() {\n    this.removeLeaveListenr();\n  },\n  mounted() {\n    this.$nextTick(() => {\n      this.$validator.extend('customRuleId', this.customRuleId);\n    });\n  },\n  methods: {\n    changeProject() {\n      this.iframeUtil.toggleProjectMenu(true);\n    },\n    goToApplyPerm() {\n      this.handleNoPermission({\n        projectId: this.projectId,\n        resourceType: permission/* RULE_RESOURCE_TYPE */.XX,\n        resourceCode: this.projectId,\n        action: permission/* RULE_RESOURCE_ACTION */.Jh.CREATE\n      });\n    },\n    addLeaveListenr() {\n      window.addEventListener('beforeunload', this.leaveSure);\n    },\n    removeLeaveListenr() {\n      window.removeEventListener('beforeunload', this.leaveSure);\n    },\n    leaveSure(e) {\n      e.returnValue = this.$t('quality.离开后，新编辑的数据将丢失');\n      return this.$t('quality.离开后，新编辑的数据将丢失');\n    },\n    triggerHandler(type) {\n      this.$refs.dropdown.hide();\n      if (!this.createRuleForm.indicators.length) {\n        this.$bkMessage({\n          message: this.$t('quality.请先选择指标'),\n          theme: 'error'\n        });\n      } else if (type === 'pipeline') {\n        this.showPipelineList = true;\n      } else if (type === 'template') {\n        this.showTemplateList = true;\n      }\n    },\n    changeFastType(data) {\n      const target = JSON.parse(JSON.stringify(data));\n      if (this.curFastType === target.hashId) {\n        this.comfireInfo(target, 'cancel');\n      } else if (JSON.stringify(this.createRuleForm) !== JSON.stringify(this.baseForm)) {\n        this.comfireInfo(target, 'comfire');\n      } else {\n        this.curFastType = target.hashId;\n        (0,esm_extends/* default */.A)(this.createRuleForm, target, {});\n        this.createRuleForm.indicators.forEach(item => {\n          item.operationList = item.operationList.map(operation => {\n            return {\n              label: this.handlerList[operation],\n              value: operation\n            };\n          });\n        });\n        this.createRuleForm.controlPointPosition = this.createRuleForm.controlPointPosition.name;\n        this.createRuleForm.pipelineList = [];\n        this.selectedPipelines = [];\n        this.selectedTemplates = [];\n      }\n    },\n    comfireInfo(tpl, type) {\n      const h = this.$createElement;\n      const isComfire = type === 'comfire';\n      const title = isComfire ? this.$t('quality.使用{0}红线模板', [tpl.name]) : this.$t('quality.取消使用{0}红线模板', [tpl.name]);\n      const msg = isComfire ? this.$t('quality.确认使用后，之前填写的信息将会被覆盖。') : this.$t('quality.取消使用后，之前填写的信息将会被清空。');\n      const content = h('p', {\n        style: {\n          textAlign: 'center'\n        }\n      }, msg);\n      this.$bkInfo({\n        title: title,\n        subHeader: content,\n        confirmFn: async () => {\n          if (isComfire) {\n            this.curFastType = tpl.hashId;\n            (0,esm_extends/* default */.A)(this.createRuleForm, tpl, {});\n            this.createRuleForm.controlPointPosition = this.createRuleForm.controlPointPosition.name;\n            this.createRuleForm.pipelineList = [];\n            this.selectedPipelines = [];\n            this.selectedTemplates = [];\n            this.createRuleForm.indicators.forEach(item => {\n              item.operationList = item.operationList.map(operation => {\n                return {\n                  label: this.handlerList[operation],\n                  value: operation\n                };\n              });\n            });\n          } else {\n            this.curFastType = '';\n            this.createRuleForm = JSON.parse(JSON.stringify(this.baseForm));\n          }\n        }\n      });\n    },\n    getIndicatorName(indicator) {\n      const enName = indicator.type === 'CUSTOM' ? `(${indicator.enName})` : '';\n      return `${indicator.cnName}${enName}`;\n    },\n    selectMetadata(index) {\n      this.lastClickCount = index;\n      this.sideSliderConfig.show = true;\n      this.searchKey = '';\n      this.sideSliderConfig.title = this.$t('quality.指标选择');\n      this.panelType = 'index';\n    },\n    reduceMetadata(indicator, index) {\n      if (indicator.tag === 'TENCENTOPEN') {\n        const h = this.$createElement;\n        const msg = this.$t('quality.该指标为腾讯开源指标，删除后若代码对外开源，将会有不合规的风险。');\n        const content = h('p', {\n          style: {\n            textAlign: 'center'\n          }\n        }, msg);\n        this.$bkInfo({\n          title: this.$t('quality.删除{0}指标', [indicator.cnName]),\n          subHeader: content,\n          confirmFn: async () => {\n            this.createRuleForm.indicators.splice(index, 1);\n          }\n        });\n      } else {\n        this.createRuleForm.indicators.splice(index, 1);\n      }\n    },\n    selectControlPoint() {\n      this.sideSliderConfig.show = true;\n      this.searchKey = '';\n      this.sideSliderConfig.title = this.$t('quality.控制点选择');\n      this.panelType = 'controlPoint';\n    },\n    async getPipelineDetail(pipelineId) {\n      this.loading.isLoading = true;\n      try {\n        const res = await this.$store.dispatch('quality/getPipelineDetail', {\n          projectId: this.projectId,\n          pipelineId\n        });\n        this.pipelineSetting = res;\n        this.createRuleForm.pipelineList.push({\n          pipelineId: res.pipelineId,\n          pipelineName: res.pipelineName,\n          elementCount: res.taskCount,\n          lackPointElement: [],\n          existElement: [],\n          isSetPipeline: true,\n          type: 'pipeline'\n        });\n        this.selectedPipelines.push(res.pipelineId);\n      } catch (err) {\n        const message = err.message ? err.message : err;\n        const theme = 'error';\n        this.$bkMessage({\n          message,\n          theme\n        });\n      } finally {\n        this.loading.isLoading = false;\n      }\n    },\n    async getTemplateDetail(templateId) {\n      this.loading.isLoading = true;\n      try {\n        const res = await this.$store.dispatch('quality/getTemplateDetail', {\n          projectId: this.projectId,\n          templateId\n        });\n        this.pipelineSetting = {\n          ...res,\n          templateId: templateId\n        };\n        this.createRuleForm.pipelineList.push({\n          templateId: templateId,\n          templateName: res.templateName,\n          lackPointElement: [],\n          existElement: [],\n          isSetPipeline: true,\n          type: 'template'\n        });\n        this.selectedTemplates.push(templateId);\n      } catch (err) {\n        const message = err.message ? err.message : err;\n        const theme = 'error';\n        this.$bkMessage({\n          message,\n          theme\n        });\n      } finally {\n        this.loading.isLoading = false;\n      }\n    },\n    async getPipelineControlPoint(element) {\n      this.loading.isLoading = true;\n      try {\n        const res = await this.$store.dispatch('quality/getControlPoint', {\n          element,\n          projectId: this.projectId\n        });\n\n        // 控制点处理\n        this.createRuleForm.controlPointName = res.name;\n        this.createRuleForm.availablePosition = res.availablePos;\n        this.createRuleForm.controlPointPosition = res.defaultPos.name;\n        this.createRuleForm.controlPoint = res.type;\n      } catch (err) {\n        const message = err.message ? err.message : err;\n        const theme = 'error';\n        this.$bkMessage({\n          message,\n          theme\n        });\n      } finally {\n        this.loading.isLoading = false;\n      }\n    },\n    async requestIndicatorDetail(indicator) {\n      try {\n        const res = await this.$store.dispatch('quality/requestIndicatorDetail', {\n          projectId: this.projectId,\n          indicatorId: indicator\n        });\n        res.operationList = res.operationList.map(operation => {\n          return {\n            label: this.handlerList[operation],\n            value: operation\n          };\n        });\n        this.createRuleForm.indicators.push(res);\n      } catch (err) {\n        const message = err.message ? err.message : err;\n        const theme = 'error';\n        this.$bkMessage({\n          message,\n          theme\n        });\n      }\n    },\n    async requestHasPermission() {\n      this.loading.isLoading = true;\n      try {\n        const res = await this.$store.dispatch('quality/requestPermission', {\n          projectId: this.projectId\n        });\n        this.hasPermission = res;\n        if (this.hasPermission) {\n          this.initData();\n        }\n      } catch (err) {\n        const message = err.message ? err.message : err;\n        const theme = 'error';\n        this.$bkMessage({\n          message,\n          theme\n        });\n      } finally {\n        setTimeout(() => {\n          this.loading.isLoading = false;\n        }, 1000);\n        this.showContent = true;\n      }\n    },\n    initData() {\n      this.requestGroupList();\n      this.requestRuleTemplate();\n    },\n    async requestGroupList() {\n      try {\n        const res = await this.$store.dispatch('quality/requestGroupList', {\n          projectId: this.projectId\n        });\n        res.records.forEach(item => {\n          if (!this.groupList.some(group => group.groupHashId === item.groupHashId)) {\n            this.groupList.push(item);\n          }\n        });\n      } catch (err) {\n        const message = err.message ? err.message : err;\n        const theme = 'error';\n        this.$bkMessage({\n          message,\n          theme\n        });\n      }\n    },\n    async requestRuleTemplate() {\n      try {\n        const res = await this.$store.dispatch('quality/requestRuleTemplate', {\n          projectId: this.projectId\n        });\n        this.fastTypeRuleList.splice(0, this.fastTypeRuleList.length);\n        if (res.length) {\n          res.forEach(item => {\n            this.fastTypeRuleList.push(item);\n          });\n        }\n      } catch (err) {\n        const message = err.message ? err.message : err;\n        const theme = 'error';\n        this.$bkMessage({\n          message,\n          theme\n        });\n      }\n    },\n    async requestRuleDetail() {\n      this.loading.isLoading = true;\n      this.isInit = true;\n      try {\n        const res = await this.$store.dispatch('quality/requestRuleDetail', {\n          projectId: this.projectId,\n          ruleHashId: this.ruleId\n        });\n        this.createRuleForm = JSON.parse(JSON.stringify(this.baseForm));\n        (0,esm_extends/* default */.A)(this.createRuleForm, res);\n\n        // 指标处理\n        this.createRuleForm.indicators.forEach(item => {\n          item.operationList = item.operationList.map(operation => {\n            return {\n              label: this.handlerList[operation],\n              value: operation\n            };\n          });\n        });\n\n        // 控制点处理\n        this.createRuleForm.controlPointName = this.createRuleForm.controlPoint.cnName;\n        this.createRuleForm.availablePosition = this.createRuleForm.controlPoint.availablePosition;\n        this.createRuleForm.controlPointPosition = this.createRuleForm.controlPoint.position.name;\n        this.createRuleForm.controlPoint = this.createRuleForm.controlPoint.name;\n\n        // 生效流水线处理\n        if (this.createRuleForm.range.length) {\n          const pipelineIds = this.createRuleForm.range.map(pipeline => pipeline.id);\n          this.checkPipelineAtom(pipelineIds);\n        }\n        if (this.createRuleForm.templateRange.length) {\n          const templateIds = this.createRuleForm.templateRange.map(template => template.id);\n          this.checkTemplateAtom(templateIds);\n        }\n\n        // 操作处理\n        if (this.createRuleForm.operation === 'END') {\n          this.createRuleForm.auditTimeoutMinutes = '';\n          this.createRuleForm.auditUserList = [];\n        }\n      } catch (err) {\n        const message = err.message ? err.message : err;\n        const theme = 'error';\n        this.$bkMessage({\n          message,\n          theme\n        });\n      } finally {\n        setTimeout(() => {\n          this.loading.isLoading = false;\n          this.isInit = false;\n        }, 1000);\n        this.showContent = true;\n      }\n    },\n    toRuleList() {\n      this.$router.push({\n        name: 'ruleList',\n        params: {\n          projectId: this.projectId\n        }\n      });\n    },\n    async comfirePipelineList(data) {\n      if (this.selectedPipelines.sort().toString() !== data.sort().toString()) {\n        this.checkPipelineAtom(data);\n      } else {\n        this.closePipelineList();\n      }\n    },\n    comfireTemplateList(data) {\n      if (this.selectedTemplates.sort().toString() !== data.sort().toString()) {\n        this.checkTemplateAtom(data);\n      } else {\n        this.closePipelineList();\n      }\n    },\n    closeTemplateList() {\n      this.showTemplateList = false;\n    },\n    async checkPipelineAtom(data) {\n      this.selectedPipelines = JSON.parse(JSON.stringify(data));\n      const params = {\n        projectId: this.projectId,\n        gatewayId: this.createRuleForm.gatewayId,\n        pipelineIds: data,\n        controlPointType: this.createRuleForm.controlPoint || '',\n        indicatorIds: []\n      };\n      this.createRuleForm.indicators.forEach(item => {\n        params.indicatorIds.push(item.hashId);\n      });\n      this.showPipelineList = false;\n      this.tableLoading = true;\n      try {\n        const res = await this.$store.dispatch('quality/requestRangePipeline', {\n          params\n        });\n        this.createRuleForm.pipelineList = this.createRuleForm.pipelineList.filter(item => item.type !== 'pipeline');\n        res.forEach(item => {\n          item.isRefresh = false;\n          item.type = 'pipeline';\n          if (this.pipelineSetting && item.pipelineId === this.pipelineSetting.pipelineId) {\n            item.pipelineId = this.pipelineSetting.pipelineId;\n            item.pipelineName = this.pipelineSetting.pipelineName;\n            item.lackPointElement = [];\n            item.existElement = [];\n            item.isSetPipeline = true;\n          }\n          this.createRuleForm.pipelineList.push(item);\n        });\n        this.tableLoading = false;\n      } catch (err) {\n        const message = err.message ? err.message : err;\n        const theme = 'error';\n        this.tableLoading = false;\n        this.$bkMessage({\n          message,\n          theme\n        });\n      }\n    },\n    async checkTemplateAtom(template) {\n      this.selectedTemplates = JSON.parse(JSON.stringify(template));\n      const params = {\n        projectId: this.projectId,\n        gatewayId: this.createRuleForm.gatewayId,\n        templateIds: template,\n        controlPointType: this.createRuleForm.controlPoint || '',\n        indicatorIds: []\n      };\n      this.createRuleForm.indicators.forEach(item => {\n        params.indicatorIds.push(item.hashId);\n      });\n      this.showTemplateList = false;\n      this.tableLoading = true;\n      try {\n        const res = await this.$store.dispatch('quality/requestRangeTemplate', {\n          params\n        });\n        this.createRuleForm.pipelineList = this.createRuleForm.pipelineList.filter(item => item.type !== 'template');\n        res.forEach(item => {\n          item.isRefresh = false;\n          item.type = 'template';\n          if (this.pipelineSetting && item.templateId === this.pipelineSetting.templateId) {\n            item.templateId = this.pipelineSetting.templateId;\n            item.templateName = this.pipelineSetting.templateName;\n            item.lackPointElement = [];\n            item.existElement = [];\n            item.isSetPipeline = true;\n          }\n          this.createRuleForm.pipelineList.push(item);\n        });\n        this.tableLoading = false;\n      } catch (err) {\n        const message = err.message ? err.message : err;\n        const theme = 'error';\n        this.tableLoading = false;\n        this.$bkMessage({\n          message,\n          theme\n        });\n      }\n    },\n    closePipelineList() {\n      this.showPipelineList = false;\n    },\n    handleChange(name, value) {\n      if (name === 'reviewer') {\n        this.createRuleForm.auditUserList = value;\n      } else if (name === 'attacher') {\n        this.createRuleForm.notifyUserList = value;\n      } else if (name === 'innerList') {\n        this.createGroupForm.internal_list = value;\n      }\n    },\n    toCreateGroup() {\n      this.createGroupForm = {\n        isEdit: false,\n        groupHashId: '',\n        name: '',\n        internal_list: [],\n        external_list: '',\n        desc: ''\n      };\n      this.nodeSelectConf.title = this.$t('quality.新增通知组');\n      this.nodeSelectConf.isShow = true;\n    },\n    validate() {\n      let errorCount = 0;\n      if (!this.createGroupForm.name) {\n        this.errorHandler.nameError = true;\n        errorCount++;\n      }\n      if (errorCount > 0) {\n        return false;\n      }\n      return true;\n    },\n    async confirmFn(params) {\n      let message, theme;\n      this.dialogLoading.isLoading = true;\n      try {\n        await this.$store.dispatch('quality/createUserGroups', {\n          projectId: this.projectId,\n          params\n        });\n        message = this.$t('quality.保存成功');\n        theme = 'success';\n        this.requestGroupList();\n        this.nodeSelectConf.isShow = false;\n      } catch (err) {\n        message = err.message ? err.message : err;\n        theme = 'error';\n      } finally {\n        this.$bkMessage({\n          message,\n          theme\n        });\n        this.dialogLoading.isLoading = false;\n      }\n    },\n    cancelFn() {\n      if (!this.dialogLoading.isLoading) {\n        this.nodeSelectConf.isShow = false;\n        this.errorHandler.nameError = false;\n      }\n    },\n    getPipelineStatus(list) {\n      return list.join('、');\n    },\n    checkAtomAsync(element) {\n      return element.some(item => item.params.asynchronous);\n    },\n    checkAtomCount(element) {\n      return element.filter(item => item.cnName === this.createRuleForm.controlPointName).some(item => item.count > 1);\n    },\n    updatePipelineStatus(pipelineId) {\n      const target = this.createRuleForm.pipelineList.map(item => {\n        return {\n          ...item,\n          isRefresh: pipelineId === item.pipelineId ? true : item.isRefresh\n        };\n      });\n      this.createRuleForm.pipelineList.splice(0, this.createRuleForm.pipelineList.length, ...target);\n    },\n    updateTemplateStatus(templateId) {\n      const target = this.createRuleForm.pipelineList.map(item => {\n        return {\n          ...item,\n          isRefresh: templateId === item.templateId ? true : item.isRefresh\n        };\n      });\n      this.createRuleForm.pipelineList.splice(0, this.createRuleForm.pipelineList.length, ...target);\n    },\n    handleRefresh() {\n      this.checkPipelineAtom(this.selectedPipelines);\n      this.checkTemplateAtom(this.selectedTemplates);\n    },\n    handleSearch() {\n      this.$refs.metadataPanel.toSearch();\n    },\n    getAsyncAtom(element) {\n      const target = [];\n      element.forEach(item => {\n        if (item.params.asynchronous) {\n          target.push(item.cnName);\n        }\n      });\n      return target.join('、');\n    },\n    handleMetadata(params) {\n      if (params.type === 'controlPoint') {\n        this.createRuleForm.controlPoint = params.data.type;\n        this.createRuleForm.controlPointName = params.data.name;\n        this.createRuleForm.availablePosition = params.data.availablePos;\n        this.createRuleForm.controlPointPosition = params.data.defaultPos.name;\n        this.sideSliderConfig.show = false;\n      } else {\n        const tempArr = [];\n        const tplData = JSON.parse(JSON.stringify(params.data));\n        tplData.forEach(item => {\n          const isExist = this.createRuleForm.indicators.some(val => val.hashId === item.hashId);\n          if (!isExist) {\n            item.operationList = item.operationList.map(operation => {\n              return {\n                label: this.handlerList[operation],\n                value: operation\n              };\n            });\n            tempArr.push(item);\n          }\n        });\n        const target = this.createRuleForm.indicators;\n        this.createRuleForm.indicators = [...target.slice(0, this.lastClickCount + 1), ...tempArr, ...target.slice(this.lastClickCount + 1, target.length)];\n      }\n      // this.sideSliderConfig.show = false\n    },\n    submitValidate() {\n      let errMsg = '';\n      const IntReg = /^([0-9]|[1-9][0-9]+)$/; // 自然数\n      const floatReg = /^\\d+(\\.\\d+)?$/; // 正浮点数\n      const timeout = /^([1-9]|[1-5]\\d|60)$/; // 0-60整数\n      const validThreshold = this.createRuleForm.indicators.some(item => {\n        return !item.operation || !item.threshold || item.thresholdType === 'INT' && !IntReg.test(item.threshold) || item.thresholdType === 'FLOAT' && !floatReg.test(item.threshold);\n      });\n      if (!this.createRuleForm.indicators.length) {\n        errMsg = this.$t('quality.请选择指标');\n      } else if (this.createRuleForm.indicators.length && validThreshold) {\n        errMsg = this.$t('quality.请填写正确的阈值');\n      } else if (!this.createRuleForm.controlPoint) {\n        errMsg = this.$t('quality.请选择控制点');\n      } else if (!this.createRuleForm.pipelineList.length) {\n        errMsg = this.$t('quality.请选择生效的流水线');\n      } else if (this.createRuleForm.operation === 'END' && !this.createRuleForm.notifyTypeList.length) {\n        errMsg = this.$t('quality.请选择通知方式');\n      } else if (this.createRuleForm.operation === 'AUDIT' && !this.createRuleForm.auditUserList.length) {\n        errMsg = this.$t('quality.请填写审核人');\n      } else if (this.createRuleForm.auditTimeoutMinutes && !timeout.test(this.createRuleForm.auditTimeoutMinutes)) {\n        errMsg = this.$t('quality.请填写60分钟以内的大于0的整数');\n      }\n      return errMsg;\n    },\n    getParams() {\n      const obj = {\n        name: this.createRuleForm.name,\n        gatewayId: this.createRuleForm.gatewayId,\n        desc: this.createRuleForm.desc,\n        indicatorIds: [],\n        controlPoint: this.createRuleForm.controlPoint,\n        controlPointPosition: this.createRuleForm.controlPointPosition,\n        range: [],\n        templateRange: [],\n        operation: this.createRuleForm.operation,\n        auditTimeoutMinutes: parseInt(this.createRuleForm.auditTimeoutMinutes) || undefined\n      };\n      this.createRuleForm.pipelineList.forEach(item => {\n        if (item.type === 'pipeline') {\n          obj.range.push(item.pipelineId);\n        } else {\n          obj.templateRange.push(item.templateId);\n        }\n      });\n      this.createRuleForm.indicators.forEach(item => {\n        obj.indicatorIds.push({\n          hashId: item.hashId,\n          operation: item.operation,\n          threshold: item.threshold\n        });\n      });\n      if (obj.operation === 'END') {\n        obj.notifyTypeList = this.createRuleForm.notifyTypeList;\n        obj.notifyGroupList = this.createRuleForm.notifyGroupList;\n        obj.notifyUserList = this.createRuleForm.notifyUserList;\n        obj.auditTimeoutMinutes = null;\n      } else {\n        obj.auditUserList = this.createRuleForm.auditUserList;\n      }\n      return obj;\n    },\n    submit() {\n      this.$validator.validateAll().then(async result => {\n        if (result) {\n          const isValid = this.submitValidate();\n          if (isValid) {\n            this.$bkMessage({\n              message: isValid,\n              theme: 'error'\n            });\n          } else {\n            let message, theme;\n            const params = this.getParams();\n            this.loading.isLoading = true;\n            try {\n              if (this.ruleId) {\n                await this.$store.dispatch('quality/editRule', {\n                  projectId: this.projectId,\n                  ruleHashId: this.ruleId,\n                  params\n                });\n                message = this.$t('quality.编辑规则成功');\n                theme = 'success';\n              } else {\n                await this.$store.dispatch('quality/createRule', {\n                  projectId: this.projectId,\n                  params\n                });\n                message = this.$t('quality.创建规则成功');\n                theme = 'success';\n              }\n              this.$bkMessage({\n                message,\n                theme\n              });\n            } catch (e) {\n              this.handleError(e, {\n                projectId: this.projectId,\n                resourceType: permission/* RULE_RESOURCE_TYPE */.XX,\n                resourceCode: this.ruleId || this.projectId,\n                action: permission/* RULE_RESOURCE_ACTION */.Jh[this.ruleId ? 'EDIT' : 'CREATE']\n              });\n            } finally {\n              this.isEditing = false;\n              this.loading.isLoading = false;\n              if (theme === 'success') this.toRuleList();\n            }\n          }\n        }\n      });\n    }\n  }\n});\n;// CONCATENATED MODULE: ./src/views/create_rules.vue?vue&type=script&lang=js\n /* harmony default export */ const views_create_rulesvue_type_script_lang_js = (create_rulesvue_type_script_lang_js); \n// EXTERNAL MODULE: ../node_modules/mini-css-extract-plugin/dist/loader.js??clonedRuleSet-3.use[0]!./node_modules/css-loader/dist/cjs.js!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/sass-loader/dist/cjs.js!../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/views/create_rules.vue?vue&type=style&index=0&id=966acdd6&prod&lang=scss\nvar create_rulesvue_type_style_index_0_id_966acdd6_prod_lang_scss = __webpack_require__(6559);\n;// CONCATENATED MODULE: ./src/views/create_rules.vue?vue&type=style&index=0&id=966acdd6&prod&lang=scss\n\n;// CONCATENATED MODULE: ./src/views/create_rules.vue\n\n\n\n;\n\n\n/* normalize component */\n\nvar create_rules_component = (0,componentNormalizer/* default */.A)(\n  views_create_rulesvue_type_script_lang_js,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ const create_rules = (create_rules_component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7434\n");

/***/ }),

/***/ 9843:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "admission-preview.b364a7d3892faeec32f3..png";

/***/ }),

/***/ 909:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "admission-preview_en.f874da93ca08bc6264c1..png";

/***/ }),

/***/ 4756:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "indicator-desc.f696eb9322387b34f617..png";

/***/ }),

/***/ 2540:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "indicator-desc_en.45071b260df226c71acf..png";

/***/ }),

/***/ 2650:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "prompt-preview.82adc0ded2ae62dd7bf4..png";

/***/ }),

/***/ 4430:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "prompt-preview_en.7f489154eadf3ae55ce0..png";

/***/ }),

/***/ 8102:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (/* binding */ _extends)\n/* harmony export */ });\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODEwMi5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGV2b3BzLXF1YWxpdHkvLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMuanM/NjU1NCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8102\n");

/***/ })

}]);