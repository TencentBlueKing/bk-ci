"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkdevops_environment"] = globalThis["webpackChunkdevops_environment"] || []).push([[863],{

/***/ 7716:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Dk: () => (/* binding */ copyText),\n/* harmony export */   eA: () => (/* binding */ getQueryString),\n/* harmony export */   nF: () => (/* binding */ throttle),\n/* harmony export */   t: () => (/* binding */ convertTime)\n/* harmony export */ });\n/* unused harmony exports isVNode, isInArray, isInlineElment, getActualTop, getActualLeft, addClass, removeClass, localizeConfig, findValByKeyValue, deepClone, converStrToNum, converStrToArr, convertStrToNumArr, convertMStoString, convertFileSize, isObject, mergeModules, getOuterHeight, getOuterWidth, getInnerWidth, deepCopy, hashID, getServiceLogoByPath, getAtomPath, getCookies */\n/* harmony import */ var core_js_modules_es_regexp_constructor_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7309);\n/* harmony import */ var core_js_modules_es_regexp_constructor_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_constructor_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3188);\n/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9297);\n/* harmony import */ var core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n/*\r\n * Tencent is pleased to support the open source community by making BK-CI 蓝鲸持续集成平台 available.\r\n *\r\n * Copyright (C) 2019 THL A29 Limited, a Tencent company.  All rights reserved.\r\n *\r\n * BK-CI 蓝鲸持续集成平台 is licensed under the MIT license.\r\n *\r\n * A copy of the MIT License is included in this file.\r\n *\r\n *\r\n * Terms of the MIT License:\r\n * ---------------------------------------------------\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\n\nfunction isVNode(node) {\n  return typeof node === 'object' && Object.prototype.hasOwnProperty.call(node, 'componentOptions');\n}\nfunction isInArray(ele, array) {\n  for (const item of array) {\n    if (item === ele) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction throttle(func) {\n  let interval = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;\n  let lastFunc;\n  let lastRan;\n  return function () {\n    const context = this;\n    const args = arguments;\n    if (!lastRan) {\n      func.apply(context, args);\n      lastRan = Date.now();\n    } else {\n      clearTimeout(lastFunc);\n      lastFunc = setTimeout(function () {\n        if (Date.now() - lastRan >= interval) {\n          func.apply(context, args);\n          lastRan = Date.now();\n        }\n      }, interval - (Date.now() - lastRan));\n    }\n  };\n}\nfunction isInlineElment(node) {\n  const inlineElements = ['a', 'abbr', 'acronym', 'b', 'bdo', 'big', 'br', 'cite', 'code', 'dfn', 'em', 'font', 'i', 'img', 'input', 'kbd', 'label', 'q', 's', 'samp', 'select', 'small', 'span', 'strike', 'strong', 'sub', 'sup', 'textarea', 'tt', 'u', 'var'];\n  const tag = node.tagName.toLowerCase();\n  const display = getComputedStyle(node).display;\n  if (isInArray(tag, inlineElements) && display === 'index' || display === 'inline') {\n    console.warn('Binding node is displayed as inline element. To avoid some unexpected rendering error, please set binding node displayed as block element.');\n    return true;\n  }\n  return false;\n}\n\n/**\r\n *  获取元素相对于页面的高度\r\n *  @param node {NodeElement} 指定的DOM元素\r\n */\nfunction getActualTop(node) {\n  let actualTop = node.offsetTop;\n  let current = node.offsetParent;\n  while (current !== null) {\n    actualTop += current.offsetTop;\n    current = current.offsetParent;\n  }\n  return actualTop;\n}\n\n/**\r\n *  获取元素相对于页面左侧的宽度\r\n *  @param node {NodeElement} 指定的DOM元素\r\n */\nfunction getActualLeft(node) {\n  let actualLeft = node.offsetLeft;\n  let current = node.offsetParent;\n  while (current !== null) {\n    actualLeft += current.offsetLeft;\n    current = current.offsetParent;\n  }\n  return actualLeft;\n}\n\n/**\r\n *  对元素添加样式类\r\n *  @param node {NodeElement} 指定的DOM元素\r\n *  @param className {String} 类名\r\n */\nfunction addClass(node, className) {\n  const classNames = className.split(' ');\n  if (node.nodeType === 1) {\n    if (!node.className && classNames.length === 1) {\n      node.className = className;\n    } else {\n      let setClass = ' ' + node.className + ' ';\n      classNames.forEach(cl => {\n        if (setClass.indexOf(' ' + cl + ' ') < 0) {\n          setClass += cl + ' ';\n        }\n      });\n      const rtrim = /^\\s+|\\s+$/;\n      node.className = setClass.replace(rtrim, '');\n    }\n  }\n}\n\n/**\r\n *  对元素删除样式类\r\n *  @param node {NodeElement} 指定的DOM元素\r\n *  @param className {String} 类名\r\n */\nfunction removeClass(node, className) {\n  const classNames = className.split(' ');\n  if (node.nodeType === 1) {\n    let setClass = ' ' + node.className + ' ';\n    classNames.forEach(cl => {\n      setClass = setClass.replace(' ' + cl + ' ', ' ');\n    });\n    const rtrim = /^\\s+|\\s+$/;\n    node.className = setClass.replace(rtrim, '');\n  }\n}\n\n/**\r\n *  将传入的配置项转成本地的对象\r\n *  @param config {Object} 传入的对象\r\n *  @return obj {Object} 本地化之后的对象\r\n */\nfunction localizeConfig(config) {\n  const obj = {};\n  for (const key in config) {\n    obj[key] = config[key];\n  }\n  return obj;\n}\n\n/**\r\n *  在一个元素为对象的数组中，根据oldKey: oldValue找到指定的数组元素，并返回该数组元素中指定key的value\r\n *  @param arr - 元素为对象的数组\r\n *  @param oldKey - 查找的key\r\n *  @param oldValue - 查找的value\r\n *  @param key - 需要返回的value的指定的key\r\n *  @return result - 找到的value值，未找到返回undefined\r\n */\nfunction findValByKeyValue(arr, oldKey, oldValue, key) {\n  let result;\n  for (const obj of arr) {\n    for (const _key in obj) {\n      if (_key === oldKey && obj[_key] === oldValue) {\n        result = obj[key];\n        break;\n      }\n    }\n  }\n  return result;\n}\nfunction deepClone(obj) {\n  const _obj = {};\n  for (const key in obj) {\n    if (obj[key].toString().toLowerCase() === '[object object]') {\n      _obj[key] = deepClone(obj[key]);\n    } else {\n      _obj[key] = key === 'text' ? '' : obj[key];\n    }\n  }\n  return _obj;\n}\n\n/**\r\n *  将字符串去掉指定内容之后转成数字\r\n *  @param {String} str - 需要转换的字符串\r\n *  @param {String} indicator - 需要被去掉的内容\r\n */\nfunction converStrToNum(str, indicator) {\n  const reg = new RegExp(indicator, 'g');\n  const $str = str.replace(reg, '');\n  return ~~$str;\n}\n\n/**\r\n *  将字符串根据indicator转成数组\r\n */\nfunction converStrToArr(str, indicator) {\n  return str.length ? str.split(indicator) : [];\n}\n\n/**\r\n * 将字符串根据indicator转成数组并将内容都转成Number类型（仅限数组内容均为数字的字符串）\r\n */\nfunction convertStrToNumArr(str, indicator) {\n  return converStrToArr(str, indicator).map(item => {\n    return ~~item;\n  });\n}\n\n/**\r\n *  将毫秒值转换成x时x分x秒的形式\r\n *  @param {Number} time - 时间的毫秒形式\r\n *  @return {String} str - 转换后的字符串\r\n */\nfunction convertMStoString(time) {\n  function getSeconds(sec) {\n    return `${sec}秒`;\n  }\n  function getMinutes(sec) {\n    if (sec / 60 >= 1) {\n      return `${Math.floor(sec / 60)}分${getSeconds(sec % 60)}`;\n    } else {\n      return getSeconds(sec);\n    }\n  }\n  function getHours(sec) {\n    if (sec / 3600 >= 1) {\n      return `${Math.floor(sec / 3600)}小时${getMinutes(sec % 3600)}`;\n    } else {\n      return getMinutes(sec);\n    }\n  }\n  function getDays(sec) {\n    if (sec / 86400 >= 1) {\n      return `${Math.floor(sec / 86400)}天${getHours(sec % 86400)}`;\n    } else {\n      return getHours(sec);\n    }\n  }\n  return time ? getDays(Math.floor(time / 1000)) : '0秒';\n}\nfunction prezero(num) {\n  num = Number(num);\n  if (num < 10) {\n    return '0' + num;\n  }\n  return num;\n}\nfunction convertTime(ms) {\n  const time = new Date(ms);\n  return `${time.getFullYear()}-${prezero(time.getMonth() + 1)}-${prezero(time.getDate())} ${prezero(time.getHours())}:${prezero(time.getMinutes())}:${prezero(time.getSeconds())}`;\n}\n\n/**\r\n *  转换文件大小\r\n */\nfunction convertFileSize(size, unit) {\n  const arr = ['B', 'KB', 'MB', 'GB', 'TB'];\n  const calcSize = size / 1024;\n  let index;\n  arr.some((item, _index) => {\n    if (unit === item) {\n      index = _index;\n      return true;\n    }\n    return false;\n  });\n  const next = arr[index + 1];\n  if (calcSize > 1024) {\n    if (!next) {\n      return `${calcSize.toFixed(2)}${unit}`;\n    } else {\n      return convertFileSize(calcSize, next);\n    }\n  } else {\n    return `${calcSize.toFixed(2)}${next || unit}`;\n  }\n}\nfunction isObject(o) {\n  return o !== null && typeof o === 'object' && !Array.isArray(o);\n}\nfunction mergeModules(target) {\n  for (var _len = arguments.length, modules = new Array(_len > 1 ? _len - 1 : 0), _key2 = 1; _key2 < _len; _key2++) {\n    modules[_key2 - 1] = arguments[_key2];\n  }\n  return modules.reduce((merged, mod) => {\n    Object.keys(mod).forEach(key => {\n      if (isObject(merged[key]) && isObject(mod[key])) {\n        merged[key] = {\n          ...merged[key],\n          ...mod[key]\n        };\n      }\n    });\n    return merged;\n  }, target);\n}\n\n/**\r\n * @param {String} selector\r\n * @param {DOM element} parent\r\n */\nconst getOuterHeight = (selector, parent) => {\n  const {\n    marginTop,\n    height,\n    marginBottom\n  } = getDOMRect(selector, parent);\n  return parseFloat(marginTop) + parseFloat(height) + parseFloat(marginBottom);\n};\n\n/**\r\n * @param {String} selector\r\n * @param {DOM element} parent\r\n */\nconst getOuterWidth = (selector, parent) => {\n  const {\n    marginLeft,\n    width,\n    marginRight\n  } = getDOMRect(selector, parent);\n  return parseFloat(marginLeft) + parseFloat(width) + parseFloat(marginRight);\n};\n\n/**\r\n * @param {String} selector\r\n * @param {DOM element} parent\r\n */\nconst getInnerWidth = (selector, parent) => {\n  const {\n    width\n  } = getDOMRect(selector, parent);\n  return parseFloat(width);\n};\nconst getDOMRect = (selector, parent) => {\n  const target = isDOMElement(selector) ? selector : parent ? parent.querySelector(selector) : document.querySelector(selector);\n  if (!target) {\n    return {};\n  }\n  const style = window.getComputedStyle(target);\n  return {\n    width: style.width,\n    height: style.height,\n    marginTop: style.marginTop,\n    marginBottom: style.marginBottom,\n    marginLeft: style.marginLeft,\n    marginRight: style.marginRight\n  };\n};\nconst isDOMElement = obj => {\n  return typeof HTMLElement === 'object' ? obj instanceof HTMLElement : obj && typeof obj === 'object' && obj !== null && obj.nodeType === 1 && typeof obj.nodeName === 'string';\n};\nconst deepCopy = obj => {\n  return JSON.parse(JSON.stringify(obj));\n};\nconst hashID = function () {\n  let length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 8;\n  let pos = 0;\n  let result = '';\n  while (pos < length) {\n    const n = Math.round(Math.random() * 126) + 33;\n    result += String.fromCharCode(n);\n    pos++;\n  }\n  return result;\n};\nfunction getServiceLogoByPath(link) {\n  return link.replace(/\\/?(devops\\/)?(\\w+)\\S*$/, '$2');\n}\nfunction getAtomPath() {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key3 = 0; _key3 < _len2; _key3++) {\n    args[_key3] = arguments[_key3];\n  }\n  return args.join('-');\n}\n\n/**\r\n *  获取url参数值\r\n */\nfunction getQueryString(name) {\n  const reg = new RegExp('(^|&)' + name + '=([^&]*)(&|$)', 'i');\n  const r = window.location.search.substr(1).match(reg);\n  if (r != null) return unescape(r[2]);\n  return null;\n}\n\n/**\r\n *  复制文本\r\n */\nconst copyText = text => {\n  const textarea = document.createElement('textarea');\n  document.body.appendChild(textarea);\n  textarea.value = text;\n  textarea.select();\n  if (document.execCommand('copy')) {\n    document.execCommand('copy');\n    document.body.removeChild(textarea);\n    return true;\n  } else {\n    console.warn(window.devops.$i18n.t('environment.browserNotSupport'));\n  }\n  return false;\n};\n\n// 获取 cookie object\nfunction getCookies() {\n  let strCookie = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.cookie;\n  if (!strCookie) {\n    return {};\n  }\n  const arrCookie = strCookie.split('; '); // 分割\n  const cookiesObj = {};\n  arrCookie.forEach(cookieStr => {\n    const arr = cookieStr.split('=');\n    const [key, value] = arr;\n    if (key) {\n      cookiesObj[key] = value;\n    }\n  });\n  return cookiesObj;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzcxNi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUdBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGV2b3BzLWVudmlyb25tZW50Ly4vc3JjL3V0aWxzL3V0aWwuanM/Y2EwMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiBUZW5jZW50IGlzIHBsZWFzZWQgdG8gc3VwcG9ydCB0aGUgb3BlbiBzb3VyY2UgY29tbXVuaXR5IGJ5IG1ha2luZyBCSy1DSSDok53psrjmjIHnu63pm4bmiJDlubPlj7AgYXZhaWxhYmxlLlxyXG4gKlxyXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTkgVEhMIEEyOSBMaW1pdGVkLCBhIFRlbmNlbnQgY29tcGFueS4gIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIEJLLUNJIOiTnemyuOaMgee7rembhuaIkOW5s+WPsCBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXHJcbiAqXHJcbiAqIEEgY29weSBvZiB0aGUgTUlUIExpY2Vuc2UgaXMgaW5jbHVkZWQgaW4gdGhpcyBmaWxlLlxyXG4gKlxyXG4gKlxyXG4gKiBUZXJtcyBvZiB0aGUgTUlUIExpY2Vuc2U6XHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxyXG4gKlxyXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cclxuICpcclxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXHJcbiAqL1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzVk5vZGUgKG5vZGUpIHtcclxuICAgIHJldHVybiB0eXBlb2Ygbm9kZSA9PT0gJ29iamVjdCcgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG5vZGUsICdjb21wb25lbnRPcHRpb25zJylcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzSW5BcnJheSAoZWxlLCBhcnJheSkge1xyXG4gICAgZm9yIChjb25zdCBpdGVtIG9mIGFycmF5KSB7XHJcbiAgICAgICAgaWYgKGl0ZW0gPT09IGVsZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZmFsc2VcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHRocm90dGxlIChmdW5jLCBpbnRlcnZhbCA9IDEwMDApIHtcclxuICAgIGxldCBsYXN0RnVuY1xyXG4gICAgbGV0IGxhc3RSYW5cclxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgY29uc3QgY29udGV4dCA9IHRoaXNcclxuICAgICAgICBjb25zdCBhcmdzID0gYXJndW1lbnRzXHJcbiAgICAgICAgaWYgKCFsYXN0UmFuKSB7XHJcbiAgICAgICAgICAgIGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncylcclxuICAgICAgICAgICAgbGFzdFJhbiA9IERhdGUubm93KClcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQobGFzdEZ1bmMpXHJcbiAgICAgICAgICAgIGxhc3RGdW5jID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoKERhdGUubm93KCkgLSBsYXN0UmFuKSA+PSBpbnRlcnZhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncylcclxuICAgICAgICAgICAgICAgICAgICBsYXN0UmFuID0gRGF0ZS5ub3coKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCBpbnRlcnZhbCAtIChEYXRlLm5vdygpIC0gbGFzdFJhbikpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNJbmxpbmVFbG1lbnQgKG5vZGUpIHtcclxuICAgIGNvbnN0IGlubGluZUVsZW1lbnRzID0gWydhJywgJ2FiYnInLCAnYWNyb255bScsICdiJywgJ2JkbycsICdiaWcnLCAnYnInLCAnY2l0ZScsICdjb2RlJywgJ2RmbicsICdlbScsICdmb250JywgJ2knLCAnaW1nJywgJ2lucHV0JywgJ2tiZCcsICdsYWJlbCcsICdxJywgJ3MnLCAnc2FtcCcsICdzZWxlY3QnLCAnc21hbGwnLCAnc3BhbicsICdzdHJpa2UnLCAnc3Ryb25nJywgJ3N1YicsICdzdXAnLCAndGV4dGFyZWEnLCAndHQnLCAndScsICd2YXInXVxyXG4gICAgY29uc3QgdGFnID0gKG5vZGUudGFnTmFtZSkudG9Mb3dlckNhc2UoKVxyXG4gICAgY29uc3QgZGlzcGxheSA9IGdldENvbXB1dGVkU3R5bGUobm9kZSkuZGlzcGxheVxyXG5cclxuICAgIGlmICgoaXNJbkFycmF5KHRhZywgaW5saW5lRWxlbWVudHMpICYmIGRpc3BsYXkgPT09ICdpbmRleCcpIHx8IGRpc3BsYXkgPT09ICdpbmxpbmUnKSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKCdCaW5kaW5nIG5vZGUgaXMgZGlzcGxheWVkIGFzIGlubGluZSBlbGVtZW50LiBUbyBhdm9pZCBzb21lIHVuZXhwZWN0ZWQgcmVuZGVyaW5nIGVycm9yLCBwbGVhc2Ugc2V0IGJpbmRpbmcgbm9kZSBkaXNwbGF5ZWQgYXMgYmxvY2sgZWxlbWVudC4nKVxyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBmYWxzZVxyXG59XHJcblxyXG4vKipcclxuICogIOiOt+WPluWFg+e0oOebuOWvueS6jumhtemdoueahOmrmOW6plxyXG4gKiAgQHBhcmFtIG5vZGUge05vZGVFbGVtZW50fSDmjIflrprnmoRET03lhYPntKBcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRBY3R1YWxUb3AgKG5vZGUpIHtcclxuICAgIGxldCBhY3R1YWxUb3AgPSBub2RlLm9mZnNldFRvcFxyXG4gICAgbGV0IGN1cnJlbnQgPSBub2RlLm9mZnNldFBhcmVudFxyXG5cclxuICAgIHdoaWxlIChjdXJyZW50ICE9PSBudWxsKSB7XHJcbiAgICAgICAgYWN0dWFsVG9wICs9IGN1cnJlbnQub2Zmc2V0VG9wXHJcbiAgICAgICAgY3VycmVudCA9IGN1cnJlbnQub2Zmc2V0UGFyZW50XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGFjdHVhbFRvcFxyXG59XHJcblxyXG4vKipcclxuICogIOiOt+WPluWFg+e0oOebuOWvueS6jumhtemdouW3puS+p+eahOWuveW6plxyXG4gKiAgQHBhcmFtIG5vZGUge05vZGVFbGVtZW50fSDmjIflrprnmoRET03lhYPntKBcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRBY3R1YWxMZWZ0IChub2RlKSB7XHJcbiAgICBsZXQgYWN0dWFsTGVmdCA9IG5vZGUub2Zmc2V0TGVmdFxyXG4gICAgbGV0IGN1cnJlbnQgPSBub2RlLm9mZnNldFBhcmVudFxyXG5cclxuICAgIHdoaWxlIChjdXJyZW50ICE9PSBudWxsKSB7XHJcbiAgICAgICAgYWN0dWFsTGVmdCArPSBjdXJyZW50Lm9mZnNldExlZnRcclxuICAgICAgICBjdXJyZW50ID0gY3VycmVudC5vZmZzZXRQYXJlbnRcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gYWN0dWFsTGVmdFxyXG59XHJcblxyXG4vKipcclxuICogIOWvueWFg+e0oOa3u+WKoOagt+W8j+exu1xyXG4gKiAgQHBhcmFtIG5vZGUge05vZGVFbGVtZW50fSDmjIflrprnmoRET03lhYPntKBcclxuICogIEBwYXJhbSBjbGFzc05hbWUge1N0cmluZ30g57G75ZCNXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gYWRkQ2xhc3MgKG5vZGUsIGNsYXNzTmFtZSkge1xyXG4gICAgY29uc3QgY2xhc3NOYW1lcyA9IGNsYXNzTmFtZS5zcGxpdCgnICcpXHJcbiAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gMSkge1xyXG4gICAgICAgIGlmICghbm9kZS5jbGFzc05hbWUgJiYgY2xhc3NOYW1lcy5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgbm9kZS5jbGFzc05hbWUgPSBjbGFzc05hbWVcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBsZXQgc2V0Q2xhc3MgPSAnICcgKyBub2RlLmNsYXNzTmFtZSArICcgJ1xyXG4gICAgICAgICAgICBjbGFzc05hbWVzLmZvckVhY2goKGNsKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2V0Q2xhc3MuaW5kZXhPZignICcgKyBjbCArICcgJykgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0Q2xhc3MgKz0gY2wgKyAnICdcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgY29uc3QgcnRyaW0gPSAvXlxccyt8XFxzKyQvXHJcbiAgICAgICAgICAgIG5vZGUuY2xhc3NOYW1lID0gc2V0Q2xhc3MucmVwbGFjZShydHJpbSwgJycpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogIOWvueWFg+e0oOWIoOmZpOagt+W8j+exu1xyXG4gKiAgQHBhcmFtIG5vZGUge05vZGVFbGVtZW50fSDmjIflrprnmoRET03lhYPntKBcclxuICogIEBwYXJhbSBjbGFzc05hbWUge1N0cmluZ30g57G75ZCNXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlQ2xhc3MgKG5vZGUsIGNsYXNzTmFtZSkge1xyXG4gICAgY29uc3QgY2xhc3NOYW1lcyA9IGNsYXNzTmFtZS5zcGxpdCgnICcpXHJcbiAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gMSkge1xyXG4gICAgICAgIGxldCBzZXRDbGFzcyA9ICcgJyArIG5vZGUuY2xhc3NOYW1lICsgJyAnXHJcbiAgICAgICAgY2xhc3NOYW1lcy5mb3JFYWNoKChjbCkgPT4ge1xyXG4gICAgICAgICAgICBzZXRDbGFzcyA9IHNldENsYXNzLnJlcGxhY2UoJyAnICsgY2wgKyAnICcsICcgJylcclxuICAgICAgICB9KVxyXG4gICAgICAgIGNvbnN0IHJ0cmltID0gL15cXHMrfFxccyskL1xyXG4gICAgICAgIG5vZGUuY2xhc3NOYW1lID0gc2V0Q2xhc3MucmVwbGFjZShydHJpbSwgJycpXHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiAg5bCG5Lyg5YWl55qE6YWN572u6aG56L2s5oiQ5pys5Zyw55qE5a+56LGhXHJcbiAqICBAcGFyYW0gY29uZmlnIHtPYmplY3R9IOS8oOWFpeeahOWvueixoVxyXG4gKiAgQHJldHVybiBvYmoge09iamVjdH0g5pys5Zyw5YyW5LmL5ZCO55qE5a+56LGhXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbG9jYWxpemVDb25maWcgKGNvbmZpZykge1xyXG4gICAgY29uc3Qgb2JqID0ge31cclxuXHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBjb25maWcpIHtcclxuICAgICAgICBvYmpba2V5XSA9IGNvbmZpZ1trZXldXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG9ialxyXG59XHJcblxyXG4vKipcclxuICogIOWcqOS4gOS4quWFg+e0oOS4uuWvueixoeeahOaVsOe7hOS4re+8jOagueaNrm9sZEtleTogb2xkVmFsdWXmib7liLDmjIflrprnmoTmlbDnu4TlhYPntKDvvIzlubbov5Tlm57or6XmlbDnu4TlhYPntKDkuK3mjIflrpprZXnnmoR2YWx1ZVxyXG4gKiAgQHBhcmFtIGFyciAtIOWFg+e0oOS4uuWvueixoeeahOaVsOe7hFxyXG4gKiAgQHBhcmFtIG9sZEtleSAtIOafpeaJvueahGtleVxyXG4gKiAgQHBhcmFtIG9sZFZhbHVlIC0g5p+l5om+55qEdmFsdWVcclxuICogIEBwYXJhbSBrZXkgLSDpnIDopoHov5Tlm57nmoR2YWx1ZeeahOaMh+WumueahGtleVxyXG4gKiAgQHJldHVybiByZXN1bHQgLSDmib7liLDnmoR2YWx1ZeWAvO+8jOacquaJvuWIsOi/lOWbnnVuZGVmaW5lZFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRWYWxCeUtleVZhbHVlIChhcnIsIG9sZEtleSwgb2xkVmFsdWUsIGtleSkge1xyXG4gICAgbGV0IHJlc3VsdFxyXG5cclxuICAgIGZvciAoY29uc3Qgb2JqIG9mIGFycikge1xyXG4gICAgICAgIGZvciAoY29uc3QgX2tleSBpbiBvYmopIHtcclxuICAgICAgICAgICAgaWYgKF9rZXkgPT09IG9sZEtleSAmJiBvYmpbX2tleV0gPT09IG9sZFZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBvYmpba2V5XVxyXG5cclxuICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdFxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZGVlcENsb25lIChvYmopIHtcclxuICAgIGNvbnN0IF9vYmogPSB7fVxyXG5cclxuICAgIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xyXG4gICAgICAgIGlmIChvYmpba2V5XS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCkgPT09ICdbb2JqZWN0IG9iamVjdF0nKSB7XHJcbiAgICAgICAgICAgIF9vYmpba2V5XSA9IGRlZXBDbG9uZShvYmpba2V5XSlcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBfb2JqW2tleV0gPSBrZXkgPT09ICd0ZXh0JyA/ICcnIDogb2JqW2tleV1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIF9vYmpcclxufVxyXG5cclxuLyoqXHJcbiAqICDlsIblrZfnrKbkuLLljrvmjonmjIflrprlhoXlrrnkuYvlkI7ovazmiJDmlbDlrZdcclxuICogIEBwYXJhbSB7U3RyaW5nfSBzdHIgLSDpnIDopoHovazmjaLnmoTlrZfnrKbkuLJcclxuICogIEBwYXJhbSB7U3RyaW5nfSBpbmRpY2F0b3IgLSDpnIDopoHooqvljrvmjonnmoTlhoXlrrlcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJTdHJUb051bSAoc3RyLCBpbmRpY2F0b3IpIHtcclxuICAgIGNvbnN0IHJlZyA9IG5ldyBSZWdFeHAoaW5kaWNhdG9yLCAnZycpXHJcbiAgICBjb25zdCAkc3RyID0gc3RyLnJlcGxhY2UocmVnLCAnJylcclxuXHJcbiAgICByZXR1cm4gfn4kc3RyXHJcbn1cclxuXHJcbi8qKlxyXG4gKiAg5bCG5a2X56ym5Liy5qC55o2uaW5kaWNhdG9y6L2s5oiQ5pWw57uEXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY29udmVyU3RyVG9BcnIgKHN0ciwgaW5kaWNhdG9yKSB7XHJcbiAgICByZXR1cm4gc3RyLmxlbmd0aCA/IHN0ci5zcGxpdChpbmRpY2F0b3IpIDogW11cclxufVxyXG5cclxuLyoqXHJcbiAqIOWwhuWtl+espuS4suagueaNrmluZGljYXRvcui9rOaIkOaVsOe7hOW5tuWwhuWGheWuuemDvei9rOaIkE51bWJlcuexu+Wei++8iOS7hemZkOaVsOe7hOWGheWuueWdh+S4uuaVsOWtl+eahOWtl+espuS4su+8iVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRTdHJUb051bUFyciAoc3RyLCBpbmRpY2F0b3IpIHtcclxuICAgIHJldHVybiBjb252ZXJTdHJUb0FycihzdHIsIGluZGljYXRvcikubWFwKGl0ZW0gPT4ge1xyXG4gICAgICAgIHJldHVybiB+fml0ZW1cclxuICAgIH0pXHJcbn1cclxuXHJcbi8qKlxyXG4gKiAg5bCG5q+r56eS5YC86L2s5o2i5oiQeOaXtnjliIZ456eS55qE5b2i5byPXHJcbiAqICBAcGFyYW0ge051bWJlcn0gdGltZSAtIOaXtumXtOeahOavq+enkuW9ouW8j1xyXG4gKiAgQHJldHVybiB7U3RyaW5nfSBzdHIgLSDovazmjaLlkI7nmoTlrZfnrKbkuLJcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0TVN0b1N0cmluZyAodGltZSkge1xyXG4gICAgZnVuY3Rpb24gZ2V0U2Vjb25kcyAoc2VjKSB7XHJcbiAgICAgICAgcmV0dXJuIGAke3NlY33np5JgXHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0TWludXRlcyAoc2VjKSB7XHJcbiAgICAgICAgaWYgKHNlYyAvIDYwID49IDEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGAke01hdGguZmxvb3Ioc2VjIC8gNjApfeWIhiR7Z2V0U2Vjb25kcyhzZWMgJSA2MCl9YFxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBnZXRTZWNvbmRzKHNlYylcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0SG91cnMgKHNlYykge1xyXG4gICAgICAgIGlmIChzZWMgLyAzNjAwID49IDEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGAke01hdGguZmxvb3Ioc2VjIC8gMzYwMCl95bCP5pe2JHtnZXRNaW51dGVzKHNlYyAlIDM2MDApfWBcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gZ2V0TWludXRlcyhzZWMpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldERheXMgKHNlYykge1xyXG4gICAgICAgIGlmIChzZWMgLyA4NjQwMCA+PSAxKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBgJHtNYXRoLmZsb29yKHNlYyAvIDg2NDAwKX3lpKkke2dldEhvdXJzKHNlYyAlIDg2NDAwKX1gXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGdldEhvdXJzKHNlYylcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRpbWUgPyBnZXREYXlzKE1hdGguZmxvb3IodGltZSAvIDEwMDApKSA6ICcw56eSJ1xyXG59XHJcblxyXG5mdW5jdGlvbiBwcmV6ZXJvIChudW0pIHtcclxuICAgIG51bSA9IE51bWJlcihudW0pXHJcblxyXG4gICAgaWYgKG51bSA8IDEwKSB7XHJcbiAgICAgICAgcmV0dXJuICcwJyArIG51bVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBudW1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRUaW1lIChtcykge1xyXG4gICAgY29uc3QgdGltZSA9IG5ldyBEYXRlKG1zKVxyXG5cclxuICAgIHJldHVybiBgJHt0aW1lLmdldEZ1bGxZZWFyKCl9LSR7cHJlemVybyh0aW1lLmdldE1vbnRoKCkgKyAxKX0tJHtwcmV6ZXJvKHRpbWUuZ2V0RGF0ZSgpKX0gJHtwcmV6ZXJvKHRpbWUuZ2V0SG91cnMoKSl9OiR7cHJlemVybyh0aW1lLmdldE1pbnV0ZXMoKSl9OiR7cHJlemVybyh0aW1lLmdldFNlY29uZHMoKSl9YFxyXG59XHJcblxyXG4vKipcclxuICogIOi9rOaNouaWh+S7tuWkp+Wwj1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRGaWxlU2l6ZSAoc2l6ZSwgdW5pdCkge1xyXG4gICAgY29uc3QgYXJyID0gWydCJywgJ0tCJywgJ01CJywgJ0dCJywgJ1RCJ11cclxuICAgIGNvbnN0IGNhbGNTaXplID0gc2l6ZSAvIDEwMjRcclxuICAgIGxldCBpbmRleFxyXG5cclxuICAgIGFyci5zb21lKChpdGVtLCBfaW5kZXgpID0+IHtcclxuICAgICAgICBpZiAodW5pdCA9PT0gaXRlbSkge1xyXG4gICAgICAgICAgICBpbmRleCA9IF9pbmRleFxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgIH0pXHJcblxyXG4gICAgY29uc3QgbmV4dCA9IGFycltpbmRleCArIDFdXHJcblxyXG4gICAgaWYgKGNhbGNTaXplID4gMTAyNCkge1xyXG4gICAgICAgIGlmICghbmV4dCkge1xyXG4gICAgICAgICAgICByZXR1cm4gYCR7Y2FsY1NpemUudG9GaXhlZCgyKX0ke3VuaXR9YFxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb252ZXJ0RmlsZVNpemUoY2FsY1NpemUsIG5leHQpXHJcbiAgICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gYCR7Y2FsY1NpemUudG9GaXhlZCgyKX0ke25leHQgfHwgdW5pdH1gXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc09iamVjdCAobykge1xyXG4gICAgcmV0dXJuIG8gIT09IG51bGwgJiYgdHlwZW9mIG8gPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KG8pXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBtZXJnZU1vZHVsZXMgKHRhcmdldCwgLi4ubW9kdWxlcykge1xyXG4gICAgcmV0dXJuIG1vZHVsZXMucmVkdWNlKChtZXJnZWQsIG1vZCkgPT4ge1xyXG4gICAgICAgIE9iamVjdC5rZXlzKG1vZCkuZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoaXNPYmplY3QobWVyZ2VkW2tleV0pICYmIGlzT2JqZWN0KG1vZFtrZXldKSkge1xyXG4gICAgICAgICAgICAgICAgbWVyZ2VkW2tleV0gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLi4ubWVyZ2VkW2tleV0sXHJcbiAgICAgICAgICAgICAgICAgICAgLi4ubW9kW2tleV1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIHJldHVybiBtZXJnZWRcclxuICAgIH0sIHRhcmdldClcclxufVxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBzZWxlY3RvclxyXG4gKiBAcGFyYW0ge0RPTSBlbGVtZW50fSBwYXJlbnRcclxuICovXHJcbmV4cG9ydCBjb25zdCBnZXRPdXRlckhlaWdodCA9IChzZWxlY3RvciwgcGFyZW50KSA9PiB7XHJcbiAgICBjb25zdCB7IG1hcmdpblRvcCwgaGVpZ2h0LCBtYXJnaW5Cb3R0b20gfSA9IGdldERPTVJlY3Qoc2VsZWN0b3IsIHBhcmVudClcclxuICAgIHJldHVybiBwYXJzZUZsb2F0KG1hcmdpblRvcCkgKyBwYXJzZUZsb2F0KGhlaWdodCkgKyBwYXJzZUZsb2F0KG1hcmdpbkJvdHRvbSlcclxufVxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBzZWxlY3RvclxyXG4gKiBAcGFyYW0ge0RPTSBlbGVtZW50fSBwYXJlbnRcclxuICovXHJcbmV4cG9ydCBjb25zdCBnZXRPdXRlcldpZHRoID0gKHNlbGVjdG9yLCBwYXJlbnQpID0+IHtcclxuICAgIGNvbnN0IHsgbWFyZ2luTGVmdCwgd2lkdGgsIG1hcmdpblJpZ2h0IH0gPSBnZXRET01SZWN0KHNlbGVjdG9yLCBwYXJlbnQpXHJcbiAgICByZXR1cm4gcGFyc2VGbG9hdChtYXJnaW5MZWZ0KSArIHBhcnNlRmxvYXQod2lkdGgpICsgcGFyc2VGbG9hdChtYXJnaW5SaWdodClcclxufVxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBzZWxlY3RvclxyXG4gKiBAcGFyYW0ge0RPTSBlbGVtZW50fSBwYXJlbnRcclxuICovXHJcbmV4cG9ydCBjb25zdCBnZXRJbm5lcldpZHRoID0gKHNlbGVjdG9yLCBwYXJlbnQpID0+IHtcclxuICAgIGNvbnN0IHsgd2lkdGggfSA9IGdldERPTVJlY3Qoc2VsZWN0b3IsIHBhcmVudClcclxuICAgIHJldHVybiBwYXJzZUZsb2F0KHdpZHRoKVxyXG59XHJcblxyXG5jb25zdCBnZXRET01SZWN0ID0gKHNlbGVjdG9yLCBwYXJlbnQpID0+IHtcclxuICAgIGNvbnN0IHRhcmdldCA9IGlzRE9NRWxlbWVudChzZWxlY3RvcikgPyBzZWxlY3RvciA6IHBhcmVudCA/IHBhcmVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKSA6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpXHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICByZXR1cm4ge31cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRhcmdldClcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHdpZHRoOiBzdHlsZS53aWR0aCxcclxuICAgICAgICBoZWlnaHQ6IHN0eWxlLmhlaWdodCxcclxuICAgICAgICBtYXJnaW5Ub3A6IHN0eWxlLm1hcmdpblRvcCxcclxuICAgICAgICBtYXJnaW5Cb3R0b206IHN0eWxlLm1hcmdpbkJvdHRvbSxcclxuICAgICAgICBtYXJnaW5MZWZ0OiBzdHlsZS5tYXJnaW5MZWZ0LFxyXG4gICAgICAgIG1hcmdpblJpZ2h0OiBzdHlsZS5tYXJnaW5SaWdodFxyXG4gICAgfVxyXG59XHJcblxyXG5jb25zdCBpc0RPTUVsZW1lbnQgPSBvYmogPT4ge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICB0eXBlb2YgSFRNTEVsZW1lbnQgPT09ICdvYmplY3QnID8gb2JqIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgOiBvYmogJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgb2JqICE9PSBudWxsICYmIG9iai5ub2RlVHlwZSA9PT0gMSAmJiB0eXBlb2Ygb2JqLm5vZGVOYW1lID09PSAnc3RyaW5nJ1xyXG4gICAgKVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgZGVlcENvcHkgPSBvYmogPT4ge1xyXG4gICAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkob2JqKSlcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGhhc2hJRCA9IChsZW5ndGggPSA4KSA9PiB7XHJcbiAgICBsZXQgcG9zID0gMFxyXG4gICAgbGV0IHJlc3VsdCA9ICcnXHJcbiAgICB3aGlsZSAocG9zIDwgbGVuZ3RoKSB7XHJcbiAgICAgICAgY29uc3QgbiA9IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDEyNikgKyAzM1xyXG4gICAgICAgIHJlc3VsdCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKG4pXHJcbiAgICAgICAgcG9zKytcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHRcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFNlcnZpY2VMb2dvQnlQYXRoIChsaW5rKSB7XHJcbiAgICByZXR1cm4gbGluay5yZXBsYWNlKC9cXC8/KGRldm9wc1xcLyk/KFxcdyspXFxTKiQvLCAnJDInKVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0QXRvbVBhdGggKC4uLmFyZ3MpIHtcclxuICAgIHJldHVybiBhcmdzLmpvaW4oJy0nKVxyXG59XHJcblxyXG4vKipcclxuICogIOiOt+WPlnVybOWPguaVsOWAvFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFF1ZXJ5U3RyaW5nIChuYW1lKSB7XHJcbiAgICBjb25zdCByZWcgPSBuZXcgUmVnRXhwKCcoXnwmKScgKyBuYW1lICsgJz0oW14mXSopKCZ8JCknLCAnaScpXHJcbiAgICBjb25zdCByID0gd2luZG93LmxvY2F0aW9uLnNlYXJjaC5zdWJzdHIoMSkubWF0Y2gocmVnKVxyXG4gICAgaWYgKHIgIT0gbnVsbCkgcmV0dXJuIHVuZXNjYXBlKHJbMl0pOyByZXR1cm4gbnVsbFxyXG59XHJcblxyXG4vKipcclxuICogIOWkjeWItuaWh+acrFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGNvcHlUZXh0ID0gKHRleHQpID0+IHtcclxuICAgIGNvbnN0IHRleHRhcmVhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGV4dGFyZWEnKVxyXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0ZXh0YXJlYSlcclxuICAgIHRleHRhcmVhLnZhbHVlID0gdGV4dFxyXG4gICAgdGV4dGFyZWEuc2VsZWN0KClcclxuICAgIGlmIChkb2N1bWVudC5leGVjQ29tbWFuZCgnY29weScpKSB7XHJcbiAgICAgICAgZG9jdW1lbnQuZXhlY0NvbW1hbmQoJ2NvcHknKVxyXG4gICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQodGV4dGFyZWEpXHJcbiAgICAgICAgcmV0dXJuIHRydWVcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKHdpbmRvdy5kZXZvcHMuJGkxOG4udCgnZW52aXJvbm1lbnQuYnJvd3Nlck5vdFN1cHBvcnQnKSlcclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZVxyXG59XHJcblxyXG4vLyDojrflj5YgY29va2llIG9iamVjdFxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29va2llcyAoc3RyQ29va2llID0gZG9jdW1lbnQuY29va2llKSB7XHJcbiAgICBpZiAoIXN0ckNvb2tpZSkge1xyXG4gICAgICAgIHJldHVybiB7fVxyXG4gICAgfVxyXG4gICAgY29uc3QgYXJyQ29va2llID0gc3RyQ29va2llLnNwbGl0KCc7ICcpLy8g5YiG5YmyXHJcbiAgICBjb25zdCBjb29raWVzT2JqID0ge31cclxuICAgIGFyckNvb2tpZS5mb3JFYWNoKChjb29raWVTdHIpID0+IHtcclxuICAgICAgICBjb25zdCBhcnIgPSBjb29raWVTdHIuc3BsaXQoJz0nKVxyXG4gICAgICAgIGNvbnN0IFtrZXksIHZhbHVlXSA9IGFyclxyXG4gICAgICAgIGlmIChrZXkpIHtcclxuICAgICAgICAgICAgY29va2llc09ialtrZXldID0gdmFsdWVcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG4gICAgcmV0dXJuIGNvb2tpZXNPYmpcclxufVxyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7716\n");

/***/ }),

/***/ 8062:
/***/ ((module, __unused_webpack___webpack_exports__, __webpack_require__) => {

eval("// extracted by mini-css-extract-plugin\n\n    if(true) {\n      // 1713937562627\n      var cssReload = __webpack_require__(4736)(module.id, {\"locals\":false});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);\n    }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODA2Mi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXZvcHMtZW52aXJvbm1lbnQvLi9zcmMvY29tcG9uZW50cy9lbnZUYWJzL25vZGVUYWIudnVlP2ViMzkiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307XG4gICAgaWYobW9kdWxlLmhvdCkge1xuICAgICAgLy8gMTcxMzkzNzU2MjYyN1xuICAgICAgdmFyIGNzc1JlbG9hZCA9IHJlcXVpcmUoXCJFOi9iay1jaS9zcmMvZnJvbnRlbmQvbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvaG1yL2hvdE1vZHVsZVJlcGxhY2VtZW50LmpzXCIpKG1vZHVsZS5pZCwge1wibG9jYWxzXCI6ZmFsc2V9KTtcbiAgICAgIG1vZHVsZS5ob3QuZGlzcG9zZShjc3NSZWxvYWQpO1xuICAgICAgbW9kdWxlLmhvdC5hY2NlcHQodW5kZWZpbmVkLCBjc3NSZWxvYWQpO1xuICAgIH1cbiAgIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///8062\n");

/***/ }),

/***/ 2141:
/***/ ((module, __unused_webpack___webpack_exports__, __webpack_require__) => {

eval("// extracted by mini-css-extract-plugin\n\n    if(true) {\n      // 1713937570690\n      var cssReload = __webpack_require__(4736)(module.id, {\"locals\":false});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);\n    }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjE0MS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXZvcHMtZW52aXJvbm1lbnQvLi9zcmMvY29tcG9uZW50cy9lbnZUYWJzL3NlbGVjdC1lbnYtc2hhcmUtZGlhbG9nLnZ1ZT9lMWRlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9O1xuICAgIGlmKG1vZHVsZS5ob3QpIHtcbiAgICAgIC8vIDE3MTM5Mzc1NzA2OTBcbiAgICAgIHZhciBjc3NSZWxvYWQgPSByZXF1aXJlKFwiRTovYmstY2kvc3JjL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2htci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qc1wiKShtb2R1bGUuaWQsIHtcImxvY2Fsc1wiOmZhbHNlfSk7XG4gICAgICBtb2R1bGUuaG90LmRpc3Bvc2UoY3NzUmVsb2FkKTtcbiAgICAgIG1vZHVsZS5ob3QuYWNjZXB0KHVuZGVmaW5lZCwgY3NzUmVsb2FkKTtcbiAgICB9XG4gICJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2141\n");

/***/ }),

/***/ 3506:
/***/ ((module, __unused_webpack___webpack_exports__, __webpack_require__) => {

eval("// extracted by mini-css-extract-plugin\n\n    if(true) {\n      // 1713937562618\n      var cssReload = __webpack_require__(4736)(module.id, {\"locals\":false});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);\n    }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzUwNi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXZvcHMtZW52aXJvbm1lbnQvLi9zcmMvY29tcG9uZW50cy9lbnZUYWJzL3NldHRpbmdUYWIudnVlPzIyMjAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307XG4gICAgaWYobW9kdWxlLmhvdCkge1xuICAgICAgLy8gMTcxMzkzNzU2MjYxOFxuICAgICAgdmFyIGNzc1JlbG9hZCA9IHJlcXVpcmUoXCJFOi9iay1jaS9zcmMvZnJvbnRlbmQvbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvaG1yL2hvdE1vZHVsZVJlcGxhY2VtZW50LmpzXCIpKG1vZHVsZS5pZCwge1wibG9jYWxzXCI6ZmFsc2V9KTtcbiAgICAgIG1vZHVsZS5ob3QuZGlzcG9zZShjc3NSZWxvYWQpO1xuICAgICAgbW9kdWxlLmhvdC5hY2NlcHQodW5kZWZpbmVkLCBjc3NSZWxvYWQpO1xuICAgIH1cbiAgIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3506\n");

/***/ }),

/***/ 8610:
/***/ ((module, __unused_webpack___webpack_exports__, __webpack_require__) => {

eval("// extracted by mini-css-extract-plugin\n\n    if(true) {\n      // 1713937561860\n      var cssReload = __webpack_require__(4736)(module.id, {\"locals\":false});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);\n    }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODYxMC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXZvcHMtZW52aXJvbm1lbnQvLi9zcmMvdmlld3MvZW52X2RldGFpbC52dWU/NTg1MCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTtcbiAgICBpZihtb2R1bGUuaG90KSB7XG4gICAgICAvLyAxNzEzOTM3NTYxODYwXG4gICAgICB2YXIgY3NzUmVsb2FkID0gcmVxdWlyZShcIkU6L2JrLWNpL3NyYy9mcm9udGVuZC9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9obXIvaG90TW9kdWxlUmVwbGFjZW1lbnQuanNcIikobW9kdWxlLmlkLCB7XCJsb2NhbHNcIjpmYWxzZX0pO1xuICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGNzc1JlbG9hZCk7XG4gICAgICBtb2R1bGUuaG90LmFjY2VwdCh1bmRlZmluZWQsIGNzc1JlbG9hZCk7XG4gICAgfVxuICAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8610\n");

/***/ }),

/***/ 2470:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": () => (/* binding */ env_detail)\n});\n\n;// CONCATENATED MODULE: ../node_modules/babel-loader/lib/index.js!../node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[3]!../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/views/env_detail.vue?vue&type=template&id=6e31c18a\nvar render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c(\"div\", {\n    staticClass: \"env-detail-wrapper\"\n  }, [_c(\"content-header\", {\n    staticClass: \"env-detail-header\"\n  }, [_c(\"template\", {\n    slot: \"left\"\n  }, [_c(\"i\", {\n    staticClass: \"devops-icon icon-arrows-left\",\n    on: {\n      click: _vm.toEnvList\n    }\n  }), _vm._v(\"\\n            \" + _vm._s(_vm.curEnvDetail.name) + \"\\n        \")])], 2), _vm._v(\" \"), _c(\"div\", {\n    directives: [{\n      name: \"bkloading\",\n      rawName: \"v-bkloading\",\n      value: {\n        isLoading: _vm.loading.isLoading,\n        title: _vm.loading.title\n      },\n      expression: \"{\\n            isLoading: loading.isLoading,\\n            title: loading.title\\n        }\"\n    }],\n    staticClass: \"env-detail-container\"\n  }, [_c(\"div\", {\n    staticClass: \"env-parameter-tab\"\n  }, [_c(\"div\", {\n    staticClass: \"env-detail-nav\"\n  }, _vm._l(_vm.tabs, function (tab) {\n    return _c(\"div\", {\n      key: tab.tab,\n      class: [\"tab-nav-item\", tab.cls, {\n        activeItem: _vm.curItemTab === tab.tabName\n      }],\n      on: {\n        click: function ($event) {\n          return _vm.changeTab(tab.tabName);\n        }\n      }\n    }, [_vm._v(_vm._s(_vm.$t(`environment.${tab.label}`)) + \"\\n                \")]);\n  }), 0), _vm._v(\" \"), _c(_vm.activeTabComp, {\n    tag: \"component\",\n    staticClass: \"env-detail-tab-content\",\n    attrs: {\n      \"cur-env-detail\": _vm.curEnvDetail,\n      \"request-env-detail\": _vm.requestEnvDetail,\n      \"project-id\": _vm.projectId,\n      \"env-hash-id\": _vm.envHashId\n    }\n  })], 1)])], 1);\n};\nvar staticRenderFns = [];\nrender._withStripped = true;\n\n;// CONCATENATED MODULE: ./src/views/env_detail.vue?vue&type=template&id=6e31c18a\n\n;// CONCATENATED MODULE: ../node_modules/babel-loader/lib/index.js!../node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[3]!../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/envTabs/baseTab.vue?vue&type=template&id=ed61d1c2\nvar baseTabvue_type_template_id_ed61d1c2_render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c(\"div\", {\n    staticClass: \"base-message-wrapper\"\n  }, [_c(\"form\", {\n    ref: \"modifyEnv\",\n    staticClass: \"bk-form base-env-form\"\n  }, [_c(\"div\", {\n    staticClass: \"bk-form-item\"\n  }, [_c(\"label\", {\n    staticClass: \"bk-label env-item-label\"\n  }, [_vm._v(_vm._s(_vm.$t(\"environment.envInfo.name\")))]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"bk-form-content env-item-content\"\n  }, [_vm.isEditingName ? _c(\"div\", {\n    staticClass: \"edit-content\"\n  }, [_c(\"input\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.editEnvForm.name,\n      expression: \"editEnvForm.name\"\n    }, {\n      name: \"validate\",\n      rawName: \"v-validate\",\n      value: \"required\",\n      expression: \"'required'\"\n    }],\n    staticClass: \"bk-form-input env-name-input\",\n    class: {\n      \"is-danger\": _vm.errors.has(\"envName\")\n    },\n    attrs: {\n      type: \"text\",\n      placeholder: _vm.$t(\"environment.pleaseEnter\"),\n      maxlength: \"30\",\n      name: \"envName\"\n    },\n    domProps: {\n      value: _vm.editEnvForm.name\n    },\n    on: {\n      input: function ($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.editEnvForm, \"name\", $event.target.value);\n      }\n    }\n  })]) : _c(\"p\", {\n    staticClass: \"env-base cur-env-name\"\n  }, [_c(\"span\", {\n    staticClass: \"env-name-content\"\n  }, [_vm._v(_vm._s(_vm.curEnvDetail.name))])]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"handler-btn\"\n  }, [_c(\"span\", {\n    directives: [{\n      name: \"perm\",\n      rawName: \"v-perm\",\n      value: {\n        hasPermission: _vm.curEnvDetail.canEdit,\n        disablePermissionApi: true,\n        permissionData: {\n          projectId: _vm.projectId,\n          resourceType: _vm.ENV_RESOURCE_TYPE,\n          resourceCode: _vm.envHashId,\n          action: _vm.ENV_RESOURCE_ACTION.EDIT\n        }\n      },\n      expression: \"{\\n                            hasPermission: curEnvDetail.canEdit,\\n                            disablePermissionApi: true,\\n                            permissionData: {\\n                                projectId: projectId,\\n                                resourceType: ENV_RESOURCE_TYPE,\\n                                resourceCode: envHashId,\\n                                action: ENV_RESOURCE_ACTION.EDIT\\n                            }\\n                        }\"\n    }]\n  }, [!_vm.isEditingName ? _c(\"i\", {\n    staticClass: \"devops-icon icon-edit\",\n    on: {\n      click: function ($event) {\n        return _vm.toEditBaseForm(\"name\");\n      }\n    }\n  }) : _vm._e()]), _vm._v(\" \"), _vm.isEditingName ? _c(\"span\", {\n    staticClass: \"edit-base\",\n    on: {\n      click: function ($event) {\n        return _vm.saveEnvDetail(\"name\");\n      }\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"environment.save\")))]) : _vm._e(), _vm._v(\" \"), _vm.isEditingName ? _c(\"span\", {\n    staticClass: \"edit-base\",\n    on: {\n      click: function ($event) {\n        return _vm.cancelEnvDetail(\"name\");\n      }\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"environment.cancel\")))]) : _vm._e()])])]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"bk-form-item\"\n  }, [_c(\"label\", {\n    staticClass: \"bk-label env-item-label env-desc-label\"\n  }, [_vm._v(_vm._s(_vm.$t(\"environment.envInfo.envRemark\")))]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"bk-form-content env-item-content\"\n  }, [_vm.isEditingDesc ? _c(\"div\", {\n    staticClass: \"edit-content\"\n  }, [_vm.isEditingDesc ? _c(\"textarea\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.editEnvForm.desc,\n      expression: \"editEnvForm.desc\"\n    }],\n    staticClass: \"bk-form-input env-desc-input\",\n    attrs: {\n      placeholder: _vm.$t(\"environment.pleaseEnter\"),\n      name: \"envDesc\",\n      maxlength: \"100\"\n    },\n    domProps: {\n      value: _vm.editEnvForm.desc\n    },\n    on: {\n      input: function ($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.editEnvForm, \"desc\", $event.target.value);\n      }\n    }\n  }) : _vm._e()]) : _c(\"p\", {\n    staticClass: \"env-base cur-env-desc\"\n  }, [_vm.curEnvDetail.desc ? _c(\"span\", {\n    staticClass: \"env-desc-content\"\n  }, [_vm._v(_vm._s(_vm.curEnvDetail.desc))]) : _c(\"span\", [_vm._v(\"--\")])]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"handler-btn\"\n  }, [_c(\"span\", {\n    directives: [{\n      name: \"perm\",\n      rawName: \"v-perm\",\n      value: {\n        hasPermission: _vm.curEnvDetail.canEdit,\n        disablePermissionApi: true,\n        permissionData: {\n          projectId: _vm.projectId,\n          resourceType: _vm.ENV_RESOURCE_TYPE,\n          resourceCode: _vm.envHashId,\n          action: _vm.ENV_RESOURCE_ACTION.EDIT\n        }\n      },\n      expression: \"{\\n                            hasPermission: curEnvDetail.canEdit,\\n                            disablePermissionApi: true,\\n                            permissionData: {\\n                                projectId: projectId,\\n                                resourceType: ENV_RESOURCE_TYPE,\\n                                resourceCode: envHashId,\\n                                action: ENV_RESOURCE_ACTION.EDIT\\n                            }\\n                        }\"\n    }]\n  }, [!_vm.isEditingDesc ? _c(\"i\", {\n    staticClass: \"devops-icon icon-edit\",\n    on: {\n      click: function ($event) {\n        return _vm.toEditBaseForm(\"desc\");\n      }\n    }\n  }) : _vm._e()]), _vm._v(\" \"), _vm.isEditingDesc ? _c(\"span\", {\n    staticClass: \"edit-base\",\n    on: {\n      click: function ($event) {\n        return _vm.saveEnvDetail(\"desc\");\n      }\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"environment.save\")))]) : _vm._e(), _vm._v(\" \"), _vm.isEditingDesc ? _c(\"span\", {\n    staticClass: \"edit-base\",\n    on: {\n      click: function ($event) {\n        return _vm.cancelEnvDetail(\"desc\");\n      }\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"environment.cancel\")))]) : _vm._e()])])]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"bk-form-item\"\n  }, [_c(\"label\", {\n    staticClass: \"bk-label env-item-label env-desc-label\"\n  }, [_vm._v(_vm._s(_vm.$t(\"environment.envInfo.envType\")))]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"bk-form-content env-item-content\"\n  }, [_vm.isEditingType ? _c(\"div\", {\n    staticClass: \"edit-content\"\n  }, [_c(\"bk-radio-group\", {\n    model: {\n      value: _vm.editEnvForm.type,\n      callback: function ($$v) {\n        _vm.$set(_vm.editEnvForm, \"type\", $$v);\n      },\n      expression: \"editEnvForm.type\"\n    }\n  }, [_c(\"bk-radio\", {\n    staticClass: \"env-type-radio\",\n    attrs: {\n      value: \"DEV\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"environment.envInfo.devEnvType\")))]), _vm._v(\" \"), _c(\"bk-radio\", {\n    staticClass: \"env-type-radio\",\n    attrs: {\n      value: \"PROD\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"environment.envInfo.testEnvType\")))])], 1)], 1) : _c(\"p\", {\n    staticClass: \"env-base type-content\"\n  }, [_c(\"span\", [_vm._v(_vm._s(_vm.$t(_vm.envTypeDesc)))])]), _vm._v(\" \"), _vm.curEnvDetail.envType !== \"BUILD\" ? _c(\"div\", {\n    staticClass: \"handler-btn\"\n  }, [_c(\"span\", {\n    directives: [{\n      name: \"perm\",\n      rawName: \"v-perm\",\n      value: {\n        hasPermission: _vm.curEnvDetail.canEdit,\n        disablePermissionApi: true,\n        permissionData: {\n          projectId: _vm.projectId,\n          resourceType: _vm.ENV_RESOURCE_TYPE,\n          resourceCode: _vm.envHashId,\n          action: _vm.ENV_RESOURCE_ACTION.EDIT\n        }\n      },\n      expression: \"{\\n                            hasPermission: curEnvDetail.canEdit,\\n                            disablePermissionApi: true,\\n                            permissionData: {\\n                                projectId: projectId,\\n                                resourceType: ENV_RESOURCE_TYPE,\\n                                resourceCode: envHashId,\\n                                action: ENV_RESOURCE_ACTION.EDIT\\n                            }\\n                        }\"\n    }]\n  }, [!_vm.isEditingType ? _c(\"i\", {\n    staticClass: \"devops-icon icon-edit\",\n    on: {\n      click: function ($event) {\n        return _vm.toEditBaseForm(\"type\");\n      }\n    }\n  }) : _vm._e()]), _vm._v(\" \"), _vm.isEditingType ? _c(\"span\", {\n    staticClass: \"edit-base\",\n    on: {\n      click: function ($event) {\n        return _vm.saveEnvDetail(\"type\");\n      }\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"environment.save\")))]) : _vm._e(), _vm._v(\" \"), _vm.isEditingType ? _c(\"span\", {\n    staticClass: \"edit-base\",\n    on: {\n      click: function ($event) {\n        return _vm.cancelEnvDetail(\"type\");\n      }\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"environment.cancel\")))]) : _vm._e()]) : _vm._e()])]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"bk-form-item\"\n  }, [_c(\"label\", {\n    staticClass: \"bk-label env-item-label env-desc-label\"\n  }, [_vm._v(_vm._s(_vm.$t(\"environment.envInfo.nodeCount\")))]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"bk-form-content env-item-content\"\n  }, [_c(\"p\", {\n    staticClass: \"env-base\"\n  }, [_vm._v(_vm._s(_vm.curEnvDetail.nodeCount))])])]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"bk-form-item\"\n  }, [_c(\"label\", {\n    staticClass: \"bk-label env-item-label env-desc-label\"\n  }, [_vm._v(_vm._s(_vm.$t(\"environment.envInfo.creationTime\")))]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"bk-form-content env-item-content\"\n  }, [_c(\"p\", {\n    staticClass: \"env-base\"\n  }, [_vm._v(_vm._s(_vm.localConvertTime(_vm.curEnvDetail.createdTime)))])])]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"bk-form-item create-user-item\"\n  }, [_c(\"label\", {\n    staticClass: \"bk-label env-item-label env-desc-label\"\n  }, [_vm._v(_vm._s(_vm.$t(\"environment.envInfo.creator\")))]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"bk-form-content env-item-content\"\n  }, [_c(\"p\", {\n    staticClass: \"env-base\"\n  }, [_vm._v(_vm._s(_vm.curEnvDetail.createdUser))])])])])]);\n};\nvar baseTabvue_type_template_id_ed61d1c2_staticRenderFns = [];\nbaseTabvue_type_template_id_ed61d1c2_render._withStripped = true;\n\n;// CONCATENATED MODULE: ./src/components/envTabs/baseTab.vue?vue&type=template&id=ed61d1c2\n\n// EXTERNAL MODULE: ./src/utils/util.js\nvar util = __webpack_require__(7716);\n// EXTERNAL MODULE: ./src/utils/permission.js\nvar permission = __webpack_require__(9203);\n;// CONCATENATED MODULE: ../node_modules/babel-loader/lib/index.js!../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/envTabs/baseTab.vue?vue&type=script&lang=js\n\n\n/* harmony default export */ const baseTabvue_type_script_lang_js = ({\n  name: 'base-tab',\n  props: {\n    projectId: {\n      type: String,\n      required: true\n    },\n    envHashId: {\n      type: String,\n      required: true\n    },\n    curEnvDetail: {\n      type: Object,\n      default: () => ({})\n    },\n    requestEnvDetail: {\n      type: Function,\n      required: true\n    }\n  },\n  data() {\n    return {\n      ENV_RESOURCE_ACTION: permission/* ENV_RESOURCE_ACTION */.c5,\n      ENV_RESOURCE_TYPE: permission/* ENV_RESOURCE_TYPE */.U,\n      isEditingName: false,\n      isEditingDesc: false,\n      isEditingType: false,\n      editEnvForm: {\n        name: '',\n        desc: '',\n        type: ''\n      }\n    };\n  },\n  computed: {\n    configList() {\n      return this.curEnvDetail.envVars;\n    },\n    envTypeDesc() {\n      const {\n        envType\n      } = this.curEnvDetail;\n      const descMap = {\n        DEV: 'devEnvType',\n        PROD: 'testEnvType',\n        BUILD: 'buildEnvType'\n      };\n      return `environment.envInfo.${descMap[envType]}`;\n    }\n  },\n  methods: {\n    toEditBaseForm(type) {\n      if (type === 'name') {\n        this.isEditingName = true;\n        this.editEnvForm.name = this.curEnvDetail.name;\n      } else if (type === 'desc') {\n        this.isEditingDesc = true;\n        this.editEnvForm.desc = this.curEnvDetail.desc;\n      } else {\n        this.isEditingType = true;\n        this.editEnvForm.type = this.curEnvDetail.envType;\n      }\n    },\n    async saveEnvDetail(type) {\n      const valid = await this.$validator.validate();\n      if (type === 'name' && valid || type !== 'name') {\n        let message, theme;\n        const modifyEenv = {\n          envVars: []\n        };\n        this.configList.forEach(item => {\n          const temp = {};\n          temp.name = item.name;\n          temp.value = item.value;\n          temp.secure = item.isSecure !== 'plaintext';\n          modifyEenv.envVars.push(temp);\n        });\n        try {\n          if (type === 'name') {\n            if (this.editEnvForm.name) {\n              modifyEenv.name = this.editEnvForm.name;\n              modifyEenv.desc = this.curEnvDetail.desc;\n              modifyEenv.envType = this.curEnvDetail.envType;\n              await this.$store.dispatch('environment/toModifyEnv', {\n                projectId: this.projectId,\n                envHashId: this.envHashId,\n                params: modifyEenv\n              });\n              message = this.$t('environment.successfullySaved');\n              theme = 'success';\n            }\n          } else if (type === 'desc') {\n            modifyEenv.name = this.curEnvDetail.name;\n            modifyEenv.desc = this.editEnvForm.desc;\n            modifyEenv.envType = this.curEnvDetail.envType;\n            await this.$store.dispatch('environment/toModifyEnv', {\n              projectId: this.projectId,\n              envHashId: this.envHashId,\n              params: modifyEenv\n            });\n            message = this.$t('environment.successfullySaved');\n            theme = 'success';\n          } else {\n            modifyEenv.name = this.curEnvDetail.name;\n            modifyEenv.desc = this.curEnvDetail.desc;\n            modifyEenv.envType = this.editEnvForm.type;\n            await this.$store.dispatch('environment/toModifyEnv', {\n              projectId: this.projectId,\n              envHashId: this.envHashId,\n              params: modifyEenv\n            });\n            message = this.$t('environment.successfullySaved');\n            theme = 'success';\n          }\n        } catch (e) {\n          this.handleError(e, {\n            projectId: this.projectId,\n            resourceType: permission/* ENV_RESOURCE_TYPE */.U,\n            resourceCode: this.envHashId,\n            action: permission/* ENV_RESOURCE_ACTION */.c5.EDIT\n          });\n        } finally {\n          if (theme === 'success') {\n            this.$bkMessage({\n              message,\n              theme\n            });\n            this.requestEnvDetail();\n            if (type === 'name') {\n              this.curEnvDetail.name = modifyEenv.name;\n              this.isEditingName = false;\n            } else if (type === 'desc') {\n              this.curEnvDetail.desc = modifyEenv.desc;\n              this.isEditingDesc = false;\n            } else {\n              this.curEnvDetail.envType = modifyEenv.envType;\n              this.isEditingType = false;\n            }\n          }\n        }\n      }\n    },\n    cancelEnvDetail(type) {\n      if (type === 'name') {\n        this.isEditingName = false;\n      } else if (type === 'desc') {\n        this.isEditingDesc = false;\n      } else {\n        this.isEditingType = false;\n      }\n    },\n    /**\r\n     * 处理时间格式\r\n     */\n    localConvertTime(timestamp) {\n      return (0,util/* convertTime */.t)(timestamp * 1000);\n    }\n  }\n});\n;// CONCATENATED MODULE: ./src/components/envTabs/baseTab.vue?vue&type=script&lang=js\n /* harmony default export */ const envTabs_baseTabvue_type_script_lang_js = (baseTabvue_type_script_lang_js); \n// EXTERNAL MODULE: ../node_modules/vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(7658);\n;// CONCATENATED MODULE: ./src/components/envTabs/baseTab.vue\n\n\n\n\n\n/* normalize component */\n;\nvar component = (0,componentNormalizer/* default */.A)(\n  envTabs_baseTabvue_type_script_lang_js,\n  baseTabvue_type_template_id_ed61d1c2_render,\n  baseTabvue_type_template_id_ed61d1c2_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ const baseTab = (component.exports);\n;// CONCATENATED MODULE: ../node_modules/babel-loader/lib/index.js!../node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[3]!../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/envTabs/configTab.vue?vue&type=template&id=a3542288\nvar configTabvue_type_template_id_a3542288_render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c(\"div\", {\n    staticClass: \"config-content-wrapper\"\n  }, [_c(\"div\", {\n    staticClass: \"config-content-header\"\n  }, [_c(\"bk-button\", {\n    directives: [{\n      name: \"perm\",\n      rawName: \"v-perm\",\n      value: {\n        permissionData: {\n          projectId: _vm.projectId,\n          resourceType: _vm.ENV_RESOURCE_TYPE,\n          resourceCode: _vm.envHashId,\n          action: _vm.ENV_RESOURCE_ACTION.EDIT\n        }\n      },\n      expression: \"{\\n                permissionData: {\\n                    projectId: projectId,\\n                    resourceType: ENV_RESOURCE_TYPE,\\n                    resourceCode: envHashId,\\n                    action: ENV_RESOURCE_ACTION.EDIT\\n                }\\n            }\"\n    }],\n    attrs: {\n      theme: \"primary\",\n      disabled: _vm.lastselectConfIndex > -1\n    },\n    on: {\n      click: _vm.createConfigItem\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"environment.addConfItem\")) + \"\\n        \")])], 1), _vm._v(\" \"), _vm.configList.length ? _c(\"div\", {\n    staticClass: \"config-table\"\n  }, [_c(\"div\", {\n    staticClass: \"table-head config-head\"\n  }, [_c(\"div\", {\n    staticClass: \"table-config-item config-item-key\"\n  }, [_vm._v(_vm._s(_vm.$t(\"environment.envInfo.key\")))]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"table-config-item config-item-value\"\n  }, [_vm._v(_vm._s(_vm.$t(\"environment.envInfo.value\")))]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"table-config-item config-item-type\"\n  }, [_vm._v(_vm._s(_vm.$t(\"environment.envInfo.type\")))]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"table-config-item config-item-handler\"\n  }, [_vm._v(_vm._s(_vm.$t(\"environment.operation\")))])]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"table-config-body\"\n  }, _vm._l(_vm.configList, function (row, index) {\n    return _c(\"div\", {\n      key: index,\n      staticClass: \"table-row config-row\"\n    }, [_c(\"div\", {\n      staticClass: \"table-config-item config-item-key\"\n    }, [row.isCreateItem || row.isEditItem ? _c(\"input\", {\n      directives: [{\n        name: \"model\",\n        rawName: \"v-model\",\n        value: row.name,\n        expression: \"row.name\"\n      }],\n      staticClass: \"bk-form-input config-input config-key-input\",\n      class: {\n        \"is-danger\": _vm.errorHandler.nameError\n      },\n      attrs: {\n        type: \"text\",\n        placeholder: _vm.$t(\"environment.pleaseEnter\"),\n        name: \"confName\"\n      },\n      domProps: {\n        value: row.name\n      },\n      on: {\n        input: [function ($event) {\n          if ($event.target.composing) return;\n          _vm.$set(row, \"name\", $event.target.value);\n        }, function ($event) {\n          _vm.errorHandler.nameError = false;\n        }]\n      }\n    }) : _c(\"span\", {\n      staticClass: \"config-name\"\n    }, [_vm._v(_vm._s(row.name))])]), _vm._v(\" \"), _c(\"div\", {\n      staticClass: \"table-config-item config-item-value\"\n    }, [!_vm.curIsPlaintext && (row.isCreateItem || row.isEditItem) && row.isSecure === \"ciphertext\" ? _c(\"input\", {\n      directives: [{\n        name: \"model\",\n        rawName: \"v-model\",\n        value: row.value,\n        expression: \"row.value\"\n      }],\n      staticClass: \"bk-form-input config-input config-value-input\",\n      class: {\n        \"is-danger\": _vm.errorHandler.valueError\n      },\n      attrs: {\n        type: \"password\",\n        placeholder: _vm.$t(\"environment.pleaseEnter\"),\n        name: \"confvalue\"\n      },\n      domProps: {\n        value: row.value\n      },\n      on: {\n        input: [function ($event) {\n          if ($event.target.composing) return;\n          _vm.$set(row, \"value\", $event.target.value);\n        }, function ($event) {\n          _vm.errorHandler.valueError = false;\n        }]\n      }\n    }) : _vm._e(), _vm._v(\" \"), (_vm.curIsPlaintext || row.isSecure === \"plaintext\") && (row.isCreateItem || row.isEditItem) ? _c(\"input\", {\n      directives: [{\n        name: \"model\",\n        rawName: \"v-model\",\n        value: row.value,\n        expression: \"row.value\"\n      }],\n      staticClass: \"bk-form-input config-input config-value-input\",\n      class: {\n        \"is-danger\": _vm.errorHandler.valueError\n      },\n      attrs: {\n        type: \"text\",\n        placeholder: _vm.$t(\"environment.pleaseEnter\"),\n        name: \"confvalue\"\n      },\n      domProps: {\n        value: row.value\n      },\n      on: {\n        input: [function ($event) {\n          if ($event.target.composing) return;\n          _vm.$set(row, \"value\", $event.target.value);\n        }, function ($event) {\n          _vm.errorHandler.valueError = false;\n        }]\n      }\n    }) : _vm._e(), _vm._v(\" \"), (row.isCreateItem || row.isEditItem) && row.isSecure === \"ciphertext\" ? _c(\"i\", {\n      staticClass: \"devops-icon\",\n      class: _vm.curIsPlaintext ? \"icon-eye\" : \"icon-hide\",\n      on: {\n        click: function ($event) {\n          _vm.curIsPlaintext = !_vm.curIsPlaintext;\n        }\n      }\n    }) : _vm._e(), _vm._v(\" \"), !row.isCreateItem && !row.isEditItem ? _c(\"span\", {\n      staticClass: \"config-name\"\n    }, [_vm._v(_vm._s(row.secure ? \"******\" : row.value))]) : _vm._e()]), _vm._v(\" \"), _c(\"div\", {\n      staticClass: \"table-config-item config-item-type\"\n    }, [row.isCreateItem ? _c(\"bk-select\", {\n      staticClass: \"config-text-type\",\n      attrs: {\n        \"popover-min-width\": \"120\"\n      },\n      on: {\n        \"item-selected\": _vm.secureSelected\n      },\n      model: {\n        value: row.isSecure,\n        callback: function ($$v) {\n          _vm.$set(row, \"isSecure\", $$v);\n        },\n        expression: \"row.isSecure\"\n      }\n    }, _vm._l(_vm.confTextType, function (option, cindex) {\n      return _c(\"bk-option\", {\n        key: cindex,\n        attrs: {\n          id: option.label,\n          name: option.name\n        }\n      });\n    }), 1) : _c(\"span\", {\n      staticClass: \"config-type\"\n    }, [_vm._v(_vm._s(row.secure ? _vm.$t(\"environment.envInfo.cipherText\") : _vm.$t(\"environment.envInfo.clearText\")))])], 1), _vm._v(\" \"), _c(\"div\", {\n      staticClass: \"table-config-item config-item-handler\"\n    }, [row.isCreateItem || row.isEditItem ? _c(\"div\", {\n      staticClass: \"editing-handler\"\n    }, [_c(\"span\", {\n      staticClass: \"config-edit\",\n      on: {\n        click: function ($event) {\n          return _vm.saveEditConfig(row, index);\n        }\n      }\n    }, [_vm._v(_vm._s(_vm.$t(\"environment.save\")))]), _vm._v(\" \"), _c(\"span\", {\n      staticClass: \"text-type\",\n      on: {\n        click: function ($event) {\n          return _vm.cancelEdit(row, index);\n        }\n      }\n    }, [_vm._v(_vm._s(_vm.$t(\"environment.cancel\")))])]) : _c(\"div\", {\n      staticClass: \"preview-handler\"\n    }, [_c(\"span\", {\n      directives: [{\n        name: \"perm\",\n        rawName: \"v-perm\",\n        value: {\n          hasPermission: _vm.curEnvDetail.canEdit,\n          disablePermissionApi: true,\n          permissionData: {\n            projectId: _vm.projectId,\n            resourceType: _vm.ENV_RESOURCE_TYPE,\n            resourceCode: _vm.envHashId,\n            action: _vm.ENV_RESOURCE_ACTION.EDIT\n          }\n        },\n        expression: \"{\\n                                hasPermission: curEnvDetail.canEdit,\\n                                disablePermissionApi: true,\\n                                permissionData: {\\n                                    projectId: projectId,\\n                                    resourceType: ENV_RESOURCE_TYPE,\\n                                    resourceCode: envHashId,\\n                                    action: ENV_RESOURCE_ACTION.EDIT\\n                                }\\n                            }\"\n      }]\n    }, [_c(\"span\", {\n      staticClass: \"config-edit\",\n      on: {\n        click: function ($event) {\n          return _vm.changeConfig(row, index);\n        }\n      }\n    }, [_vm._v(_vm._s(_vm.$t(\"environment.edit\")))])]), _vm._v(\" \"), _c(\"span\", {\n      directives: [{\n        name: \"perm\",\n        rawName: \"v-perm\",\n        value: {\n          hasPermission: _vm.curEnvDetail.canEdit,\n          disablePermissionApi: true,\n          permissionData: {\n            projectId: _vm.projectId,\n            resourceType: _vm.ENV_RESOURCE_TYPE,\n            resourceCode: _vm.envHashId,\n            action: _vm.ENV_RESOURCE_ACTION.EDIT\n          }\n        },\n        expression: \"{\\n                                hasPermission: curEnvDetail.canEdit,\\n                                disablePermissionApi: true,\\n                                permissionData: {\\n                                    projectId: projectId,\\n                                    resourceType: ENV_RESOURCE_TYPE,\\n                                    resourceCode: envHashId,\\n                                    action: ENV_RESOURCE_ACTION.EDIT\\n                                }\\n                            }\"\n      }]\n    }, [_c(\"span\", {\n      staticClass: \"config-edit\",\n      on: {\n        click: function ($event) {\n          return _vm.deleteConfig(row, index);\n        }\n      }\n    }, [_vm._v(_vm._s(_vm.$t(\"environment.delete\")))])])])])]);\n  }), 0)]) : _c(\"bk-exception\", {\n    staticClass: \"exception-wrap-item exception-part\",\n    attrs: {\n      type: \"empty\",\n      scene: \"part\"\n    }\n  })], 1);\n};\nvar configTabvue_type_template_id_a3542288_staticRenderFns = [];\nconfigTabvue_type_template_id_a3542288_render._withStripped = true;\n\n;// CONCATENATED MODULE: ./src/components/envTabs/configTab.vue?vue&type=template&id=a3542288\n\n;// CONCATENATED MODULE: ../node_modules/babel-loader/lib/index.js!../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/envTabs/configTab.vue?vue&type=script&lang=js\n\n/* harmony default export */ const configTabvue_type_script_lang_js = ({\n  name: 'config-tab',\n  props: {\n    projectId: {\n      type: String,\n      required: true\n    },\n    envHashId: {\n      type: String,\n      required: true\n    },\n    curEnvDetail: {\n      type: Object,\n      default: () => ({})\n    },\n    requestEnvDetail: {\n      type: Function,\n      required: true\n    }\n  },\n  data() {\n    return {\n      ENV_RESOURCE_ACTION: permission/* ENV_RESOURCE_ACTION */.c5,\n      ENV_RESOURCE_TYPE: permission/* ENV_RESOURCE_TYPE */.U,\n      curIsPlaintext: false,\n      // 明文/密文\n      lastselectConfIndex: -1,\n      // 最后选中的配置项索引\n      lastSelectConfig: {},\n      configList: this.curEnvDetail.envVars || [],\n      errorHandler: {\n        nameError: false,\n        valueError: false\n      } // 最后选中配置型obj\n    };\n  },\n  computed: {\n    confTextType() {\n      return [{\n        label: 'plaintext',\n        name: this.$t('environment.envInfo.clearText')\n      }, {\n        label: 'ciphertext',\n        name: this.$t('environment.envInfo.cipherText')\n      }];\n    }\n  },\n  watch: {\n    'curEnvDetail.envVars': {\n      handler(v) {\n        console.log(v);\n        this.configList = [...v];\n      }\n    }\n  },\n  methods: {\n    /**\r\n     * 编辑配置项\r\n     */\n    changeConfig(row, index) {\n      if (this.lastselectConfIndex === -1) {\n        this.lastselectConfIndex = index;\n        this.lastSelectConfig = row;\n        this.configList.forEach((item, index) => {\n          if (item.name === row.name) {\n            this.curIsPlaintext = !item.secure;\n            item.isEditItem = true;\n          }\n        });\n        this.lastSelectConfig = JSON.parse(JSON.stringify(row));\n        this.configList = [...this.configList];\n      }\n    },\n    /**\r\n     * 取消编辑配置项\r\n     */\n    cancelEdit(row, index) {\n      const target = this.lastSelectConfig;\n      if (target.isEditItem) {\n        target.isEditItem = false;\n        this.configList.splice(index, 1, target);\n      } else {\n        this.configList.shift();\n      }\n      this.errorHandler.nameError = false;\n      this.errorHandler.valueError = false;\n      this.lastselectConfIndex = -1;\n    },\n    /**\r\n     * 新增配置项\r\n     */\n    createConfigItem() {\n      const newItem = {\n        name: '',\n        value: '',\n        isSecure: 'plaintext',\n        secure: false,\n        isCreateItem: true,\n        isEditItem: false\n      };\n      this.lastselectConfIndex = 0;\n      this.lastSelectConfig = newItem;\n      this.configList.unshift(newItem);\n    },\n    validate(row) {\n      let errorCount = 0;\n      if (!row.name) {\n        this.errorHandler.nameError = true;\n        errorCount++;\n      }\n      if (!row.value) {\n        this.errorHandler.valueError = true;\n        errorCount++;\n      }\n      if (errorCount > 0) {\n        return false;\n      }\n      return true;\n    },\n    /**\r\n     * 保存编辑的配置项\r\n     */\n    async saveEditConfig(row) {\n      const isValid = this.validate(row);\n      if (!isValid) {\n        return;\n      }\n      let message, theme;\n      try {\n        await this.$store.dispatch('environment/toModifyEnv', {\n          projectId: this.projectId,\n          envHashId: this.envHashId,\n          params: {\n            ...this.curEnvDetail,\n            envVars: this.configList.map(item => {\n              return {\n                name: item.name,\n                value: item.value,\n                secure: item.isSecure !== 'plaintext'\n              };\n            })\n          }\n        });\n        message = this.$t('environment.successfullySaved');\n        theme = 'success';\n        this.$bkMessage({\n          message,\n          theme\n        });\n      } finally {\n        this.lastselectConfIndex = -1;\n        this.requestEnvDetail();\n      }\n    },\n    /**\r\n     * 删除环境变量\r\n     */\n    async deleteConfig(row, index) {\n      if (this.lastselectConfIndex === -1) {\n        const h = this.$createElement;\n        const content = h('p', {\n          style: {\n            textAlign: 'center'\n          }\n        }, `${this.$t('environment.deleteConfigItem')}?`);\n        this.$bkInfo({\n          title: this.$t('environment.delete'),\n          subHeader: content,\n          confirmFn: async () => {\n            let message, theme;\n            const modifyEenv = {\n              name: this.curEnvDetail.name,\n              desc: this.curEnvDetail.desc,\n              envType: this.curEnvDetail.envType,\n              envVars: this.configList.filter((item, i) => index !== i).map(item => ({\n                name: item.name,\n                value: item.value,\n                secure: item.isSecure !== 'plaintext'\n              }))\n            };\n            try {\n              await this.$store.dispatch('environment/toModifyEnv', {\n                projectId: this.projectId,\n                envHashId: this.envHashId,\n                params: modifyEenv\n              });\n              message = this.$t('environment.successfullyDeleted');\n              theme = 'success';\n              this.$bkMessage({\n                message,\n                theme\n              });\n            } finally {\n              this.lastselectConfIndex = -1;\n              this.requestEnvDetail();\n            }\n          }\n        });\n      }\n    },\n    /**\r\n     * 明文/密文切换\r\n     */\n    secureSelected(val) {\n      this.curIsPlaintext = val === 'plaintext';\n    }\n  }\n});\n;// CONCATENATED MODULE: ./src/components/envTabs/configTab.vue?vue&type=script&lang=js\n /* harmony default export */ const envTabs_configTabvue_type_script_lang_js = (configTabvue_type_script_lang_js); \n;// CONCATENATED MODULE: ./src/components/envTabs/configTab.vue\n\n\n\n\n\n/* normalize component */\n;\nvar configTab_component = (0,componentNormalizer/* default */.A)(\n  envTabs_configTabvue_type_script_lang_js,\n  configTabvue_type_template_id_a3542288_render,\n  configTabvue_type_template_id_a3542288_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ const configTab = (configTab_component.exports);\n// EXTERNAL MODULE: ../node_modules/core-js/modules/es.array.includes.js\nvar es_array_includes = __webpack_require__(7406);\n;// CONCATENATED MODULE: ../node_modules/babel-loader/lib/index.js!../node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[3]!../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/envTabs/nodeTab.vue?vue&type=template&id=773fc343\n\nvar nodeTabvue_type_template_id_773fc343_render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c(\"div\", {\n    staticClass: \"node-content-wrapper\"\n  }, [_c(\"div\", {\n    staticClass: \"node-content-header\"\n  }, [_c(\"bk-button\", {\n    directives: [{\n      name: \"perm\",\n      rawName: \"v-perm\",\n      value: {\n        hasPermission: _vm.curEnvDetail.canEdit,\n        disablePermissionApi: true,\n        permissionData: {\n          projectId: _vm.projectId,\n          resourceType: _vm.ENV_RESOURCE_TYPE,\n          resourceCode: _vm.envHashId,\n          action: _vm.ENV_RESOURCE_ACTION.EDIT\n        }\n      },\n      expression: \"{\\n                hasPermission: curEnvDetail.canEdit,\\n                disablePermissionApi: true,\\n                permissionData: {\\n                    projectId: projectId,\\n                    resourceType: ENV_RESOURCE_TYPE,\\n                    resourceCode: envHashId,\\n                    action: ENV_RESOURCE_ACTION.EDIT\\n                }\\n            }\"\n    }],\n    attrs: {\n      theme: \"primary\"\n    },\n    on: {\n      click: _vm.importNewNode\n    }\n  }, [_vm._v(\"\\n            \" + _vm._s(_vm.$t(\"environment.import\")) + \"\\n        \")])], 1), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"node-table\"\n  }, [_c(\"bk-table\", {\n    directives: [{\n      name: \"bkloading\",\n      rawName: \"v-bkloading\",\n      value: {\n        isLoading: _vm.tableLoading\n      },\n      expression: \"{ isLoading: tableLoading }\"\n    }],\n    ref: \"shareDiaglogTable\",\n    attrs: {\n      data: _vm.curNodeList,\n      pagination: _vm.pagination\n    },\n    on: {\n      \"page-change\": _vm.handlePageChange,\n      \"page-limit-change\": _vm.handlePageLimitChange\n    }\n  }, [_c(\"bk-table-column\", {\n    attrs: {\n      label: _vm.$t(\"environment.envInfo.name\"),\n      width: \"150\",\n      prop: \"displayName\",\n      \"show-overflow-tooltip\": \"\"\n    }\n  }), _vm._v(\" \"), _c(\"bk-table-column\", {\n    attrs: {\n      width: 150,\n      label: \"IP\",\n      prop: \"ip\",\n      \"show-overflow-tooltip\": \"\"\n    }\n  }), _vm._v(\" \"), _c(\"bk-table-column\", {\n    attrs: {\n      label: `${_vm.$t(\"environment.nodeInfo.source\")}/${_vm.$t(\"environment.nodeInfo.importer\")}`,\n      \"show-overflow-tooltip\": \"\"\n    },\n    scopedSlots: _vm._u([{\n      key: \"default\",\n      fn: function (props) {\n        return [_c(\"span\", {\n          staticClass: \"node-name\"\n        }, [_vm._v(_vm._s(props.row.nodeType))]), _vm._v(\" \"), _c(\"span\", [_vm._v(\"(\" + _vm._s(props.row.createdUser) + \")\")])];\n      }\n    }])\n  }), _vm._v(\" \"), _c(\"bk-table-column\", {\n    attrs: {\n      width: 150,\n      label: _vm.$t(\"environment.nodeInfo.os\"),\n      prop: \"osName\"\n    }\n  }), _vm._v(\" \"), _c(\"bk-table-column\", {\n    attrs: {\n      label: _vm.$t(\"environment.nodeInfo.cpuStatus\")\n    },\n    scopedSlots: _vm._u([{\n      key: \"default\",\n      fn: function (props) {\n        return [_c(\"div\", {\n          staticClass: \"status-cell\"\n        }, [_vm.successStatus.includes(props.row.nodeStatus) ? _c(\"StatusIcon\", {\n          attrs: {\n            status: \"success\"\n          }\n        }) : _vm.failStatus.includes(props.row.nodeStatus) ? _c(\"StatusIcon\", {\n          attrs: {\n            status: \"error\"\n          }\n        }) : [\"NOT_INSTALLED\"].includes(props.row.nodeStatus) ? _c(\"StatusIcon\", {\n          attrs: {\n            status: \"normal\"\n          }\n        }) : _vm.runningStatus.includes(props.row.nodeStatus) ? _c(\"div\", {\n          staticClass: \"bk-spin-loading bk-spin-loading-mini bk-spin-loading-primary loading-icon\"\n        }, [_c(\"div\", {\n          staticClass: \"rotate rotate1\"\n        }), _vm._v(\" \"), _c(\"div\", {\n          staticClass: \"rotate rotate2\"\n        }), _vm._v(\" \"), _c(\"div\", {\n          staticClass: \"rotate rotate3\"\n        }), _vm._v(\" \"), _c(\"div\", {\n          staticClass: \"rotate rotate4\"\n        }), _vm._v(\" \"), _c(\"div\", {\n          staticClass: \"rotate rotate5\"\n        }), _vm._v(\" \"), _c(\"div\", {\n          staticClass: \"rotate rotate6\"\n        }), _vm._v(\" \"), _c(\"div\", {\n          staticClass: \"rotate rotate7\"\n        }), _vm._v(\" \"), _c(\"div\", {\n          staticClass: \"rotate rotate8\"\n        })]) : _vm._e(), _vm._v(\" \"), _c(\"span\", {\n          staticClass: \"node-status\"\n        }, [_vm._v(_vm._s(_vm.$t(\"environment.nodeStatusMap\")[props.row.nodeStatus] || props.row.nodeStatus))])], 1)];\n      }\n    }])\n  }), _vm._v(\" \"), _c(\"bk-table-column\", {\n    attrs: {\n      width: 180,\n      label: _vm.$t(\"environment.operation\")\n    },\n    scopedSlots: _vm._u([{\n      key: \"default\",\n      fn: function (props) {\n        return [_c(\"span\", {\n          directives: [{\n            name: \"perm\",\n            rawName: \"v-perm\",\n            value: {\n              hasPermission: _vm.curEnvDetail.canEdit,\n              disablePermissionApi: true,\n              permissionData: {\n                projectId: _vm.projectId,\n                resourceType: _vm.ENV_RESOURCE_TYPE,\n                resourceCode: _vm.envHashId,\n                action: _vm.ENV_RESOURCE_ACTION.EDIT\n              }\n            },\n            expression: \"{\\n                            hasPermission: curEnvDetail.canEdit,\\n                            disablePermissionApi: true,\\n                            permissionData: {\\n                                projectId: projectId,\\n                                resourceType: ENV_RESOURCE_TYPE,\\n                                resourceCode: envHashId,\\n                                action: ENV_RESOURCE_ACTION.EDIT\\n                            }\\n                        }\"\n          }],\n          staticClass: \"node-delete delete-node-text\",\n          on: {\n            click: function ($event) {\n              $event.stopPropagation();\n              return _vm.confirmDelete(props.row);\n            }\n          }\n        }, [_vm._v(_vm._s(_vm.$t(\"environment.remove\")))])];\n      }\n    }])\n  })], 1)], 1), _vm._v(\" \"), _c(\"node-select\", {\n    attrs: {\n      \"node-select-conf\": _vm.nodeSelectConf,\n      \"search-info\": _vm.searchInfo,\n      \"cur-user-info\": _vm.curUserInfo,\n      \"row-list\": _vm.importNodeList,\n      \"change-created-user\": _vm.changeCreatedUser,\n      \"select-handler-conf\": _vm.selectHandlerConf,\n      \"confirm-fn\": _vm.confirmFn,\n      \"toggle-all-select\": _vm.toggleAllSelect,\n      loading: _vm.nodeDialogLoading,\n      \"cancel-fn\": _vm.cancelFn,\n      query: _vm.query\n    }\n  })], 1);\n};\nvar nodeTabvue_type_template_id_773fc343_staticRenderFns = [];\nnodeTabvue_type_template_id_773fc343_render._withStripped = true;\n\n;// CONCATENATED MODULE: ./src/components/envTabs/nodeTab.vue?vue&type=template&id=773fc343\n\n// EXTERNAL MODULE: ./src/components/devops/environment/node-select-dialog.vue + 5 modules\nvar node_select_dialog = __webpack_require__(9619);\n// EXTERNAL MODULE: ./src/components/status-icon.vue + 5 modules\nvar status_icon = __webpack_require__(8729);\n;// CONCATENATED MODULE: ../node_modules/babel-loader/lib/index.js!../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/envTabs/nodeTab.vue?vue&type=script&lang=js\n\n\n\n\n/* harmony default export */ const nodeTabvue_type_script_lang_js = ({\n  name: 'node-tab',\n  components: {\n    nodeSelect: node_select_dialog/* default */.A,\n    StatusIcon: status_icon/* default */.A\n  },\n  props: {\n    projectId: {\n      type: String,\n      required: true\n    },\n    envHashId: {\n      type: String,\n      required: true\n    },\n    curEnvDetail: {\n      type: Object,\n      default: () => ({})\n    },\n    requestEnvDetail: {\n      type: Function,\n      required: true\n    }\n  },\n  data() {\n    return {\n      ENV_RESOURCE_TYPE: permission/* ENV_RESOURCE_TYPE */.U,\n      ENV_RESOURCE_ACTION: permission/* ENV_RESOURCE_ACTION */.c5,\n      timer: null,\n      loading: {\n        isLoading: false,\n        title: ''\n      },\n      importNodeList: [],\n      // 导入的节点\n      nodeList: [],\n      // 环境的节点\n      nodeDialogLoading: {\n        isLoading: false,\n        title: ''\n      },\n      // 搜索节点\n      searchInfo: {\n        search: ''\n      },\n      // 选择节点\n      selectHandlerConf: {\n        curTotalCount: 0,\n        curDisplayCount: 0,\n        selectedNodeCount: 0,\n        allNodeSelected: false,\n        searchEmpty: false\n      },\n      // 节点选择弹窗\n      nodeSelectConf: {\n        isShow: false,\n        quickClose: false,\n        hasHeader: false,\n        unselected: true,\n        importText: this.$t('environment.import')\n      },\n      pagination: {\n        current: 1,\n        count: 0,\n        limit: 10\n      },\n      tableLoading: false,\n      runningStatus: ['CREATING', 'RUNNING', 'STARTING', 'STOPPING', 'RESTARTING', 'DELETING', 'BUILDING_IMAGE'],\n      successStatus: ['NORMAL', 'BUILD_IMAGE_SUCCESS'],\n      failStatus: ['ABNORMAL', 'DELETED', 'LOST', 'BUILD_IMAGE_FAILED', 'UNKNOWN', 'NOT_IN_CC', 'NOT_IN_CMDB']\n    };\n  },\n  computed: {\n    curUserInfo() {\n      return window.userInfo;\n    },\n    curNodeList() {\n      const {\n        limit,\n        current\n      } = this.pagination;\n      return this.nodeList.slice(limit * (current - 1), limit * current);\n    }\n  },\n  watch: {\n    importNodeList: {\n      deep: true,\n      handler: function (val) {\n        let curCount = 0;\n        const isSelected = this.importNodeList.some(item => {\n          return item.isChecked === true && !item.isEixtEnvNode;\n        });\n        if (isSelected) {\n          this.nodeSelectConf.unselected = false;\n        } else {\n          this.nodeSelectConf.unselected = true;\n        }\n        this.importNodeList.forEach(item => {\n          if (item.isChecked && !item.isEixtEnvNode) curCount++;\n        });\n        this.selectHandlerConf.selectedNodeCount = curCount;\n        this.decideToggle();\n      }\n    }\n  },\n  mounted() {\n    this.init();\n  },\n  beforeDestroy() {\n    clearTimeout(this.timer);\n  },\n  methods: {\n    /**\r\n     * 导入节点\r\n     */\n    async importEnvNode(nodeArr) {\n      let message, theme;\n      const params = [];\n      this.nodeDialogLoading.isLoading = true;\n      this.nodeSelectConf.importText = `${this.$t('environment.nodeInfo.importing')}...`;\n      nodeArr.forEach(item => {\n        params.push(item);\n      });\n      try {\n        await this.$store.dispatch('environment/importEnvNode', {\n          projectId: this.projectId,\n          envHashId: this.envHashId,\n          params: params\n        });\n        message = this.$t('environment.successfullyImported');\n        theme = 'success';\n        this.$bkMessage({\n          message,\n          theme\n        });\n      } catch (e) {\n        this.handleError(e, {\n          projectId: this.projectId,\n          resourceType: permission/* ENV_RESOURCE_TYPE */.U,\n          resourceCode: this.envHashId,\n          action: permission/* ENV_RESOURCE_ACTION */.c5.EDIT\n        });\n      } finally {\n        this.nodeSelectConf.isShow = false;\n        this.nodeDialogLoading.isLoading = false;\n        this.nodeSelectConf.importText = this.$t('environment.import');\n        this.requestList();\n        this.requestEnvDetail();\n      }\n    },\n    importNewNode() {\n      this.searchInfo = {\n        search: ''\n      };\n      this.nodeSelectConf.isShow = true;\n      this.requestNodeList();\n    },\n    /**\r\n     * 获取环境节点列表\r\n     */\n    async requestList() {\n      try {\n        this.tableLoading = true;\n        const res = await this.$store.dispatch('environment/requestEnvNodeList', {\n          projectId: this.projectId,\n          envHashId: this.envHashId,\n          params: {\n            page: -1\n          }\n        });\n        this.tableLoading = false;\n        this.nodeList = res.records;\n        this.pagination.count = res.count;\n        if (this.importNodeList.length) {\n          this.nodeList.forEach(vv => {\n            this.importNodeList.forEach(kk => {\n              if (vv.nodeHashId === kk.nodeHashId) {\n                kk.isChecked = true;\n                kk.isEixtEnvNode = true;\n              }\n            });\n          });\n        }\n        if (this.nodeList.length) {\n          this.loopCheck();\n        }\n      } catch (err) {\n        const message = err.message ? err.message : err;\n        const theme = 'error';\n        this.$bkMessage({\n          message,\n          theme\n        });\n      }\n    },\n    async init() {\n      try {\n        this.requestList();\n      } catch (err) {\n        this.$bkMessage({\n          message: err.message ? err.message : err,\n          theme: 'error'\n        });\n      } finally {\n        setTimeout(() => {\n          this.loading.isLoading = false;\n        }, 1000);\n      }\n    },\n    /**\r\n     *  轮询环境的节点列表状态\r\n     */\n    async loopCheck() {\n      const {\n        timer\n      } = this;\n      let res;\n      clearTimeout(timer);\n      for (let i = 0; i < this.nodeList.length; i++) {\n        const target = this.nodeList[i];\n        if (target.nodeType === this.$t('environment.BCSVirtualMachine') && (target.nodeStatus === 'ABNORMAL' || this.runningStatus.includes(target.nodeStatus) || target.nodeStatus === 'UNKNOWN' || !target.agentStatus)) {\n          res = true;\n          break;\n        } else {\n          res = false;\n        }\n      }\n      if (res) {\n        this.timer = setTimeout(async () => {\n          await this.requestList();\n        }, 10000);\n      }\n    },\n    /**\r\n     * 获取弹窗节点列表\r\n     */\n    async requestNodeList() {\n      this.nodeDialogLoading.isLoading = true;\n      try {\n        const res = await this.$store.dispatch('environment/requestNodeList', {\n          projectId: this.projectId,\n          envHashId: this.envHashId,\n          params: {\n            page: -1\n          }\n        });\n        this.importNodeList.splice(0, this.importNodeList.length);\n        res.records.forEach(item => {\n          item.isChecked = false;\n          item.isDisplay = true;\n          this.importNodeList.push(item);\n        });\n        this.importNodeList.forEach(kk => {\n          this.nodeList.forEach(vv => {\n            if (vv.nodeHashId === kk.nodeHashId) {\n              kk.isChecked = true;\n              kk.isEixtEnvNode = true;\n            }\n          });\n          if (this.curEnvDetail.envType === 'BUILD') {\n            if (kk.nodeType !== 'THIRDPARTY' || !kk.canUse) {\n              kk.isDisplay = false;\n            }\n          } else {\n            if (kk.nodeType === 'THIRDPARTY' || !kk.canUse) {\n              kk.isDisplay = false;\n            }\n          }\n        });\n        let curCount = 0;\n        this.importNodeList.forEach(item => {\n          if (item.isDisplay) curCount++;\n        });\n        this.selectHandlerConf.curTotalCount = curCount;\n        const result = this.importNodeList.some(element => {\n          return element.isDisplay;\n        });\n        if (result) {\n          this.selectHandlerConf.searchEmpty = false;\n        } else {\n          this.selectHandlerConf.searchEmpty = true;\n        }\n      } catch (err) {\n        const message = err.message ? err.message : err;\n        const theme = 'error';\n        this.$bkMessage({\n          message,\n          theme\n        });\n      } finally {\n        this.nodeDialogLoading.isLoading = false;\n      }\n    },\n    /**\r\n     * 删除节点\r\n     */\n    async confirmDelete(row) {\n      const params = [];\n      const id = row.nodeHashId;\n      params.push(id);\n      const h = this.$createElement;\n      const content = h('p', {\n        style: {\n          textAlign: 'center'\n        }\n      }, `${this.$t('environment.nodeInfo.removeNodetips', [row.displayName])}？`);\n      this.$bkInfo({\n        title: this.$t('environment.remove'),\n        subHeader: content,\n        confirmFn: async () => {\n          let message, theme;\n          try {\n            await this.$store.dispatch('environment/toDeleteEnvNode', {\n              projectId: this.projectId,\n              envHashId: this.envHashId,\n              params: params\n            });\n            message = this.$t('environment.successfullyDeleted');\n            theme = 'success';\n            this.$bkMessage({\n              message,\n              theme\n            });\n          } catch (e) {\n            this.handleError(e, {\n              projectId: this.projectId,\n              resourceType: permission/* ENV_RESOURCE_TYPE */.U,\n              resourceCode: this.envHashId,\n              action: permission/* ENV_RESOURCE_ACTION */.c5.EDIT\n            });\n          } finally {\n            this.requestList();\n          }\n        }\n      });\n    },\n    /**\r\n     * 弹窗全选联动\r\n     */\n    decideToggle() {\n      let curCount = 0;\n      let curCheckCount = 0;\n      this.importNodeList.forEach(item => {\n        if (item.isDisplay) {\n          curCount++;\n          if (item.isChecked) curCheckCount++;\n        }\n      });\n      this.selectHandlerConf.curDisplayCount = curCount;\n      if (curCount === curCheckCount) {\n        this.selectHandlerConf.allNodeSelected = true;\n      } else {\n        this.selectHandlerConf.allNodeSelected = false;\n      }\n    },\n    /**\r\n     * 节点全选\r\n     */\n    toggleAllSelect(value) {\n      this.selectHandlerConf.allNodeSelected = value;\n      if (this.selectHandlerConf.allNodeSelected) {\n        this.importNodeList.forEach(item => {\n          if (item.isDisplay && !item.isEixtEnvNode) {\n            item.isChecked = true;\n          }\n        });\n      } else {\n        this.importNodeList.forEach(item => {\n          if (item.isDisplay && !item.isEixtEnvNode) {\n            item.isChecked = false;\n          }\n        });\n      }\n    },\n    /**\r\n     * 搜索节点\r\n     */\n    query(target) {\n      if (target.length) {\n        target.filter(item => {\n          return item && item.length;\n        });\n        this.importNodeList.forEach(item => {\n          const str = item.ip;\n          if (this.curEnvDetail.envType === 'BUILD') {\n            for (let i = 0; i < target.length; i++) {\n              if (target[i] && str === target[i] && item.nodeType === 'THIRDPARTY' && item.canUse) {\n                item.isDisplay = true;\n                break;\n              } else {\n                item.isDisplay = false;\n              }\n            }\n          } else {\n            for (let i = 0; i < target.length; i++) {\n              if (target[i] && str === target[i] && item.nodeType !== 'THIRDPARTY' && item.canUse) {\n                item.isDisplay = true;\n                break;\n              } else {\n                item.isDisplay = false;\n              }\n            }\n          }\n        });\n        const result = this.importNodeList.some(element => {\n          return element.isDisplay;\n        });\n        if (result) {\n          this.selectHandlerConf.searchEmpty = false;\n        } else {\n          this.selectHandlerConf.searchEmpty = true;\n        }\n      } else {\n        this.selectHandlerConf.searchEmpty = false;\n        if (this.curEnvDetail.envType === 'BUILD') {\n          this.importNodeList.forEach(item => {\n            if (item.nodeType === 'THIRDPARTY' && item.canUse) {\n              item.isDisplay = true;\n            }\n          });\n        } else {\n          this.importNodeList.forEach(item => {\n            if (item.nodeType !== 'THIRDPARTY' && item.canUse) {\n              item.isDisplay = true;\n            }\n          });\n        }\n      }\n      this.decideToggle();\n    },\n    confirmFn() {\n      if (!this.nodeDialogLoading.isLoading) {\n        const nodeArr = [];\n        this.importNodeList.forEach(item => {\n          if (item.isChecked && !item.isEixtEnvNode) {\n            nodeArr.push(item.nodeHashId);\n          }\n        });\n        this.importEnvNode(nodeArr);\n      }\n    },\n    cancelFn() {\n      if (!this.nodeDialogLoading.isLoading) {\n        this.nodeSelectConf.isShow = false;\n        this.selectHandlerConf.searchEmpty = false;\n        this.nodeSelectConf.importText = this.$t('environment.import');\n      }\n    },\n    async changeCreatedUser(id) {\n      this.$bkInfo({\n        title: this.$t('environment.nodeInfo.modifyImporter'),\n        subTitle: this.$t('environment.nodeInfo.modifyOperatorTips'),\n        confirmFn: async () => {\n          let message, theme;\n          try {\n            await this.$store.dispatch('environment/changeCreatedUser', {\n              projectId: this.projectId,\n              nodeHashId: id\n            });\n            message = this.$t('environment.successfullyModified');\n            theme = 'success';\n          } catch (err) {\n            message = err.message ? err.message : err;\n            theme = 'error';\n          } finally {\n            this.$bkMessage({\n              message,\n              theme\n            });\n            this.requestList();\n          }\n        }\n      });\n    },\n    handlePageChange(page) {\n      this.pagination.current = page;\n    },\n    handlePageLimitChange(limit) {\n      this.pagination.current = 1;\n      this.pagination.limit = limit;\n    }\n  }\n});\n;// CONCATENATED MODULE: ./src/components/envTabs/nodeTab.vue?vue&type=script&lang=js\n /* harmony default export */ const envTabs_nodeTabvue_type_script_lang_js = (nodeTabvue_type_script_lang_js); \n// EXTERNAL MODULE: ../node_modules/mini-css-extract-plugin/dist/loader.js??clonedRuleSet-3.use[0]!./node_modules/css-loader/dist/cjs.js!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/sass-loader/dist/cjs.js!../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/envTabs/nodeTab.vue?vue&type=style&index=0&id=773fc343&prod&lang=scss\nvar nodeTabvue_type_style_index_0_id_773fc343_prod_lang_scss = __webpack_require__(8062);\n;// CONCATENATED MODULE: ./src/components/envTabs/nodeTab.vue?vue&type=style&index=0&id=773fc343&prod&lang=scss\n\n;// CONCATENATED MODULE: ./src/components/envTabs/nodeTab.vue\n\n\n\n;\n\n\n/* normalize component */\n\nvar nodeTab_component = (0,componentNormalizer/* default */.A)(\n  envTabs_nodeTabvue_type_script_lang_js,\n  nodeTabvue_type_template_id_773fc343_render,\n  nodeTabvue_type_template_id_773fc343_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ const nodeTab = (nodeTab_component.exports);\n;// CONCATENATED MODULE: ../node_modules/babel-loader/lib/index.js!../node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[3]!../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/envTabs/settingTab.vue?vue&type=template&id=5c0c8b65\nvar settingTabvue_type_template_id_5c0c8b65_render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c(\"div\", {\n    staticClass: \"env-setting-tab-wrapper\"\n  }, [_c(\"bk-button\", {\n    directives: [{\n      name: \"perm\",\n      rawName: \"v-perm\",\n      value: {\n        hasPermission: _vm.curEnvDetail.canEdit,\n        disablePermissionApi: true,\n        permissionData: {\n          projectId: _vm.projectId,\n          resourceType: _vm.ENV_RESOURCE_TYPE,\n          resourceCode: _vm.envHashId,\n          action: _vm.ENV_RESOURCE_ACTION.EDIT\n        }\n      },\n      expression: \"{\\n            hasPermission: curEnvDetail.canEdit,\\n            disablePermissionApi: true,\\n            permissionData: {\\n                projectId: projectId,\\n                resourceType: ENV_RESOURCE_TYPE,\\n                resourceCode: envHashId,\\n                action: ENV_RESOURCE_ACTION.EDIT\\n            }\\n        }\"\n    }],\n    staticClass: \"setting-header\",\n    attrs: {\n      theme: \"primary\"\n    },\n    on: {\n      click: _vm.toggleShareProject\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"environment.addProject\")))]), _vm._v(\" \"), _c(\"bk-table\", {\n    attrs: {\n      data: _vm.shareEnvProjectList,\n      pagination: _vm.pagination\n    },\n    on: {\n      \"page-change\": _vm.handlePageChange,\n      \"page-limit-change\": _vm.handlePageLimitChange\n    }\n  }, [_c(\"bk-table-column\", {\n    attrs: {\n      label: _vm.$t(\"environment.project\"),\n      prop: \"name\"\n    }\n  }), _vm._v(\" \"), _c(\"bk-table-column\", {\n    attrs: {\n      label: _vm.$t(\"environment.operateUser\"),\n      prop: \"creator\"\n    }\n  }), _vm._v(\" \"), _c(\"bk-table-column\", {\n    attrs: {\n      label: _vm.$t(\"environment.operateTime\"),\n      prop: \"updateTime\"\n    }\n  }), _vm._v(\" \"), _c(\"bk-table-column\", {\n    attrs: {\n      label: _vm.$t(\"environment.operation\"),\n      width: \"150\"\n    },\n    scopedSlots: _vm._u([{\n      key: \"default\",\n      fn: function (props) {\n        return [_c(\"bk-button\", {\n          directives: [{\n            name: \"perm\",\n            rawName: \"v-perm\",\n            value: {\n              permissionData: {\n                projectId: _vm.projectId,\n                resourceType: _vm.ENV_RESOURCE_TYPE,\n                resourceCode: _vm.envHashId,\n                action: _vm.ENV_RESOURCE_ACTION.EDIT\n              }\n            },\n            expression: \"{\\n                        permissionData: {\\n                            projectId: projectId,\\n                            resourceType: ENV_RESOURCE_TYPE,\\n                            resourceCode: envHashId,\\n                            action: ENV_RESOURCE_ACTION.EDIT\\n                        }\\n                    }\"\n          }],\n          staticClass: \"mr10\",\n          attrs: {\n            text: \"\"\n          },\n          on: {\n            click: function ($event) {\n              return _vm.remove(props.row);\n            }\n          }\n        }, [_vm._v(_vm._s(_vm.$t(\"environment.remove\")))])];\n      }\n    }])\n  })], 1), _vm._v(\" \"), _c(\"select-env-share-dialog\", {\n    attrs: {\n      \"show-project-dialog\": _vm.showProjectDialog,\n      \"project-id\": _vm.projectId,\n      \"env-hash-id\": _vm.envHashId\n    },\n    on: {\n      confirm: _vm.handleShareEnv,\n      cancel: _vm.handleCancel\n    }\n  })], 1);\n};\nvar settingTabvue_type_template_id_5c0c8b65_staticRenderFns = [];\nsettingTabvue_type_template_id_5c0c8b65_render._withStripped = true;\n\n;// CONCATENATED MODULE: ./src/components/envTabs/settingTab.vue?vue&type=template&id=5c0c8b65\n\n// EXTERNAL MODULE: external \"Vuex\"\nvar external_Vuex_ = __webpack_require__(9335);\n;// CONCATENATED MODULE: ../node_modules/babel-loader/lib/index.js!../node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[3]!../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/envTabs/select-env-share-dialog.vue?vue&type=template&id=162b350d\nvar select_env_share_dialogvue_type_template_id_162b350d_render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c(\"bk-dialog\", {\n    attrs: {\n      width: \"900\",\n      \"header-position\": \"left\",\n      value: _vm.showProjectDialog,\n      \"mask-close\": false,\n      \"close-icon\": false\n    },\n    on: {\n      confirm: _vm.handleConfirm,\n      cancel: _vm.handleCancel\n    }\n  }, [_c(\"header\", {\n    staticClass: \"share-project-dialog-header\"\n  }, [_c(\"h2\", [_vm._v(_vm._s(_vm.$t(\"environment.addProject\")))]), _vm._v(\" \"), _c(\"bk-input\", {\n    staticClass: \"share-project-search-input\",\n    attrs: {\n      \"right-icon\": \"bk-icon icon-search\",\n      placeholder: _vm.$t(\"environment.search\"),\n      clearable: true,\n      \"show-clear-only-hover\": \"\"\n    },\n    on: {\n      change: _vm.handleSearch\n    },\n    model: {\n      value: _vm.searchVal,\n      callback: function ($$v) {\n        _vm.searchVal = $$v;\n      },\n      expression: \"searchVal\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"env-share-project-list\"\n  }, [_c(\"bk-table\", {\n    ref: \"shareDiaglogTable\",\n    attrs: {\n      height: _vm.tableHieght,\n      data: _vm.projects,\n      pagination: _vm.pagination\n    },\n    on: {\n      \"page-change\": _vm.handlePageChange,\n      \"page-limit-change\": _vm.handlePageLimitChange,\n      \"selection-change\": _vm.handleSelectChange\n    }\n  }, [_c(\"bk-table-column\", {\n    attrs: {\n      type: \"selection\",\n      width: \"60\"\n    }\n  }), _vm._v(\" \"), _c(\"bk-table-column\", {\n    attrs: {\n      label: _vm.$t(\"environment.project\"),\n      prop: \"name\"\n    }\n  }), _vm._v(\" \"), _c(\"bk-table-column\", {\n    attrs: {\n      label: _vm.$t(\"environment.projectId\"),\n      prop: \"projectId\"\n    }\n  }), _vm._v(\" \"), _c(\"bk-table-column\", {\n    attrs: {\n      label: _vm.$t(\"environment.envInfo.creator\"),\n      prop: \"creator\"\n    }\n  }), _vm._v(\" \"), _c(\"bk-table-column\", {\n    attrs: {\n      label: _vm.$t(\"environment.envInfo.creationTime\"),\n      prop: \"formatTime\"\n    }\n  })], 1)], 1)]);\n};\nvar select_env_share_dialogvue_type_template_id_162b350d_staticRenderFns = [];\nselect_env_share_dialogvue_type_template_id_162b350d_render._withStripped = true;\n\n;// CONCATENATED MODULE: ./src/components/envTabs/select-env-share-dialog.vue?vue&type=template&id=162b350d\n\n;// CONCATENATED MODULE: ../node_modules/babel-loader/lib/index.js!../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/envTabs/select-env-share-dialog.vue?vue&type=script&lang=js\n\n\n/* harmony default export */ const select_env_share_dialogvue_type_script_lang_js = ({\n  name: 'select-env-share-dialog',\n  props: {\n    showProjectDialog: Boolean,\n    projectId: {\n      type: String,\n      required: true\n    },\n    envHashId: {\n      type: String,\n      required: true\n    }\n  },\n  data() {\n    return {\n      pagination: {\n        current: 1,\n        count: 20,\n        limit: 10\n      },\n      selection: [],\n      projects: [],\n      searchVal: '',\n      searching: false\n    };\n  },\n  computed: {\n    handleSearch() {\n      return (0,util/* throttle */.nF)(this.getProjects, 500);\n    },\n    tableHieght() {\n      return window.innerHeight * 0.4;\n    }\n  },\n  watch: {\n    showProjectDialog(val) {\n      if (!val) {\n        this.reset();\n      } else {\n        this.getProjects();\n      }\n    }\n  },\n  created() {\n    this.getProjects();\n  },\n  methods: {\n    ...(0,external_Vuex_.mapActions)('environment', ['requestProjects']),\n    async getProjects() {\n      if (this.searching) return;\n      try {\n        this.searching = true;\n        const {\n          records,\n          count\n        } = await this.requestProjects({\n          projectId: this.projectId,\n          envHashId: this.envHashId,\n          page: this.searchVal ? 1 : this.pagination.current,\n          pageSize: this.pagination.limit,\n          search: this.searchVal\n        });\n        this.projects = records.map(item => ({\n          ...item,\n          formatTime: (0,util/* convertTime */.t)(item.createTime)\n        }));\n        this.pagination.count = count;\n      } catch (error) {\n        console.trace(error);\n      } finally {\n        this.searching = false;\n      }\n    },\n    handlePageChange(current) {\n      this.pagination.current = current;\n      this.$nextTick(() => {\n        this.getProjects();\n      });\n    },\n    handlePageLimitChange(limit) {\n      this.pagination.limit = limit;\n      this.$nextTick(() => {\n        this.getProjects();\n      });\n    },\n    handleSelectChange(selection) {\n      this.selection = selection;\n    },\n    reset() {\n      if (this.$refs.shareDiaglogTable) {\n        this.$refs.shareDiaglogTable.clearSelection();\n      }\n      this.pagination.current = 1;\n      this.searchVal = '';\n    },\n    handleConfirm() {\n      this.$emit('confirm', this.selection);\n    },\n    handleCancel() {\n      this.$emit('cancel');\n    }\n  }\n});\n;// CONCATENATED MODULE: ./src/components/envTabs/select-env-share-dialog.vue?vue&type=script&lang=js\n /* harmony default export */ const envTabs_select_env_share_dialogvue_type_script_lang_js = (select_env_share_dialogvue_type_script_lang_js); \n// EXTERNAL MODULE: ../node_modules/mini-css-extract-plugin/dist/loader.js??clonedRuleSet-3.use[0]!./node_modules/css-loader/dist/cjs.js!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/sass-loader/dist/cjs.js!../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/envTabs/select-env-share-dialog.vue?vue&type=style&index=0&id=162b350d&prod&lang=scss\nvar select_env_share_dialogvue_type_style_index_0_id_162b350d_prod_lang_scss = __webpack_require__(2141);\n;// CONCATENATED MODULE: ./src/components/envTabs/select-env-share-dialog.vue?vue&type=style&index=0&id=162b350d&prod&lang=scss\n\n;// CONCATENATED MODULE: ./src/components/envTabs/select-env-share-dialog.vue\n\n\n\n;\n\n\n/* normalize component */\n\nvar select_env_share_dialog_component = (0,componentNormalizer/* default */.A)(\n  envTabs_select_env_share_dialogvue_type_script_lang_js,\n  select_env_share_dialogvue_type_template_id_162b350d_render,\n  select_env_share_dialogvue_type_template_id_162b350d_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ const select_env_share_dialog = (select_env_share_dialog_component.exports);\n;// CONCATENATED MODULE: ../node_modules/babel-loader/lib/index.js!../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/envTabs/settingTab.vue?vue&type=script&lang=js\n\n\n\n\n/* harmony default export */ const settingTabvue_type_script_lang_js = ({\n  name: 'setting-tab',\n  components: {\n    selectEnvShareDialog: select_env_share_dialog\n  },\n  props: {\n    projectId: {\n      type: String,\n      required: true\n    },\n    envHashId: {\n      type: String,\n      required: true\n    },\n    curEnvDetail: {\n      type: Object,\n      default: () => ({})\n    },\n    requestEnvDetail: {\n      type: Function,\n      required: true\n    }\n  },\n  data() {\n    return {\n      shareEnvProjectList: [],\n      showProjectDialog: false,\n      ENV_RESOURCE_ACTION: permission/* ENV_RESOURCE_ACTION */.c5,\n      ENV_RESOURCE_TYPE: permission/* ENV_RESOURCE_TYPE */.U,\n      pagination: {\n        current: 1,\n        count: 0,\n        limit: 20\n      }\n    };\n  },\n  created() {\n    this.fetchEnvProjects();\n  },\n  methods: {\n    ...(0,external_Vuex_.mapActions)('environment', ['requestShareEnvProjectList', 'removeProjectShare', 'requestProjects', 'shareEnv']),\n    async fetchEnvProjects() {\n      const res = await this.requestShareEnvProjectList({\n        projectId: this.projectId,\n        envHashId: this.envHashId,\n        page: this.pagination.current,\n        pageSize: this.pagination.limit\n      });\n      const {\n        records,\n        count,\n        page\n      } = res;\n      this.shareEnvProjectList = [...records.map(record => ({\n        ...record,\n        updateTime: (0,util/* convertTime */.t)(record.updateTime * 1000)\n      }))];\n      if (page === 1) {\n        this.shareEnvProjectList.unshift({\n          projectId: this.projectId,\n          name: this.curEnvDetail.projectName,\n          type: 'PROJECT',\n          creator: this.curEnvDetail.updatedUser,\n          isDefault: true,\n          updateTime: (0,util/* convertTime */.t)(this.curEnvDetail.updatedTime * 1000)\n        });\n      }\n      this.pagination.count = count + 1;\n    },\n    toggleShareProject() {\n      this.showProjectDialog = !this.showProjectDialog;\n    },\n    handlePageChange(current) {\n      this.pagination.current = current;\n      this.$nextTick(() => {\n        this.fetchEnvProjects();\n      });\n    },\n    handlePageLimitChange(limit) {\n      this.pagination.limit = limit;\n      this.$nextTick(() => {\n        this.fetchEnvProjects();\n      });\n    },\n    actionWrapper(action, message) {\n      var _this = this;\n      return async function () {\n        try {\n          await action(...arguments);\n          _this.fetchEnvProjects();\n          _this.$bkMessage({\n            message: message,\n            theme: 'success'\n          });\n        } catch (e) {\n          _this.handleError(e, {\n            projectId: _this.projectId,\n            resourceType: permission/* ENV_RESOURCE_TYPE */.U,\n            resourceCode: _this.envHashId,\n            action: permission/* ENV_RESOURCE_ACTION */.c5.EDIT\n          });\n        }\n      };\n    },\n    async handleShareEnv(selection) {\n      const fn = this.actionWrapper(async () => {\n        const sharedProjects = selection.map(item => ({\n          projectId: item.projectId,\n          name: item.name,\n          type: 'PROJECT',\n          creator: item.creator,\n          createTime: item.createTime,\n          updateTime: item.updateTime\n        }));\n        const res = await this.shareEnv({\n          projectId: this.projectId,\n          envHashId: this.envHashId,\n          body: {\n            sharedProjects\n          }\n        });\n        this.fetchEnvProjects();\n        return res;\n      }, this.$t('environment.shareEnvSuc'));\n      await fn();\n      this.toggleShareProject();\n    },\n    handleCancel() {\n      this.toggleShareProject();\n    },\n    async remove(_ref) {\n      let {\n        gitProjectId,\n        name\n      } = _ref;\n      const fn = this.actionWrapper(async () => {\n        await this.removeProjectShare({\n          projectId: this.projectId,\n          envHashId: this.envHashId,\n          sharedProjectId: gitProjectId\n        });\n      }, this.$t('environment.removeShareEnvProjectSuc', [name]));\n      this.$bkInfo({\n        type: 'warning',\n        title: this.$t('environment.removeShareProjectConfirm', [name]),\n        maskClose: true,\n        confirmFn: fn\n      });\n    }\n  }\n});\n;// CONCATENATED MODULE: ./src/components/envTabs/settingTab.vue?vue&type=script&lang=js\n /* harmony default export */ const envTabs_settingTabvue_type_script_lang_js = (settingTabvue_type_script_lang_js); \n// EXTERNAL MODULE: ../node_modules/mini-css-extract-plugin/dist/loader.js??clonedRuleSet-3.use[0]!./node_modules/css-loader/dist/cjs.js!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/sass-loader/dist/cjs.js!../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/envTabs/settingTab.vue?vue&type=style&index=0&id=5c0c8b65&prod&lang=scss\nvar settingTabvue_type_style_index_0_id_5c0c8b65_prod_lang_scss = __webpack_require__(3506);\n;// CONCATENATED MODULE: ./src/components/envTabs/settingTab.vue?vue&type=style&index=0&id=5c0c8b65&prod&lang=scss\n\n;// CONCATENATED MODULE: ./src/components/envTabs/settingTab.vue\n\n\n\n;\n\n\n/* normalize component */\n\nvar settingTab_component = (0,componentNormalizer/* default */.A)(\n  envTabs_settingTabvue_type_script_lang_js,\n  settingTabvue_type_template_id_5c0c8b65_render,\n  settingTabvue_type_template_id_5c0c8b65_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ const settingTab = (settingTab_component.exports);\n;// CONCATENATED MODULE: ../node_modules/babel-loader/lib/index.js!../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/views/env_detail.vue?vue&type=script&lang=js\n\n\n\n\n\n\n/* harmony default export */ const env_detailvue_type_script_lang_js = ({\n  components: {\n    baseTab: baseTab,\n    configTab: configTab,\n    nodeTab: nodeTab,\n    settingTab: settingTab\n  },\n  data() {\n    return {\n      curItemTab: 'node',\n      // 当前tab(节点/配置项)\n      curEnvDetail: {},\n      // 当前环境信息\n      loading: {\n        isLoading: false,\n        title: ''\n      }\n    };\n  },\n  computed: {\n    isBuildEnv() {\n      return this.curEnvDetail && this.curEnvDetail.envType === 'BUILD';\n    },\n    tabs() {\n      const tabs = [{\n        cls: 'node-list',\n        tabName: 'node',\n        label: 'node',\n        comp: nodeTab\n      }, {\n        cls: 'config-item',\n        tabName: 'config',\n        label: 'configItem',\n        comp: configTab\n      }, {\n        cls: 'base-item',\n        tabName: 'base',\n        label: 'basicInfo',\n        comp: baseTab\n      }];\n      if (this.isBuildEnv) {\n        tabs.push({\n          cls: 'base-item',\n          tabName: 'setting',\n          label: 'setting',\n          comp: settingTab\n        });\n      }\n      return tabs;\n    },\n    activeTabComp() {\n      const activeTab = this.tabs.find(tab => tab.tabName === this.curItemTab);\n      return activeTab && activeTab.comp ? activeTab.comp : null;\n    },\n    projectId() {\n      return this.$route.params.projectId;\n    },\n    envHashId() {\n      return this.$route.params.envId;\n    }\n  },\n  watch: {\n    projectId: async function (val) {\n      this.$router.push({\n        name: 'envList'\n      });\n    }\n  },\n  created() {\n    // 获取环境详情\n    this.requestEnvDetail();\n  },\n  methods: {\n    toEnvList() {\n      this.$router.push({\n        name: 'envList'\n      });\n    },\n    /**\r\n     * 获取环境详情\r\n     */\n    async requestEnvDetail() {\n      try {\n        this.loading.isLoading = true;\n        this.loading.title = this.$t('environment.loadingTitle');\n        const res = await this.$store.dispatch('environment/requestEnvDetail', {\n          projectId: this.projectId,\n          envHashId: this.envHashId\n        });\n        this.curEnvDetail = res;\n        res.envVars.forEach(item => {\n          item.isCreateItem = false;\n          item.isEditItem = false;\n          if (item.secure) {\n            item.isSecure = 'ciphertext';\n          } else {\n            item.isSecure = 'plaintext';\n          }\n        });\n      } catch (e) {\n        this.handleError(e, {\n          projectId: this.projectId,\n          resourceType: permission/* ENV_RESOURCE_TYPE */.U,\n          resourceCode: this.envHashId,\n          action: permission/* ENV_RESOURCE_ACTION */.c5.VIEW\n        });\n      } finally {\n        this.loading.isLoading = false;\n      }\n    },\n    /**\r\n     * 切换节点/配置项\r\n     */\n    changeTab(curTab) {\n      this.curItemTab = curTab;\n      this.$nextTick(() => {\n        const obj = this.$el.querySelector('.config-item');\n        if (curTab === 'config') {\n          obj.className += ' ' + 'config-active';\n        } else {\n          obj.classList.remove('.config-active');\n        }\n      });\n    },\n    /**\r\n     * 处理时间格式\r\n     */\n    localConvertTime(timestamp) {\n      return (0,util/* convertTime */.t)(timestamp * 1000);\n    }\n  }\n});\n;// CONCATENATED MODULE: ./src/views/env_detail.vue?vue&type=script&lang=js\n /* harmony default export */ const views_env_detailvue_type_script_lang_js = (env_detailvue_type_script_lang_js); \n// EXTERNAL MODULE: ../node_modules/mini-css-extract-plugin/dist/loader.js??clonedRuleSet-3.use[0]!./node_modules/css-loader/dist/cjs.js!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/sass-loader/dist/cjs.js!../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/views/env_detail.vue?vue&type=style&index=0&id=6e31c18a&prod&lang=scss\nvar env_detailvue_type_style_index_0_id_6e31c18a_prod_lang_scss = __webpack_require__(8610);\n;// CONCATENATED MODULE: ./src/views/env_detail.vue?vue&type=style&index=0&id=6e31c18a&prod&lang=scss\n\n;// CONCATENATED MODULE: ./src/views/env_detail.vue\n\n\n\n;\n\n\n/* normalize component */\n\nvar env_detail_component = (0,componentNormalizer/* default */.A)(\n  views_env_detailvue_type_script_lang_js,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ const env_detail = (env_detail_component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2470\n");

/***/ })

}]);