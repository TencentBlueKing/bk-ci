/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkdevops_atomstore"] = self["webpackChunkdevops_atomstore"] || []).push([[278],{

/***/ 4085:
/***/ ((module) => {

eval("var nestRE = /^(attrs|props|on|nativeOn|class|style|hook)$/\n\nmodule.exports = function mergeJSXProps (objs) {\n  return objs.reduce(function (a, b) {\n    var aa, bb, key, nestedKey, temp\n    for (key in b) {\n      aa = a[key]\n      bb = b[key]\n      if (aa && nestRE.test(key)) {\n        // normalize class\n        if (key === 'class') {\n          if (typeof aa === 'string') {\n            temp = aa\n            a[key] = aa = {}\n            aa[temp] = true\n          }\n          if (typeof bb === 'string') {\n            temp = bb\n            b[key] = bb = {}\n            bb[temp] = true\n          }\n        }\n        if (key === 'on' || key === 'nativeOn' || key === 'hook') {\n          // merge functions\n          for (nestedKey in bb) {\n            aa[nestedKey] = mergeFn(aa[nestedKey], bb[nestedKey])\n          }\n        } else if (Array.isArray(aa)) {\n          a[key] = aa.concat(bb)\n        } else if (Array.isArray(bb)) {\n          a[key] = [aa].concat(bb)\n        } else {\n          for (nestedKey in bb) {\n            aa[nestedKey] = bb[nestedKey]\n          }\n        }\n      } else {\n        a[key] = b[key]\n      }\n    }\n    return a\n  }, {})\n}\n\nfunction mergeFn (a, b) {\n  return function () {\n    a && a.apply(this, arguments)\n    b && b.apply(this, arguments)\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDA4NS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGV2b3BzLWF0b21zdG9yZS8uLi9ub2RlX21vZHVsZXMvYmFiZWwtaGVscGVyLXZ1ZS1qc3gtbWVyZ2UtcHJvcHMvaW5kZXguanM/MjEyMCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbmVzdFJFID0gL14oYXR0cnN8cHJvcHN8b258bmF0aXZlT258Y2xhc3N8c3R5bGV8aG9vaykkL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG1lcmdlSlNYUHJvcHMgKG9ianMpIHtcbiAgcmV0dXJuIG9ianMucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgdmFyIGFhLCBiYiwga2V5LCBuZXN0ZWRLZXksIHRlbXBcbiAgICBmb3IgKGtleSBpbiBiKSB7XG4gICAgICBhYSA9IGFba2V5XVxuICAgICAgYmIgPSBiW2tleV1cbiAgICAgIGlmIChhYSAmJiBuZXN0UkUudGVzdChrZXkpKSB7XG4gICAgICAgIC8vIG5vcm1hbGl6ZSBjbGFzc1xuICAgICAgICBpZiAoa2V5ID09PSAnY2xhc3MnKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBhYSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRlbXAgPSBhYVxuICAgICAgICAgICAgYVtrZXldID0gYWEgPSB7fVxuICAgICAgICAgICAgYWFbdGVtcF0gPSB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0eXBlb2YgYmIgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0ZW1wID0gYmJcbiAgICAgICAgICAgIGJba2V5XSA9IGJiID0ge31cbiAgICAgICAgICAgIGJiW3RlbXBdID0gdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoa2V5ID09PSAnb24nIHx8IGtleSA9PT0gJ25hdGl2ZU9uJyB8fCBrZXkgPT09ICdob29rJykge1xuICAgICAgICAgIC8vIG1lcmdlIGZ1bmN0aW9uc1xuICAgICAgICAgIGZvciAobmVzdGVkS2V5IGluIGJiKSB7XG4gICAgICAgICAgICBhYVtuZXN0ZWRLZXldID0gbWVyZ2VGbihhYVtuZXN0ZWRLZXldLCBiYltuZXN0ZWRLZXldKVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFhKSkge1xuICAgICAgICAgIGFba2V5XSA9IGFhLmNvbmNhdChiYilcbiAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGJiKSkge1xuICAgICAgICAgIGFba2V5XSA9IFthYV0uY29uY2F0KGJiKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZvciAobmVzdGVkS2V5IGluIGJiKSB7XG4gICAgICAgICAgICBhYVtuZXN0ZWRLZXldID0gYmJbbmVzdGVkS2V5XVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYVtrZXldID0gYltrZXldXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhXG4gIH0sIHt9KVxufVxuXG5mdW5jdGlvbiBtZXJnZUZuIChhLCBiKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgYSAmJiBhLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICBiICYmIGIuYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4085\n");

/***/ }),

/***/ 1278:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"Z\": () => (/* binding */ components_upload)\n});\n\n;// CONCATENATED MODULE: ../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/upload/index.vue?vue&type=template&id=62f4c554&scoped=true&\nvar render = function () {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"section\",\n    [\n      _c(\n        \"upload\",\n        {\n          ref: \"upload\",\n          attrs: {\n            action: \"/support/api/user/file/upload\",\n            \"list-type\": \"picture-card\",\n            accept: _vm.accept,\n            \"on-success\": _vm.handleUpload,\n            \"before-upload\": _vm.checkUpload,\n            \"file-list\": _vm.fileList,\n            limit: _vm.limit,\n          },\n          scopedSlots: _vm._u([\n            {\n              key: \"file\",\n              fn: function (ref) {\n                var file = ref.file\n                return _c(\n                  \"div\",\n                  { staticClass: \"upload-list\" },\n                  [\n                    _vm.type === \"PICTURE\"\n                      ? _c(\"span\", {\n                          staticClass: \"media-item media-image\",\n                          style: \"background-image: url(\" + file.mediaUrl + \")\",\n                          on: {\n                            click: function ($event) {\n                              _vm.imgSrc = file.mediaUrl\n                            },\n                          },\n                        })\n                      : _c(\"video\", {\n                          staticStyle: {\n                            \"object-fit\": \"fill\",\n                            width: \"100%\",\n                            height: \"100%\",\n                          },\n                          attrs: {\n                            preload: \"auto\",\n                            \"webkit-playsinline\": \"true\",\n                            playsinline: \"true\",\n                            \"x-webkit-airplay\": \"allow\",\n                            \"x5-video-player-type\": \"h5\",\n                            \"x5-video-player-fullscreen\": \"true\",\n                            \"x5-video-orientation\": \"portraint\",\n                            src: file.mediaUrl,\n                          },\n                        }),\n                    _vm._v(\" \"),\n                    file.status === \"uploading\"\n                      ? _c(\"bk-progress\", {\n                          staticClass: \"media-progress\",\n                          attrs: {\n                            \"show-text\": false,\n                            theme: file.theme || \"success\",\n                            percent: +(file.percentage || 100) / 100,\n                          },\n                        })\n                      : _vm._e(),\n                    _vm._v(\" \"),\n                    file.status === \"uploading\"\n                      ? _c(\n                          \"span\",\n                          { staticClass: \"media-tool-abort media-tool\" },\n                          [\n                            !_vm.disabled\n                              ? _c(\n                                  \"span\",\n                                  {\n                                    on: {\n                                      click: function ($event) {\n                                        return _vm.abortFile(file)\n                                      },\n                                    },\n                                  },\n                                  [\n                                    _c(\"i\", {\n                                      staticClass: \"bk-icon icon-delete\",\n                                    }),\n                                  ]\n                                )\n                              : _vm._e(),\n                          ]\n                        )\n                      : _c(\"span\", { staticClass: \"media-tool\" }, [\n                          !_vm.disabled\n                            ? _c(\n                                \"span\",\n                                {\n                                  on: {\n                                    click: function ($event) {\n                                      return _vm.deleteFile(file)\n                                    },\n                                  },\n                                },\n                                [\n                                  _c(\"i\", {\n                                    staticClass: \"bk-icon icon-delete\",\n                                  }),\n                                ]\n                              )\n                            : _vm._e(),\n                        ]),\n                  ],\n                  1\n                )\n              },\n            },\n          ]),\n        },\n        [\n          _c(\n            \"p\",\n            { staticClass: \"upload-tip\", attrs: { slot: \"tip\" }, slot: \"tip\" },\n            [_vm._v(\"\\n            \" + _vm._s(_vm.tip) + \"\\n        \")]\n          ),\n          _vm._v(\" \"),\n          _c(\"p\", { staticClass: \"upload-title\" }, [\n            _c(\"i\", { staticClass: \"bk-icon icon-plus\" }),\n            _vm._v(\" \"),\n            _c(\"span\", [_vm._v(_vm._s(_vm.$t(\"store.点击上传\")))]),\n          ]),\n        ]\n      ),\n      _vm._v(\" \"),\n      _c(\"zoomImage\", {\n        attrs: { \"img-src\": _vm.imgSrc },\n        on: {\n          \"update:imgSrc\": function ($event) {\n            _vm.imgSrc = $event\n          },\n          \"update:img-src\": function ($event) {\n            _vm.imgSrc = $event\n          },\n        },\n      }),\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\n\n;// CONCATENATED MODULE: ./src/components/upload/index.vue?vue&type=template&id=62f4c554&scoped=true&\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.includes.js\nvar es_array_includes = __webpack_require__(6699);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/web.url.js\nvar web_url = __webpack_require__(285);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/web.url-search-params.js\nvar web_url_search_params = __webpack_require__(1637);\n;// CONCATENATED MODULE: ../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/upload/uploadList.vue?vue&type=template&id=7df464ad&scoped=true&\nvar uploadListvue_type_template_id_7df464ad_scoped_true_render = function () {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"transition-group\",\n    {\n      class: [\n        \"el-upload-list\",\n        \"el-upload-list--\" + _vm.listType,\n        { \"is-disabled\": _vm.disabled },\n      ],\n      attrs: { tag: \"ul\", name: \"fade\" },\n    },\n    _vm._l(_vm.files, function (file) {\n      return _c(\n        \"li\",\n        {\n          key: file.uid,\n          class: [\n            \"el-upload-list__item\",\n            \"is-\" + file.status,\n            _vm.focusing ? \"focusing\" : \"\",\n          ],\n          attrs: { tabindex: \"0\" },\n          on: {\n            keydown: function ($event) {\n              if (\n                !$event.type.indexOf(\"key\") &&\n                _vm._k($event.keyCode, \"delete\", [8, 46], $event.key, [\n                  \"Backspace\",\n                  \"Delete\",\n                  \"Del\",\n                ])\n              ) {\n                return null\n              }\n              !_vm.disabled && _vm.$emit(\"remove\", file)\n            },\n            focus: function () {\n              return (_vm.focusing = true)\n            },\n            blur: function () {\n              return (_vm.focusing = false)\n            },\n            click: function () {\n              return (_vm.focusing = false)\n            },\n          },\n        },\n        [_vm._t(\"default\", null, { file: file })],\n        2\n      )\n    }),\n    0\n  )\n}\nvar uploadListvue_type_template_id_7df464ad_scoped_true_staticRenderFns = []\nuploadListvue_type_template_id_7df464ad_scoped_true_render._withStripped = true\n\n\n;// CONCATENATED MODULE: ./src/components/upload/uploadList.vue?vue&type=template&id=7df464ad&scoped=true&\n\n;// CONCATENATED MODULE: ../node_modules/babel-loader/lib/index.js!../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/upload/uploadList.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ const uploadListvue_type_script_lang_js_ = ({\n  props: {\n    files: {\n      type: Array,\n      default() {\n        return [];\n      }\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    handlePreview: Function,\n    listType: String\n  },\n  data() {\n    return {\n      focusing: false\n    };\n  },\n  methods: {\n    parsePercentage(val) {\n      return parseInt(val, 10);\n    },\n    handleClick(file) {\n      this.handlePreview && this.handlePreview(file);\n    }\n  }\n});\n;// CONCATENATED MODULE: ./src/components/upload/uploadList.vue?vue&type=script&lang=js&\n /* harmony default export */ const upload_uploadListvue_type_script_lang_js_ = (uploadListvue_type_script_lang_js_); \n// EXTERNAL MODULE: ../node_modules/vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(810);\n;// CONCATENATED MODULE: ./src/components/upload/uploadList.vue\n\n\n\n;\n\n\n/* normalize component */\n\nvar component = (0,componentNormalizer/* default */.Z)(\n  upload_uploadListvue_type_script_lang_js_,\n  uploadListvue_type_template_id_7df464ad_scoped_true_render,\n  uploadListvue_type_template_id_7df464ad_scoped_true_staticRenderFns,\n  false,\n  null,\n  \"7df464ad\",\n  null\n  \n)\n\n/* hot reload */\nif (false) { var api; }\ncomponent.options.__file = \"src/components/upload/uploadList.vue\"\n/* harmony default export */ const upload_uploadList = (component.exports);\n// EXTERNAL MODULE: ../node_modules/babel-helper-vue-jsx-merge-props/index.js\nvar babel_helper_vue_jsx_merge_props = __webpack_require__(4085);\nvar babel_helper_vue_jsx_merge_props_default = /*#__PURE__*/__webpack_require__.n(babel_helper_vue_jsx_merge_props);\n;// CONCATENATED MODULE: ./src/components/upload/ajax.js\nfunction getError(action, option, xhr) {\n  let msg;\n  if (xhr.response) {\n    msg = `${xhr.response.error || xhr.response}`;\n  } else if (xhr.responseText) {\n    msg = `${xhr.responseText}`;\n  } else {\n    msg = `fail to post ${action} ${xhr.status}`;\n  }\n  const err = new Error(msg);\n  err.status = xhr.status;\n  err.method = 'post';\n  err.url = action;\n  return err;\n}\nfunction getBody(xhr) {\n  const text = xhr.responseText || xhr.response;\n  if (!text) {\n    return text;\n  }\n  try {\n    return JSON.parse(text);\n  } catch (e) {\n    return text;\n  }\n}\nfunction upload(option) {\n  if (typeof XMLHttpRequest === 'undefined') {\n    return;\n  }\n  const xhr = new XMLHttpRequest();\n  const action = option.action;\n  if (xhr.upload) {\n    xhr.upload.onprogress = function progress(e) {\n      if (e.total > 0) {\n        e.percent = e.loaded / e.total * 100;\n      }\n      option.onProgress(e);\n    };\n  }\n  const formData = new FormData();\n  if (option.data) {\n    Object.keys(option.data).forEach(key => {\n      formData.append(key, option.data[key]);\n    });\n  }\n  formData.append(option.filename, option.file, option.file.name);\n  xhr.onerror = function error(e) {\n    option.onError(e);\n  };\n  xhr.onload = function onload() {\n    if (xhr.status < 200 || xhr.status >= 300) {\n      return option.onError(getError(action, option, xhr));\n    }\n    option.onSuccess(getBody(xhr));\n  };\n  xhr.open('post', action, true);\n  if (option.withCredentials && 'withCredentials' in xhr) {\n    xhr.withCredentials = true;\n  }\n  const headers = option.headers || {};\n  for (const item in headers) {\n    if (Object.prototype.hasOwnProperty.call(headers, item) && headers[item] !== null) {\n      xhr.setRequestHeader(item, headers[item]);\n    }\n  }\n  xhr.send(formData);\n  return xhr;\n}\n;// CONCATENATED MODULE: ../node_modules/babel-loader/lib/index.js!../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/upload/upload.vue?vue&type=script&lang=js&\n\n\n/* harmony default export */ const uploadvue_type_script_lang_js_ = ({\n  inject: ['uploader'],\n  props: {\n    type: String,\n    action: {\n      type: String,\n      required: true\n    },\n    name: {\n      type: String,\n      default: 'file'\n    },\n    data: Object,\n    headers: Object,\n    withCredentials: Boolean,\n    multiple: Boolean,\n    accept: String,\n    onStart: {\n      type: Function,\n      default: () => {}\n    },\n    onProgress: {\n      type: Function,\n      default: function () {}\n    },\n    onSuccess: {\n      type: Function,\n      default: function () {}\n    },\n    onError: Function,\n    beforeUpload: Function,\n    drag: Boolean,\n    onPreview: {\n      type: Function,\n      default: function () {}\n    },\n    onRemove: {\n      type: Function,\n      default: function () {}\n    },\n    fileList: Array,\n    autoUpload: {\n      type: Boolean,\n      default: true\n    },\n    listType: String,\n    httpRequest: {\n      type: Function,\n      default: upload\n    },\n    disabled: Boolean,\n    limit: Number,\n    onExceed: Function\n  },\n  data() {\n    return {\n      mouseover: false,\n      reqs: {}\n    };\n  },\n  methods: {\n    isImage(str) {\n      return str.indexOf('image') !== -1;\n    },\n    handleChange(ev) {\n      const files = ev.target.files;\n      if (!files) return;\n      this.uploadFiles(files);\n    },\n    uploadFiles(files) {\n      if (this.limit && this.fileList.length + files.length > this.limit) {\n        this.onExceed && this.onExceed(files, this.fileList);\n        return;\n      }\n      let postFiles = Array.prototype.slice.call(files);\n      if (!this.multiple) {\n        postFiles = postFiles.slice(0, 1);\n      }\n      if (postFiles.length === 0) {\n        return;\n      }\n      postFiles.forEach(rawFile => {\n        this.onStart(rawFile);\n        if (this.autoUpload) this.upload(rawFile);\n      });\n    },\n    upload(rawFile) {\n      this.$refs.input.value = null;\n      if (!this.beforeUpload) {\n        return this.post(rawFile);\n      }\n      const before = this.beforeUpload(rawFile);\n      if (before && before.then) {\n        before.then(processedFile => {\n          const fileType = Object.prototype.toString.call(processedFile);\n          if (fileType === '[object File]' || fileType === '[object Blob]') {\n            if (fileType === '[object Blob]') {\n              processedFile = new File([processedFile], rawFile.name, {\n                type: rawFile.type\n              });\n            }\n            for (const p in rawFile) {\n              if (Object.prototype.hasOwnProperty.call(rawFile, p)) {\n                processedFile[p] = rawFile[p];\n              }\n            }\n            this.post(processedFile);\n          } else {\n            this.post(rawFile);\n          }\n        }, () => {\n          this.onRemove(null, rawFile);\n        });\n      } else if (before !== false) {\n        this.post(rawFile);\n      } else {\n        this.onRemove(null, rawFile);\n      }\n    },\n    abort(file) {\n      const {\n        reqs\n      } = this;\n      if (file) {\n        let uid = file;\n        if (file.uid) uid = file.uid;\n        if (reqs[uid]) {\n          reqs[uid].abort();\n        }\n      } else {\n        Object.keys(reqs).forEach(uid => {\n          if (reqs[uid]) reqs[uid].abort();\n          delete reqs[uid];\n        });\n      }\n    },\n    post(rawFile) {\n      const {\n        uid\n      } = rawFile;\n      const options = {\n        headers: this.headers,\n        withCredentials: this.withCredentials,\n        file: rawFile,\n        data: this.data,\n        filename: this.name,\n        action: this.action,\n        onProgress: e => {\n          this.onProgress(e, rawFile);\n        },\n        onSuccess: res => {\n          this.onSuccess(res, rawFile);\n          delete this.reqs[uid];\n        },\n        onError: err => {\n          this.onError(err, rawFile);\n          delete this.reqs[uid];\n        }\n      };\n      const req = this.httpRequest(options);\n      this.reqs[uid] = req;\n      if (req && req.then) {\n        req.then(options.onSuccess, options.onError);\n      }\n    },\n    handleClick() {\n      if (!this.disabled) {\n        this.$refs.input.value = null;\n        this.$refs.input.click();\n      }\n    },\n    handleKeydown(e) {\n      if (e.target !== e.currentTarget) return;\n      if (e.keyCode === 13 || e.keyCode === 32) {\n        this.handleClick();\n      }\n    }\n  },\n  render(h) {\n    const {\n      handleClick,\n      name,\n      handleChange,\n      multiple,\n      accept,\n      listType,\n      handleKeydown\n    } = this;\n    const data = {\n      class: {\n        'el-upload': true\n      },\n      on: {\n        click: handleClick,\n        keydown: handleKeydown\n      }\n    };\n    data.class[`el-upload--${listType}`] = true;\n    return h(\"div\", babel_helper_vue_jsx_merge_props_default()([data, {\n      attrs: {\n        tabindex: \"0\"\n      }\n    }]), [this.$slots.default, h(\"input\", {\n      \"class\": \"el-upload__input\",\n      attrs: {\n        type: \"file\",\n        name: name,\n        multiple: multiple,\n        accept: accept\n      },\n      ref: \"input\",\n      on: {\n        \"change\": handleChange\n      }\n    })]);\n  }\n});\n;// CONCATENATED MODULE: ./src/components/upload/upload.vue?vue&type=script&lang=js&\n /* harmony default export */ const upload_uploadvue_type_script_lang_js_ = (uploadvue_type_script_lang_js_); \n;// CONCATENATED MODULE: ./src/components/upload/upload.vue\nvar upload_render, upload_staticRenderFns\n;\n\n;\n\n\n/* normalize component */\n\nvar upload_component = (0,componentNormalizer/* default */.Z)(\n  upload_uploadvue_type_script_lang_js_,\n  upload_render,\n  upload_staticRenderFns,\n  false,\n  null,\n  \"7982db22\",\n  null\n  \n)\n\n/* hot reload */\nif (false) { var upload_api; }\nupload_component.options.__file = \"src/components/upload/upload.vue\"\n/* harmony default export */ const upload_upload = (upload_component.exports);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.regexp.exec.js\nvar es_regexp_exec = __webpack_require__(4916);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.replace.js\nvar es_string_replace = __webpack_require__(5306);\n;// CONCATENATED MODULE: ./src/components/upload/migrating.js\n\n\nfunction kebabCase(str) {\n  const hyphenateRE = /([^-])([A-Z])/g;\n  return str.replace(hyphenateRE, '$1-$2').replace(hyphenateRE, '$1-$2').toLowerCase();\n}\n/* harmony default export */ const migrating = ({\n  mounted() {\n    if (true) return;\n    if (!this.$vnode) return;\n    const {\n      props = {},\n      events = {}\n    } = this.getMigratingConfig();\n    const {\n      data,\n      componentOptions\n    } = this.$vnode;\n    const definedProps = data.attrs || {};\n    const definedEvents = componentOptions.listeners || {};\n    for (let propName in definedProps) {\n      propName = kebabCase(propName);\n      if (props[propName]) {\n        console.warn(`[Element Migrating][${this.$options.name}][Attribute]: ${props[propName]}`);\n      }\n    }\n    for (let eventName in definedEvents) {\n      eventName = kebabCase(eventName);\n      if (events[eventName]) {\n        console.warn(`[Element Migrating][${this.$options.name}][Event]: ${events[eventName]}`);\n      }\n    }\n  },\n  methods: {\n    getMigratingConfig() {\n      return {\n        props: {},\n        events: {}\n      };\n    }\n  }\n});\n;// CONCATENATED MODULE: ../node_modules/babel-loader/lib/index.js!../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/upload/elUpload.vue?vue&type=script&lang=js&\n\n\n\n\n\nfunction noop() {}\n/* harmony default export */ const elUploadvue_type_script_lang_js_ = ({\n  components: {\n    UploadList: upload_uploadList,\n    Upload: upload_upload\n  },\n  mixins: [migrating],\n  provide() {\n    return {\n      uploader: this\n    };\n  },\n  inject: {\n    elForm: {\n      default: ''\n    }\n  },\n  props: {\n    action: {\n      type: String,\n      required: true\n    },\n    headers: {\n      type: Object,\n      default() {\n        return {};\n      }\n    },\n    data: Object,\n    multiple: Boolean,\n    name: {\n      type: String,\n      default: 'file'\n    },\n    drag: Boolean,\n    dragger: Boolean,\n    withCredentials: Boolean,\n    showFileList: {\n      type: Boolean,\n      default: true\n    },\n    accept: String,\n    type: {\n      type: String,\n      default: 'select'\n    },\n    beforeUpload: Function,\n    beforeRemove: Function,\n    onRemove: {\n      type: Function,\n      default: noop\n    },\n    onChange: {\n      type: Function,\n      default: noop\n    },\n    onPreview: {\n      type: Function\n    },\n    onSuccess: {\n      type: Function,\n      default: noop\n    },\n    onProgress: {\n      type: Function,\n      default: noop\n    },\n    onError: {\n      type: Function,\n      default: noop\n    },\n    fileList: {\n      type: Array,\n      default() {\n        return [];\n      }\n    },\n    autoUpload: {\n      type: Boolean,\n      default: true\n    },\n    listType: {\n      type: String,\n      default: 'text' // text,picture,picture-card\n    },\n\n    httpRequest: Function,\n    disabled: Boolean,\n    limit: Number,\n    onExceed: {\n      type: Function,\n      default: noop\n    }\n  },\n  data() {\n    return {\n      uploadFiles: [],\n      dragOver: false,\n      draging: false,\n      tempIndex: 1\n    };\n  },\n  computed: {\n    uploadDisabled() {\n      return this.disabled || (this.elForm || {}).disabled;\n    }\n  },\n  watch: {\n    listType(type) {\n      if (type === 'picture-card' || type === 'picture') {\n        this.uploadFiles = this.uploadFiles.map(file => {\n          if (!file.url && file.raw) {\n            try {\n              file.url = URL.createObjectURL(file.raw);\n            } catch (err) {\n              console.error(err);\n            }\n          }\n          return file;\n        });\n      }\n    },\n    fileList: {\n      immediate: true,\n      handler(fileList) {\n        this.uploadFiles = fileList.map(item => {\n          item.uid = item.uid || Date.now() + this.tempIndex++;\n          item.status = item.status || 'success';\n          return item;\n        });\n      }\n    }\n  },\n  beforeDestroy() {\n    this.uploadFiles.forEach(file => {\n      if (file.url && file.url.indexOf('blob:') === 0) {\n        URL.revokeObjectURL(file.url);\n      }\n    });\n  },\n  methods: {\n    handleStart(rawFile) {\n      rawFile.uid = Date.now() + this.tempIndex++;\n      const file = {\n        status: 'ready',\n        name: rawFile.name,\n        size: rawFile.size,\n        percentage: 0,\n        uid: rawFile.uid,\n        raw: rawFile\n      };\n      if (this.listType === 'picture-card' || this.listType === 'picture') {\n        try {\n          file.url = URL.createObjectURL(rawFile);\n        } catch (err) {\n          console.error(err);\n          return;\n        }\n      }\n      this.uploadFiles.push(file);\n      this.onChange(file, this.uploadFiles);\n    },\n    handleProgress(ev, rawFile) {\n      const file = this.getFile(rawFile);\n      this.onProgress(ev, file, this.uploadFiles);\n      file.status = 'uploading';\n      file.percentage = ev.percent || 0;\n    },\n    handleSuccess(res, rawFile) {\n      const file = this.getFile(rawFile);\n      if (file) {\n        file.status = 'success';\n        file.response = res;\n        this.onSuccess(res, file, this.uploadFiles);\n        this.onChange(file, this.uploadFiles);\n      }\n    },\n    handleError(err, rawFile) {\n      const file = this.getFile(rawFile);\n      const fileList = this.uploadFiles;\n      file.status = 'fail';\n      fileList.splice(fileList.indexOf(file), 1);\n      this.onError(err, file, this.uploadFiles);\n      this.onChange(file, this.uploadFiles);\n    },\n    handleRemove(file, raw) {\n      if (raw) {\n        file = this.getFile(raw);\n      }\n      const doRemove = () => {\n        this.abort(file);\n        const fileList = this.uploadFiles;\n        fileList.splice(fileList.indexOf(file), 1);\n        this.onRemove(file, fileList);\n      };\n      if (!this.beforeRemove) {\n        doRemove();\n      } else if (typeof this.beforeRemove === 'function') {\n        const before = this.beforeRemove(file, this.uploadFiles);\n        if (before && before.then) {\n          before.then(() => {\n            doRemove();\n          }, noop);\n        } else if (before !== false) {\n          doRemove();\n        }\n      }\n    },\n    getFile(rawFile) {\n      const fileList = this.uploadFiles;\n      let target;\n      fileList.every(item => {\n        target = rawFile.uid === item.uid ? item : null;\n        return !target;\n      });\n      return target;\n    },\n    abort(file) {\n      this.$refs['upload-inner'].abort(file);\n    },\n    clearFiles() {\n      this.uploadFiles = [];\n    },\n    submit() {\n      this.uploadFiles.filter(file => file.status === 'ready').forEach(file => {\n        this.$refs['upload-inner'].upload(file.raw);\n      });\n    },\n    getMigratingConfig() {\n      return {\n        props: {\n          'default-file-list': 'default-file-list is renamed to file-list.',\n          'show-upload-list': 'show-upload-list is renamed to show-file-list.',\n          'thumbnail-mode': 'thumbnail-mode has been deprecated, you can implement the same effect according to this case: http://element.eleme.io/#/zh-CN/component/upload#yong-hu-tou-xiang-shang-chuan'\n        }\n      };\n    }\n  },\n  render(h) {\n    let uploadList;\n    if (this.showFileList) {\n      uploadList = h(upload_uploadList, {\n        attrs: {\n          disabled: this.uploadDisabled,\n          listType: this.listType,\n          files: this.fileList,\n          handlePreview: this.onPreview\n        },\n        on: {\n          \"remove\": this.handleRemove\n        }\n      }, [props => {\n        if (this.$scopedSlots.file) {\n          return this.$scopedSlots.file({\n            file: props.file\n          });\n        }\n      }]);\n    }\n    const uploadData = {\n      props: {\n        type: this.type,\n        drag: this.drag,\n        action: this.action,\n        multiple: this.multiple,\n        'before-upload': this.beforeUpload,\n        'with-credentials': this.withCredentials,\n        headers: this.headers,\n        name: this.name,\n        data: this.data,\n        accept: this.accept,\n        fileList: this.fileList,\n        autoUpload: this.autoUpload,\n        listType: this.listType,\n        disabled: this.uploadDisabled,\n        limit: this.limit,\n        'on-exceed': this.onExceed,\n        'on-start': this.handleStart,\n        'on-progress': this.handleProgress,\n        'on-success': this.handleSuccess,\n        'on-error': this.handleError,\n        'on-preview': this.onPreview,\n        'on-remove': this.handleRemove,\n        'http-request': this.httpRequest\n      },\n      ref: 'upload-inner'\n    };\n    const trigger = this.$slots.trigger || this.$slots.default;\n    const uploadComponent = h(\"upload\", uploadData, [trigger]);\n    return h(\"div\", [this.listType === 'picture-card' ? uploadList : '', this.limit > this.fileList.length ? uploadComponent : '', this.$slots.tip, this.listType !== 'picture-card' ? uploadList : '']);\n  }\n});\n;// CONCATENATED MODULE: ./src/components/upload/elUpload.vue?vue&type=script&lang=js&\n /* harmony default export */ const upload_elUploadvue_type_script_lang_js_ = (elUploadvue_type_script_lang_js_); \n;// CONCATENATED MODULE: ./src/components/upload/elUpload.vue\nvar elUpload_render, elUpload_staticRenderFns\n;\n\n\n\n/* normalize component */\n;\nvar elUpload_component = (0,componentNormalizer/* default */.Z)(\n  upload_elUploadvue_type_script_lang_js_,\n  elUpload_render,\n  elUpload_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var elUpload_api; }\nelUpload_component.options.__file = \"src/components/upload/elUpload.vue\"\n/* harmony default export */ const elUpload = (elUpload_component.exports);\n// EXTERNAL MODULE: ./src/components/common/zoomImage/index.vue + 4 modules\nvar zoomImage = __webpack_require__(8871);\n;// CONCATENATED MODULE: ../node_modules/babel-loader/lib/index.js!../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/upload/index.vue?vue&type=script&lang=js&\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n/* harmony default export */ const components_uploadvue_type_script_lang_js_ = ({\n  components: {\n    upload: elUpload,\n    zoomImage: zoomImage/* default */.Z\n  },\n  props: {\n    fileList: Array,\n    type: String,\n    disabled: Boolean,\n    limit: {\n      type: Number,\n      default: 0\n    },\n    size: Number,\n    tip: String\n  },\n  data() {\n    return {\n      imgSrc: ''\n    };\n  },\n  computed: {\n    accept() {\n      let res = 'image/png,image/jpeg,image/jpg,image/gif,image/svg+xml';\n      if (this.type === 'VIDEO') res = 'video/webm,video/ogg,video/mp4';\n      return res;\n    }\n  },\n  methods: {\n    abortFile(file) {\n      this.$refs.upload.abort(file);\n    },\n    handleUpload(res, file) {\n      if (res.status === 0) {\n        const curFileList = [...this.fileList];\n        curFileList.push({\n          mediaUrl: res.data,\n          mediaType: this.type\n        });\n        this.$emit('update:fileList', curFileList);\n      } else {\n        file.theme = 'danger';\n        this.$bkMessage({\n          message: res.message,\n          theme: 'error'\n        });\n      }\n    },\n    deleteFile(file) {\n      const index = this.fileList.findIndex(x => x === file);\n      const curFileList = [...this.fileList];\n      curFileList.splice(index, 1);\n      this.$emit('update:fileList', curFileList);\n    },\n    checkUpload(file) {\n      console.log(file.type);\n      if (+file.size / 1048576 > +this.size) {\n        this.$bkMessage({\n          message: this.$t('store.uploadSize', [this.size]),\n          theme: 'error'\n        });\n        return false;\n      }\n      if (this.limit && this.fileList.length >= this.limit) {\n        this.$bkMessage({\n          message: this.$t('store.uploadLimit', [this.limit]),\n          theme: 'error'\n        });\n        return false;\n      }\n      const fileType = file.type;\n      if (!this.accept.includes(fileType)) {\n        this.$bkMessage({\n          message: this.$t('store.uploadType', [this.accept]),\n          theme: 'error'\n        });\n        return false;\n      }\n      return true;\n    },\n    getPlayOption(mediaUrl) {\n      return {\n        autoplay: false,\n        // 如果为true,浏览器准备好时开始回放。\n        muted: false,\n        // 默认情况下将会消除任何音频。\n        loop: false,\n        // 是否视频一结束就重新开始。\n        preload: 'auto',\n        // 建议浏览器在<video>加载元素后是否应该开始下载视频数据。auto浏览器选择最佳行为,立即开始加载视频（如果浏览器支持）\n        aspectRatio: '1:1',\n        // 将播放器置于流畅模式，并在计算播放器的动态大小时使用该值。值应该代表一个比例 - 用冒号分隔的两个数字（例如\"16:9\"或\"4:3\"）\n        fluid: false,\n        // 当true时，Video.js player将拥有流体大小。换句话说，它将按比例缩放以适应其容器。\n        sources: [{\n          src: mediaUrl // url地址\n        }],\n\n        controlBar: {\n          timeDivider: true,\n          // 当前时间和持续时间的分隔符\n          durationDisplay: true,\n          // 显示持续时间\n          remainingTimeDisplay: false,\n          // 是否显示剩余时间功能\n          fullscreenToggle: true // 是否显示全屏按钮\n        }\n      };\n    }\n  }\n});\n;// CONCATENATED MODULE: ./src/components/upload/index.vue?vue&type=script&lang=js&\n /* harmony default export */ const src_components_uploadvue_type_script_lang_js_ = (components_uploadvue_type_script_lang_js_); \n;// CONCATENATED MODULE: ./src/components/upload/index.vue\n\n\n\n;\n\n\n/* normalize component */\n\nvar components_upload_component = (0,componentNormalizer/* default */.Z)(\n  src_components_uploadvue_type_script_lang_js_,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"62f4c554\",\n  null\n  \n)\n\n/* hot reload */\nif (false) { var components_upload_api; }\ncomponents_upload_component.options.__file = \"src/components/upload/index.vue\"\n/* harmony default export */ const components_upload = (components_upload_component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1278\n");

/***/ })

}]);