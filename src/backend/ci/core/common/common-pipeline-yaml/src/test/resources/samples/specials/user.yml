version: v2.0
name: POST_MASTER
on:
  push:
    branches:
    - master
    branches-ignore:
    - ""
    paths:
    - ""
    paths-ignore:
    - ""
  tag:
    tags:
    - '*'
    tags-ignore:
    - ""
  delete:
    types:
      - branch
  issue:
    action:
      - open
  review:
    types:
      - merge_request
variables:
  123_GIT_KEY: xxxxxx
  123_USERNAME: xxxxxxxxxx
  123_MAKE_PATH: "./"
  123_SERVER: test
  123_APP: xxxxxxxxxx
  APP_NAME: myProject
  CODELIB_ALIAS: xxxxxxxxxx/myProject
  COV_ID: ""
  DIST_DIR: ""
  EPC: "true"
  USER: ""
  is_stream: "true"
resources:
  repositories:
    - repository: pcg/stream-ci-template
      name: stream-ci-template
stages:
- name: 前置信息收集
  label:
  - Build
  jobs:
    job_FxM:
      name: 构建环境-LINUX
      runs-on:
        container:
          image: mirrors.tencent.com/ci/tlinux_ci:3.5.1
        pool-name: docker
      steps:
      - name: 参数预处理
        id: step_5
        run: |+
          echo "打印相关变量哈"
          echo ${{ BK_CI_PIPELINE_NAME }}
          echo ${{ BK_CI_PROJECT_NAME }}
          echo ${{ BK_CI_PROJECT_NAME_CN }}
          echo "打印所有环境变量哈"
          env|sort
- name: 单元测试和代码扫描
  label:
  - Test
  jobs:
    job_0YD:
      name: PCG安全扫描
      runs-on:
        container:
          image: mirrors.tencent.com/ci/tlinux_ci:3.5.1
        pool-name: docker
      steps:
      - template: download-code.yml@stream-ci-template
        parameters:
          checkout: http://xxxxx/${{ variables.CODELIB_ALIAS }}.git
          id: "step_download-code_1"
          localPath: ${{ variables.APP_NAME }}
          pullType: BRANCH
          refName: ${{ ci.branch }}
      - template: codeSecurity.yml@stream-ci-template
        parameters:
          code_lang: go
          code_path: ${{ variables.APP_NAME }}
          id: step_codeSecurity
          only_vul_notify: "1"
    job_7mD:
      name: 腾讯代码规范分析
      runs-on:
        container:
          image: mirrors.tencent.com/ci/tlinux_ci:3.5.1
        pool-name: docker
      steps:
      - template: download-code.yml@stream-ci-template
        parameters:
          checkout: http://xxxxx/${{ variables.CODELIB_ALIAS }}.git
          id: "step_download-code_2"
          localPath: ${{ variables.APP_NAME }}
          pullType: BRANCH
          refName: ${{ ci.branch }}
      - template: codecc.yml@stream-ci-template
        parameters:
          id: step_codecc
          languages:
          - "GOLANG"
          checkerSetType: "openScan"
          tools:
          - "GOML"
    job_jtd:
      name: 同源单元测试
      runs-on:
        container:
          image: mirrors.tencent.com/ci/tlinux_ci:3.5.1
        pool-name: docker
      steps:
      - template: download-code.yml@stream-ci-template
        parameters:
          checkout: http://xxxxx/${{ variables.CODELIB_ALIAS }}.git
          id: "step_download-code_3"
          localPath: ${{ variables.APP_NAME }}
          pullType: BRANCH
          refName: ${{ ci.branch }}
      - template: covPreInfo.yml@stream-ci-template
        parameters:
          id: step_covPreInfo
          fileBothFilterBlack: ${{ ci.workspace }}/${{ variables.APP_NAME }}/cov.blacklist
      - name: UT-单元测试覆盖率
        id: step_8
        run: |
          # 您可以通过setEnv函数设置插件间传递的参数
          # echo "::set-output name=FILENAME::package.zip"
          # 然后在后续的插件的表单中使用${{ FILENAME }}引用这个变量

          # 您可以在质量红线中创建自定义指标，然后通过setGateValue函数设置指标值
          # setGateValue "CodeCoverage" $myValue
          # 然后在质量红线选择相应指标和阈值。若不满足，流水线在执行时将会被卡住

          # cd ${{ ci.workspace }} 可进入当前工作空间目录

          #执行覆盖率并生成产物
          cd ${{ ci.workspace }}/${{ variables.APP_NAME }}

          go test -gcflags=all=-l -v -covermode=count -coverprofile=coverprofile.cov ./... &>report.out

          cat report.out

          if [ $? -gt 0 ]; then
              exit 1
          fi

          cp coverprofile.cov ${{ steps.step_7.outputs.COV_TMP_PATH }}
          cp report.out ${{ steps.step_7.outputs.COV_TMP_PATH }}
          zip -q ${{ ci.build_id }}_test.zip  ${{ steps.step_7.outputs.COV_TMP_PATH }}/*
      - name: 单元测试产物归档
        id: step_9
        uses: UploadArtifactory@1.*
        with:
          filePath: ${{ ci.workspace }}/${{ variables.APP_NAME }}/${{ ci.build_id
            }}_test.zip,${{ ci.workspace }}/${{ variables.APP_NAME }}/report.out
          isCustomize: false
      - template: covParseData.yml@stream-ci-template
        parameters:
          id: step_covParseData
          codeLanguage: golang
- name: 测试产物解析
  label:
  - Test
  jobs:
    job_zPm:
      name: 注册同源
      runs-on:
        container:
          image: mirrors.tencent.com/ci/tlinux_ci:3.5.1
        pool-name: docker
      steps:
      - name: 用例稳定性测试-上报注册
        id: step_11
        uses: caseStabilityRegister@1.*
        with:
          case_stability_mode: 1
          git_url: ${{ BK_CI_GIT_REPO_URL }}
          is_stable: "1"
          lang_type: go
          pipeline_id: ${{ BK_CI_PIPELINE_ID }}
          pipeline_name: ${{ BK_CI_PIPELINE_NAME }}
          project_name: ${{ BK_CI_PROJECT_NAME }}
          project_readable_name: ${{ BK_CI_PROJECT_NAME_CN }}
          sub_eps_biz: 自动关联-无需填写
    job_EDT:
      name: 单元测试结果上报
      runs-on:
        pool-name: agentless
      steps:
      - name: 同源-单元测试产物解析
        id: step_12
        uses: ngtestUnitTest@7.*
        with:
          api_dir: ""
          branch_name: ""
          commit_id: ""
          git_url: ""
          is_static_scan: true
          test_type: "0"
          unit_namespace: ""
      - name: 同源后台质量红线
        id: step_13
        uses: ngtestQuality@1.*
        with:
          custom_group_key: ""
          data_type: all
          env_type: formal
          is_use_apiTest: ${{ is_use_apiTest }}
          is_use_report: ${{ is_use_report }}
          is_use_unitTest: ${{ is_use_unitTest }}
          poll_time: "5"
          test_type: unitest
- name: 编译
  label:
  - Build
  jobs:
    job_aGC:
      name: 编译
      runs-on:
        container:
          image: mirrors.tencent.com/ci/tlinux_ci:3.5.1
        pool-name: docker
      steps:
      - template: download-code.yml@stream-ci-template
        parameters:
          checkout: http://xxxxx/${{ variables.CODELIB_ALIAS }}.git
          id: "step_download-code_4"
          localPath: ${{ variables.APP_NAME }}
          pullType: BRANCH
          refName: ${{ ci.branch }}
      - name: "tRPC编译"
        id: "step_trpc_compile"
        uses: "TrpcCompile@1.*"
        with:
          id: "step_trpc_compile"
          app: ${{ variables.123_APP }}
          code_path: ${{ steps.step_download-code_4.outputs.BK_CI_GIT_REPO_URL }}
          code_tag: ${{ ci.branch }}
          fileName: ${{ variables.APP_NAME }}
          git_key: ${{ variables.123_GIT_KEY }}
          language: golang
          make_path: ${{ variables.123_MAKE_PATH }}
          platEnv: formal
          resetGitConfig: "TRUE"
          server: ${{ variables.123_SERVER }}
          stageList:
          - pull
          - compile
          - tar
          user: ${{ variables.123_USERNAME }}
      - name: 归档构件
        id: step_23
        uses: UploadArtifactory@1.*
        with:
          filePath: ${{ steps.step_trpc_compile.outputs.make_path_abs }}/${{ steps.step_trpc_compile.outputs.file_name
            }}
          isCustomize: false
      - name: Docker构建预处理
        id: step_24
        run: |-
          # 通过./xxx.sh的方式执行脚本
          # 即若脚本中未指定解释器，则使用系统默认的shell

          # 您可以通过setEnv函数设置插件间传递的参数
          # echo "::set-output name=FILENAME::package.zip"
          # 然后在后续的插件的表单中使用${{ FILENAME }}引用这个变量

          # 您可以在质量红线中创建自定义指标，然后通过setGateValue函数设置指标值
          # setGateValue "CodeCoverage" $myValue
          # 然后在质量红线选择相应指标和阈值。若不满足，流水线在执行时将会被卡住

          # cd ${{ ci.workspace }} 可进入当前工作空间目录

          cp ${{ steps.step_trpc_compile.outputs.make_path_abs }}/${{ steps.step_trpc_compile.outputs.file_name }} ${{ ci.workspace }}/${{ variables.APP_NAME }}/scripts/app
      - name: 构建并推送Docker镜像
        id: step_25
        uses: DockerBuildAndPushImage@3.*
        with:
          dockerBuildArgs: ""
          dockerBuildDir: ${{ variables.APP_NAME }}/scripts
          dockerFilePath: ${{ variables.APP_NAME }}/scripts/Dockerfile
          enableProxy: false
          sourceMirrorTicketPair:
          - key: mirrors.tencent.com
            value: mirrors_docker
          sourceRepoItemsStr: []
          targetImage: mirrors.tencent.com/xxxxxxxxxx/${{ variables.APP_NAME }}
          targetImageName: ""
          targetImageTag: v1.0.0
          targetRepoItemStr: []
          targetTicketId: mirrors_docker
