---
version: "v2.0"
name: ""
label: []
triggerOn:
  push:
    branches:
    - "*"
  tag:
    tags:
    - "*"
  mr:
    target-branches:
    - "*"
    action:
    - "open"
    - "reopen"
    - "push-update"
stages:
- name: "stage_1"
  label: []
  if: null
  fast-kill: false
  jobs:
  - id: "job-rGD3LLJ"
    name: "job1"
    mutex: null
    runs-on:
      self-hosted: false
      pool-name: "docker"
      container: null
      agent-selector: null
      workspace: null
      xcode: null
      queue-timeout-minutes: null
      needs: null
    services: null
    if: null
    steps:
    - name: "拉取Git代码"
      id: "1"
      if: null
      if-modify: null
      uses: null
      with:
        autoCrlf: "false"
        refName: "master"
        enableAutoCrlf: "false"
        enableGitLfs: "true"
        enableSubmodule: "true"
        enableVirtualMergeBranch: "true"
        excludePath: ""
        fetchDepth: ""
        includePath: ""
        localPath: ""
        pullType: "BRANCH"
        strategy: "REVERT_UPDATE"
      timeout-minutes: null
      continue-on-error: null
      retry-times: null
      env: null
      run: null
      runAdditionalOptions:
        shell: null
      checkout: ""
    - name: "CCK-腾讯代码分析(最新)"
      id: "2"
      if: null
      if-modify: null
      uses: "CodeccCheckAtomDebug@4.*"
      with:
        languages:
        - "GOLANG"
        checkerSetType: "openScan"
        tools:
        - "GOML"
        asyncTask: false
        asyncTaskId: ""
        goPath: ""
        pyVersion: "py3"
        scriptType: "SHELL"
        script: "# Coverity/Klocwork将通过调用编译脚本来编译您的代码，以追踪深层次的缺陷\n# 请使用依赖的构建工具如maven/cmake等写一个编译脚本build.sh\n# 确保build.sh能够编译代码\n# cd path/to/build.sh\n# sh build.sh"
        languageRuleSetMap:
          GOLANG_RULE:
          - "standard_go"
        C_CPP_RULE: []
        rtxReceiverType: "0"
        rtxReceiverList: []
        botWebhookUrl: ""
        botRemindRange: "1"
        botRemindSeverity: "7"
        botRemaindTools: []
        emailReceiverType: "0"
        emailReceiverList: []
        emailCCReceiverList: []
        instantReportStatus: "2"
        reportDate: []
        reportTime: ""
        reportTools: []
        toolScanType: "1"
        mrCommentEnable: true
        newDefectJudgeFromDate: ""
        transferAuthorList: []
        path: []
        customPath: []
        openScanPrj: false
        GOLANG_RULE:
        - "codecc_default_go"
        GOLANG_TOOL:
        - toolList:
          - "CLOC"
          - "SENSITIVE"
          - "DUPC"
          - "CCN"
        - toolList:
          - "GOML"
      timeout-minutes: null
      continue-on-error: null
      retry-times: null
      env: null
      run: null
      runAdditionalOptions:
        shell: null
      checkout: null
    - name: "CCK-腾讯代码分析(最新)"
      id: "3"
      if: null
      if-modify: null
      uses: "CodeccCheckAtomDebug@4.*"
      with:
        languages:
        - "GOLANG"
        checkerSetType: "openScan"
        tools:
        - "GOML"
        asyncTask: false
        asyncTaskId: ""
        goPath: ""
        pyVersion: "py3"
        scriptType: "SHELL"
        script: "# Coverity/Klocwork将通过调用编译脚本来编译您的代码，以追踪深层次的缺陷\n# 请使用依赖的构建工具如maven/cmake等写一个编译脚本build.sh\n# 确保build.sh能够编译代码\n# cd path/to/build.sh\n# sh build.sh"
        languageRuleSetMap:
          GOLANG_RULE:
          - "standard_go"
        C_CPP_RULE: []
        rtxReceiverType: "0"
        rtxReceiverList: []
        botWebhookUrl: ""
        botRemindRange: "1"
        botRemindSeverity: "7"
        botRemaindTools: []
        emailReceiverType: "0"
        emailReceiverList: []
        emailCCReceiverList: []
        instantReportStatus: "2"
        reportDate: []
        reportTime: ""
        reportTools: []
        toolScanType: "1"
        mrCommentEnable: true
        newDefectJudgeFromDate: ""
        transferAuthorList: []
        path: []
        customPath: []
        openScanPrj: false
        GOLANG_RULE:
        - "codecc_default_go"
        GOLANG_TOOL:
        - toolList:
          - "CLOC"
          - "SENSITIVE"
          - "DUPC"
          - "CCN"
        - toolList:
          - "GOML"
      timeout-minutes: null
      continue-on-error: null
      retry-times: null
      env: null
      run: null
      runAdditionalOptions:
        shell: null
      checkout: null
    - name: "CCK-腾讯代码分析(最新)"
      id: "4"
      if: null
      if-modify: null
      uses: "CodeccCheckAtomDebug@4.*"
      with:
        languages:
        - "GOLANG"
        checkerSetType: "openScan"
        tools:
        - "GOML"
        asyncTask: false
        asyncTaskId: ""
        goPath: ""
        pyVersion: "py3"
        scriptType: "SHELL"
        script: "# Coverity/Klocwork将通过调用编译脚本来编译您的代码，以追踪深层次的缺陷\n# 请使用依赖的构建工具如maven/cmake等写一个编译脚本build.sh\n# 确保build.sh能够编译代码\n# cd path/to/build.sh\n# sh build.sh"
        languageRuleSetMap:
          GOLANG_RULE:
          - "standard_go"
        C_CPP_RULE: []
        rtxReceiverType: "0"
        rtxReceiverList: []
        botWebhookUrl: ""
        botRemindRange: "1"
        botRemindSeverity: "7"
        botRemaindTools: []
        emailReceiverType: "0"
        emailReceiverList: []
        emailCCReceiverList: []
        instantReportStatus: "2"
        reportDate: []
        reportTime: ""
        reportTools: []
        toolScanType: "1"
        mrCommentEnable: true
        newDefectJudgeFromDate: ""
        transferAuthorList: []
        path: []
        customPath: []
        openScanPrj: false
        GOLANG_RULE:
        - "codecc_default_go"
        GOLANG_TOOL:
        - toolList:
          - "CLOC"
          - "SENSITIVE"
          - "DUPC"
          - "CCN"
        - toolList:
          - "GOML"
      timeout-minutes: null
      continue-on-error: null
      retry-times: null
      env: null
      run: null
      runAdditionalOptions:
        shell: null
      checkout: null
    - name: "CCK-腾讯代码分析(最新)"
      id: "5"
      if: null
      if-modify: null
      uses: "CodeccCheckAtomDebug@4.*"
      with:
        languages:
        - "GOLANG"
        checkerSetType: "openScan"
        tools:
        - "GOML"
        asyncTask: false
        asyncTaskId: ""
        goPath: ""
        pyVersion: "py3"
        scriptType: "SHELL"
        script: "# Coverity/Klocwork将通过调用编译脚本来编译您的代码，以追踪深层次的缺陷\n# 请使用依赖的构建工具如maven/cmake等写一个编译脚本build.sh\n# 确保build.sh能够编译代码\n# cd path/to/build.sh\n# sh build.sh"
        languageRuleSetMap:
          GOLANG_RULE:
          - "standard_go"
        C_CPP_RULE: []
        rtxReceiverType: "0"
        rtxReceiverList: []
        botWebhookUrl: ""
        botRemindRange: "1"
        botRemindSeverity: "7"
        botRemaindTools: []
        emailReceiverType: "0"
        emailReceiverList: []
        emailCCReceiverList: []
        instantReportStatus: "2"
        reportDate: []
        reportTime: ""
        reportTools: []
        toolScanType: "1"
        mrCommentEnable: true
        newDefectJudgeFromDate: ""
        transferAuthorList: []
        path: []
        customPath: []
        openScanPrj: false
        GOLANG_RULE:
        - "codecc_default_go"
        GOLANG_TOOL:
        - toolList:
          - "CLOC"
          - "SENSITIVE"
          - "DUPC"
          - "CCN"
        - toolList:
          - "GOML"
      timeout-minutes: null
      continue-on-error: null
      retry-times: null
      env: null
      run: null
      runAdditionalOptions:
        shell: null
      checkout: null
    - name: "CCK-腾讯代码分析(最新)"
      id: "6"
      if: null
      if-modify: null
      uses: "CodeccCheckAtomDebug@4.*"
      with:
        languages:
        - "GOLANG"
        checkerSetType: "openScan"
        tools:
        - "GOML"
        asyncTask: false
        asyncTaskId: ""
        goPath: ""
        pyVersion: "py3"
        scriptType: "SHELL"
        script: "# Coverity/Klocwork将通过调用编译脚本来编译您的代码，以追踪深层次的缺陷\n# 请使用依赖的构建工具如maven/cmake等写一个编译脚本build.sh\n# 确保build.sh能够编译代码\n# cd path/to/build.sh\n# sh build.sh"
        languageRuleSetMap:
          GOLANG_RULE:
          - "standard_go"
        C_CPP_RULE: []
        rtxReceiverType: "0"
        rtxReceiverList: []
        botWebhookUrl: ""
        botRemindRange: "1"
        botRemindSeverity: "7"
        botRemaindTools: []
        emailReceiverType: "0"
        emailReceiverList: []
        emailCCReceiverList: []
        instantReportStatus: "2"
        reportDate: []
        reportTime: ""
        reportTools: []
        toolScanType: "1"
        mrCommentEnable: true
        newDefectJudgeFromDate: ""
        transferAuthorList: []
        path: []
        customPath: []
        openScanPrj: false
        GOLANG_RULE:
        - "codecc_default_go"
        GOLANG_TOOL:
        - toolList:
          - "CLOC"
          - "SENSITIVE"
          - "DUPC"
          - "CCN"
        - toolList:
          - "GOML"
      timeout-minutes: null
      continue-on-error: null
      retry-times: null
      env: null
      run: null
      runAdditionalOptions:
        shell: null
      checkout: null
    - name: "CCK-腾讯代码分析(最新)"
      id: "7"
      if: null
      if-modify: null
      uses: "CodeccCheckAtomDebug@4.*"
      with:
        languages:
        - "GOLANG"
        checkerSetType: "openScan"
        tools:
        - "GOML"
        asyncTask: false
        asyncTaskId: ""
        goPath: ""
        pyVersion: "py3"
        scriptType: "SHELL"
        script: "# Coverity/Klocwork将通过调用编译脚本来编译您的代码，以追踪深层次的缺陷\n# 请使用依赖的构建工具如maven/cmake等写一个编译脚本build.sh\n# 确保build.sh能够编译代码\n# cd path/to/build.sh\n# sh build.sh"
        languageRuleSetMap:
          GOLANG_RULE:
          - "standard_go"
        C_CPP_RULE: []
        rtxReceiverType: "0"
        rtxReceiverList: []
        botWebhookUrl: ""
        botRemindRange: "1"
        botRemindSeverity: "7"
        botRemaindTools: []
        emailReceiverType: "0"
        emailReceiverList: []
        emailCCReceiverList: []
        instantReportStatus: "2"
        reportDate: []
        reportTime: ""
        reportTools: []
        toolScanType: "1"
        mrCommentEnable: true
        newDefectJudgeFromDate: ""
        transferAuthorList: []
        path: []
        customPath: []
        openScanPrj: false
        GOLANG_RULE:
        - "codecc_default_go"
        GOLANG_TOOL:
        - toolList:
          - "CLOC"
          - "SENSITIVE"
          - "DUPC"
          - "CCN"
        - toolList:
          - "GOML"
      timeout-minutes: null
      continue-on-error: null
      retry-times: null
      env: null
      run: null
      runAdditionalOptions:
        shell: null
      checkout: null
    - name: "CCK-腾讯代码分析(最新)"
      id: "9"
      if: null
      if-modify: null
      uses: "CodeccCheckAtomDebug@4.*"
      with:
        languages:
        - "GOLANG"
        checkerSetType: "openScan"
        tools:
        - "GOML"
        asyncTask: false
        asyncTaskId: ""
        goPath: ""
        pyVersion: "py3"
        scriptType: "SHELL"
        script: "# Coverity/Klocwork将通过调用编译脚本来编译您的代码，以追踪深层次的缺陷\n# 请使用依赖的构建工具如maven/cmake等写一个编译脚本build.sh\n# 确保build.sh能够编译代码\n# cd path/to/build.sh\n# sh build.sh"
        languageRuleSetMap:
          GOLANG_RULE:
          - "standard_go"
        C_CPP_RULE: []
        rtxReceiverType: "0"
        rtxReceiverList: []
        botWebhookUrl: ""
        botRemindRange: "1"
        botRemindSeverity: "7"
        botRemaindTools: []
        emailReceiverType: "0"
        emailReceiverList: []
        emailCCReceiverList: []
        instantReportStatus: "2"
        reportDate: []
        reportTime: ""
        reportTools: []
        toolScanType: "1"
        mrCommentEnable: true
        newDefectJudgeFromDate: ""
        transferAuthorList: []
        path: []
        customPath: []
        openScanPrj: false
        GOLANG_RULE:
        - "codecc_default_go"
        GOLANG_TOOL:
        - toolList:
          - "CLOC"
          - "SENSITIVE"
          - "DUPC"
          - "CCN"
        - toolList:
          - "GOML"
      timeout-minutes: null
      continue-on-error: null
      retry-times: null
      env: null
      run: null
      runAdditionalOptions:
        shell: null
      checkout: null
    - name: null
      id: null
      if: null
      if-modify: null
      uses: null
      with: null
      timeout-minutes: null
      continue-on-error: null
      retry-times: null
      env: null
      run: "echo \"template_step_id_1 username world!\"\n"
      runAdditionalOptions:
        shell: null
      checkout: null
    - name: null
      id: null
      if: null
      if-modify: null
      uses: null
      with: null
      timeout-minutes: null
      continue-on-error: null
      retry-times: null
      env: null
      run: "echo \"cyc_step_id_1 username CYC_STEP1!\"\n"
      runAdditionalOptions:
        shell: null
      checkout: null
    - name: null
      id: null
      if: null
      if-modify: null
      uses: null
      with: null
      timeout-minutes: null
      continue-on-error: null
      retry-times: null
      env: null
      run: "echo \"cyc_step_id_3 username STEP6!\"\n"
      runAdditionalOptions:
        shell: null
      checkout: null
    - name: null
      id: null
      if: null
      if-modify: null
      uses: null
      with: null
      timeout-minutes: null
      continue-on-error: null
      retry-times: null
      env: null
      run: "echo \"cyc_step_id_2 username CYC_STEP4!\"\n"
      runAdditionalOptions:
        shell: null
      checkout: null
    - name: null
      id: null
      if: null
      if-modify: null
      uses: null
      with: null
      timeout-minutes: null
      continue-on-error: null
      retry-times: null
      env: null
      run: "echo \"cyc_step_id_6 username STEP6!\"\n"
      runAdditionalOptions:
        shell: null
      checkout: null
    - name: null
      id: null
      if: null
      if-modify: null
      uses: null
      with: null
      timeout-minutes: null
      continue-on-error: null
      retry-times: null
      env: null
      run: "echo \"cyc_step_id_5 username CYC_STEP5!\"\n"
      runAdditionalOptions:
        shell: null
      checkout: null
    if-modify: null
    timeout-minutes: 480
    env: {}
    continue-on-error: false
    strategy: null
    depend-on: []
  if-modify: null
  check-in: null
  check-out: null
resource:
  repositories:
  - repository: "pcg/stream-ci-template"
    name: "stream-ci-template"
    ref: null
    credentials: null
finally: []
