version: v2.0
name: ""
label: []
on:
  push:
    branches:
    - '*'
  tag:
    tags:
    - '*'
  mr:
    target-branches:
    - '*'
    action:
    - open
    - reopen
    - push-update
stages:
- name: stage_1
  label: []
  fast-kill: false
  jobs:
  - id: job-QkcEIsS
    name: job1
    runs-on:
      self-hosted: false
      pool-name: docker
    steps:
    - name: 拉取Git代码
      id: 1
      with:
        autoCrlf: "false"
        refName: master
        enableAutoCrlf: "false"
        enableGitLfs: "true"
        enableSubmodule: "true"
        enableVirtualMergeBranch: "true"
        excludePath: ""
        fetchDepth: ""
        includePath: ""
        localPath: ""
        pullType: BRANCH
        strategy: REVERT_UPDATE
      runAdditionalOptions: {}
      checkout: ""
    - name: CCK-腾讯代码分析(最新)
      id: 2
      uses: CodeccCheckAtomDebug@4.*
      with:
        languages:
        - GOLANG
        checkerSetType: openScan
        tools:
        - GOML
        asyncTask: false
        asyncTaskId: ""
        goPath: ""
        pyVersion: py3
        scriptType: SHELL
        script: |-
          # Coverity/Klocwork将通过调用编译脚本来编译您的代码，以追踪深层次的缺陷
          # 请使用依赖的构建工具如maven/cmake等写一个编译脚本build.sh
          # 确保build.sh能够编译代码
          # cd path/to/build.sh
          # sh build.sh
        languageRuleSetMap:
          GOLANG_RULE:
          - standard_go
        C_CPP_RULE: []
        rtxReceiverType: "0"
        rtxReceiverList: []
        botWebhookUrl: ""
        botRemindRange: "1"
        botRemindSeverity: "7"
        botRemaindTools: []
        emailReceiverType: "0"
        emailReceiverList: []
        emailCCReceiverList: []
        instantReportStatus: "2"
        reportDate: []
        reportTime: ""
        reportTools: []
        toolScanType: "1"
        mrCommentEnable: true
        newDefectJudgeFromDate: ""
        transferAuthorList: []
        path: []
        customPath: []
        openScanPrj: false
        GOLANG_RULE:
        - codecc_default_go
        GOLANG_TOOL:
        - toolList:
          - CLOC
          - SENSITIVE
          - DUPC
          - CCN
        - toolList:
          - GOML
      runAdditionalOptions: {}
    - name: CCK-腾讯代码分析(最新)
      id: 3
      uses: CodeccCheckAtomDebug@4.*
      with:
        languages:
        - GOLANG
        checkerSetType: openScan
        tools:
        - GOML
        asyncTask: false
        asyncTaskId: ""
        goPath: ""
        pyVersion: py3
        scriptType: SHELL
        script: |-
          # Coverity/Klocwork将通过调用编译脚本来编译您的代码，以追踪深层次的缺陷
          # 请使用依赖的构建工具如maven/cmake等写一个编译脚本build.sh
          # 确保build.sh能够编译代码
          # cd path/to/build.sh
          # sh build.sh
        languageRuleSetMap:
          GOLANG_RULE:
          - standard_go
        C_CPP_RULE: []
        rtxReceiverType: "0"
        rtxReceiverList: []
        botWebhookUrl: ""
        botRemindRange: "1"
        botRemindSeverity: "7"
        botRemaindTools: []
        emailReceiverType: "0"
        emailReceiverList: []
        emailCCReceiverList: []
        instantReportStatus: "2"
        reportDate: []
        reportTime: ""
        reportTools: []
        toolScanType: "1"
        mrCommentEnable: true
        newDefectJudgeFromDate: ""
        transferAuthorList: []
        path: []
        customPath: []
        openScanPrj: false
        GOLANG_RULE:
        - codecc_default_go
        GOLANG_TOOL:
        - toolList:
          - CLOC
          - SENSITIVE
          - DUPC
          - CCN
        - toolList:
          - GOML
      runAdditionalOptions: {}
    - name: CCK-腾讯代码分析(最新)
      id: 4
      uses: CodeccCheckAtomDebug@4.*
      with:
        languages:
        - GOLANG
        checkerSetType: openScan
        tools:
        - GOML
        asyncTask: false
        asyncTaskId: ""
        goPath: ""
        pyVersion: py3
        scriptType: SHELL
        script: |-
          # Coverity/Klocwork将通过调用编译脚本来编译您的代码，以追踪深层次的缺陷
          # 请使用依赖的构建工具如maven/cmake等写一个编译脚本build.sh
          # 确保build.sh能够编译代码
          # cd path/to/build.sh
          # sh build.sh
        languageRuleSetMap:
          GOLANG_RULE:
          - standard_go
        C_CPP_RULE: []
        rtxReceiverType: "0"
        rtxReceiverList: []
        botWebhookUrl: ""
        botRemindRange: "1"
        botRemindSeverity: "7"
        botRemaindTools: []
        emailReceiverType: "0"
        emailReceiverList: []
        emailCCReceiverList: []
        instantReportStatus: "2"
        reportDate: []
        reportTime: ""
        reportTools: []
        toolScanType: "1"
        mrCommentEnable: true
        newDefectJudgeFromDate: ""
        transferAuthorList: []
        path: []
        customPath: []
        openScanPrj: false
        GOLANG_RULE:
        - codecc_default_go
        GOLANG_TOOL:
        - toolList:
          - CLOC
          - SENSITIVE
          - DUPC
          - CCN
        - toolList:
          - GOML
      runAdditionalOptions: {}
    - name: CCK-腾讯代码分析(最新)
      id: 5
      uses: CodeccCheckAtomDebug@4.*
      with:
        languages:
        - GOLANG
        checkerSetType: openScan
        tools:
        - GOML
        asyncTask: false
        asyncTaskId: ""
        goPath: ""
        pyVersion: py3
        scriptType: SHELL
        script: |-
          # Coverity/Klocwork将通过调用编译脚本来编译您的代码，以追踪深层次的缺陷
          # 请使用依赖的构建工具如maven/cmake等写一个编译脚本build.sh
          # 确保build.sh能够编译代码
          # cd path/to/build.sh
          # sh build.sh
        languageRuleSetMap:
          GOLANG_RULE:
          - standard_go
        C_CPP_RULE: []
        rtxReceiverType: "0"
        rtxReceiverList: []
        botWebhookUrl: ""
        botRemindRange: "1"
        botRemindSeverity: "7"
        botRemaindTools: []
        emailReceiverType: "0"
        emailReceiverList: []
        emailCCReceiverList: []
        instantReportStatus: "2"
        reportDate: []
        reportTime: ""
        reportTools: []
        toolScanType: "1"
        mrCommentEnable: true
        newDefectJudgeFromDate: ""
        transferAuthorList: []
        path: []
        customPath: []
        openScanPrj: false
        GOLANG_RULE:
        - codecc_default_go
        GOLANG_TOOL:
        - toolList:
          - CLOC
          - SENSITIVE
          - DUPC
          - CCN
        - toolList:
          - GOML
      runAdditionalOptions: {}
    - name: CCK-腾讯代码分析(最新)
      id: 6
      uses: CodeccCheckAtomDebug@4.*
      with:
        languages:
        - GOLANG
        checkerSetType: openScan
        tools:
        - GOML
        asyncTask: false
        asyncTaskId: ""
        goPath: ""
        pyVersion: py3
        scriptType: SHELL
        script: |-
          # Coverity/Klocwork将通过调用编译脚本来编译您的代码，以追踪深层次的缺陷
          # 请使用依赖的构建工具如maven/cmake等写一个编译脚本build.sh
          # 确保build.sh能够编译代码
          # cd path/to/build.sh
          # sh build.sh
        languageRuleSetMap:
          GOLANG_RULE:
          - standard_go
        C_CPP_RULE: []
        rtxReceiverType: "0"
        rtxReceiverList: []
        botWebhookUrl: ""
        botRemindRange: "1"
        botRemindSeverity: "7"
        botRemaindTools: []
        emailReceiverType: "0"
        emailReceiverList: []
        emailCCReceiverList: []
        instantReportStatus: "2"
        reportDate: []
        reportTime: ""
        reportTools: []
        toolScanType: "1"
        mrCommentEnable: true
        newDefectJudgeFromDate: ""
        transferAuthorList: []
        path: []
        customPath: []
        openScanPrj: false
        GOLANG_RULE:
        - codecc_default_go
        GOLANG_TOOL:
        - toolList:
          - CLOC
          - SENSITIVE
          - DUPC
          - CCN
        - toolList:
          - GOML
      runAdditionalOptions: {}
    - name: CCK-腾讯代码分析(最新)
      id: 7
      uses: CodeccCheckAtomDebug@4.*
      with:
        languages:
        - GOLANG
        checkerSetType: openScan
        tools:
        - GOML
        asyncTask: false
        asyncTaskId: ""
        goPath: ""
        pyVersion: py3
        scriptType: SHELL
        script: |-
          # Coverity/Klocwork将通过调用编译脚本来编译您的代码，以追踪深层次的缺陷
          # 请使用依赖的构建工具如maven/cmake等写一个编译脚本build.sh
          # 确保build.sh能够编译代码
          # cd path/to/build.sh
          # sh build.sh
        languageRuleSetMap:
          GOLANG_RULE:
          - standard_go
        C_CPP_RULE: []
        rtxReceiverType: "0"
        rtxReceiverList: []
        botWebhookUrl: ""
        botRemindRange: "1"
        botRemindSeverity: "7"
        botRemaindTools: []
        emailReceiverType: "0"
        emailReceiverList: []
        emailCCReceiverList: []
        instantReportStatus: "2"
        reportDate: []
        reportTime: ""
        reportTools: []
        toolScanType: "1"
        mrCommentEnable: true
        newDefectJudgeFromDate: ""
        transferAuthorList: []
        path: []
        customPath: []
        openScanPrj: false
        GOLANG_RULE:
        - codecc_default_go
        GOLANG_TOOL:
        - toolList:
          - CLOC
          - SENSITIVE
          - DUPC
          - CCN
        - toolList:
          - GOML
      runAdditionalOptions: {}
    - name: CCK-腾讯代码分析(最新)
      id: 9
      uses: CodeccCheckAtomDebug@4.*
      with:
        languages:
        - GOLANG
        checkerSetType: openScan
        tools:
        - GOML
        asyncTask: false
        asyncTaskId: ""
        goPath: ""
        pyVersion: py3
        scriptType: SHELL
        script: |-
          # Coverity/Klocwork将通过调用编译脚本来编译您的代码，以追踪深层次的缺陷
          # 请使用依赖的构建工具如maven/cmake等写一个编译脚本build.sh
          # 确保build.sh能够编译代码
          # cd path/to/build.sh
          # sh build.sh
        languageRuleSetMap:
          GOLANG_RULE:
          - standard_go
        C_CPP_RULE: []
        rtxReceiverType: "0"
        rtxReceiverList: []
        botWebhookUrl: ""
        botRemindRange: "1"
        botRemindSeverity: "7"
        botRemaindTools: []
        emailReceiverType: "0"
        emailReceiverList: []
        emailCCReceiverList: []
        instantReportStatus: "2"
        reportDate: []
        reportTime: ""
        reportTools: []
        toolScanType: "1"
        mrCommentEnable: true
        newDefectJudgeFromDate: ""
        transferAuthorList: []
        path: []
        customPath: []
        openScanPrj: false
        GOLANG_RULE:
        - codecc_default_go
        GOLANG_TOOL:
        - toolList:
          - CLOC
          - SENSITIVE
          - DUPC
          - CCN
        - toolList:
          - GOML
      runAdditionalOptions: {}
    - run: |
        echo "template_step_id_1 username world!"
      runAdditionalOptions: {}
    - run: |
        echo "cyc_step_id_1 username CYC_STEP1!"
      runAdditionalOptions: {}
    - run: |
        echo "cyc_step_id_3 username STEP6!"
      runAdditionalOptions: {}
    - run: |
        echo "cyc_step_id_2 username CYC_STEP4!"
      runAdditionalOptions: {}
    - run: |
        echo "cyc_step_id_6 username STEP6!"
      runAdditionalOptions: {}
    - run: |
        echo "cyc_step_id_5 username CYC_STEP5!"
      runAdditionalOptions: {}
    timeout-minutes: 480
    env: {}
    continue-on-error: false
    depend-on: []
resource:
  repositories:
  - repository: pcg/stream-ci-template
    name: stream-ci-template
finally: []
