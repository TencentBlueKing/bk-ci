---
version: "v2.0"
name: "POST_MASTER"
label: []
triggerOn:
  push:
    branches:
    - "master"
    branches-ignore:
    - ""
    paths:
    - ""
    paths-ignore:
    - ""
  tag:
    tags:
    - "*"
    tags-ignore:
    - ""
  delete:
    types:
    - "branch"
  issue:
    action:
    - "open"
  review:
    types:
    - "merge_request"
variables:
  "123_GIT_KEY":
    value: "xxxxxx"
    readonly: false
    allow-modify-at-startup: false
  "123_USERNAME":
    value: "xxxxxxxxxx"
    readonly: false
    allow-modify-at-startup: false
  "123_MAKE_PATH":
    value: "./"
    readonly: false
    allow-modify-at-startup: false
  "123_SERVER":
    value: "test"
    readonly: false
    allow-modify-at-startup: false
  "123_APP":
    value: "xxxxxxxxxx"
    readonly: false
    allow-modify-at-startup: false
  APP_NAME:
    value: "myProject"
    readonly: false
    allow-modify-at-startup: false
  CODELIB_ALIAS:
    value: "xxxxxxxxxx/myProject"
    readonly: false
    allow-modify-at-startup: false
  COV_ID:
    value: ""
    readonly: false
    allow-modify-at-startup: false
  DIST_DIR:
    value: ""
    readonly: false
    allow-modify-at-startup: false
  EPC:
    value: "true"
    readonly: false
    allow-modify-at-startup: false
  USER:
    value: ""
    readonly: false
    allow-modify-at-startup: false
  is_stream:
    value: "true"
    readonly: false
    allow-modify-at-startup: false
stages:
- name: "前置信息收集"
  label:
  - "28ee946a59f64949a74f3dee40a1bda4"
  if: null
  fast-kill: false
  jobs:
  - id: "job_FxM"
    name: "构建环境-LINUX"
    mutex: null
    runs-on:
      self-hosted: false
      pool-name: "docker"
      container:
        image: "mirrors.tencent.com/ci/tlinux_ci:3.5.1"
        credentials: null
      agent-selector: null
      workspace: null
      queue-timeout-minutes: null
      needs: null
    services: []
    if: null
    steps:
    - name: "参数预处理"
      id: "step_5"
      if: null
      if-modify: null
      uses: null
      with: null
      timeout-minutes: null
      continue-on-error: null
      retry-times: null
      env: null
      run: "echo \"打印相关变量哈\"\necho ${{ BK_CI_PIPELINE_NAME }}\necho ${{ BK_CI_PROJECT_NAME }}\necho ${{ BK_CI_PROJECT_NAME_CN }}\necho \"打印所有环境变量哈\"\nenv|sort\n"
      runAdditionalOptions:
        shell: null
      checkout: null
    if-modify: null
    timeout-minutes: null
    env: null
    continue-on-error: null
    strategy: null
    depend-on: null
  if-modify: null
  check-in: null
  check-out: null
- name: "单元测试和代码扫描"
  label:
  - "d0a06f6986fa4670af65ccad7bb49d3a"
  if: null
  fast-kill: false
  jobs:
  - id: "job_0YD"
    name: "PCG安全扫描"
    mutex: null
    runs-on:
      self-hosted: false
      pool-name: "docker"
      container:
        image: "mirrors.tencent.com/ci/tlinux_ci:3.5.1"
        credentials: null
      agent-selector: null
      workspace: null
      queue-timeout-minutes: null
      needs: null
    services: []
    if: null
    steps:
    - name: "拉取Git代码"
      id: "step_download-code_1"
      if: null
      if-modify: null
      uses: null
      with:
        autoCrlf: "false"
        refName: "${{ ci.branch }}"
        enableAutoCrlf: "false"
        enableGitLfs: "true"
        enableSubmodule: "true"
        enableVirtualMergeBranch: "true"
        excludePath: ""
        fetchDepth: ""
        includePath: ""
        localPath: "${{ variables.APP_NAME }}"
        pullType: "BRANCH"
        strategy: "REVERT_UPDATE"
      timeout-minutes: null
      continue-on-error: null
      retry-times: null
      env: null
      run: null
      runAdditionalOptions:
        shell: null
      checkout: "http://xxxxx/${{ variables.CODELIB_ALIAS }}.git"
    - name: "代码安全扫描"
      id: "step_codeSecurity"
      if: null
      if-modify: null
      uses: "CodeSecurityScan@2.*"
      with:
        code_path: "${{ variables.APP_NAME }}"
        code_lang: "go"
        no_scan_path: "go"
        focuser: ""
        qywxg_id: ""
        only_vul_notify: "1"
      timeout-minutes: null
      continue-on-error: null
      retry-times: null
      env: null
      run: null
      runAdditionalOptions:
        shell: null
      checkout: null
    if-modify: null
    timeout-minutes: null
    env: null
    continue-on-error: null
    strategy: null
    depend-on: null
  - id: "job_7mD"
    name: "腾讯代码规范分析"
    mutex: null
    runs-on:
      self-hosted: false
      pool-name: "docker"
      container:
        image: "mirrors.tencent.com/ci/tlinux_ci:3.5.1"
        credentials: null
      agent-selector: null
      workspace: null
      queue-timeout-minutes: null
      needs: null
    services: []
    if: null
    steps:
    - name: "拉取Git代码"
      id: "step_download-code_2"
      if: null
      if-modify: null
      uses: null
      with:
        autoCrlf: "false"
        refName: "${{ ci.branch }}"
        enableAutoCrlf: "false"
        enableGitLfs: "true"
        enableSubmodule: "true"
        enableVirtualMergeBranch: "true"
        excludePath: ""
        fetchDepth: ""
        includePath: ""
        localPath: "${{ variables.APP_NAME }}"
        pullType: "BRANCH"
        strategy: "REVERT_UPDATE"
      timeout-minutes: null
      continue-on-error: null
      retry-times: null
      env: null
      run: null
      runAdditionalOptions:
        shell: null
      checkout: "http://xxxxx/${{ variables.CODELIB_ALIAS }}.git"
    - name: "CCK-腾讯代码分析(最新)"
      id: "step_codecc"
      if: null
      if-modify: null
      uses: "CodeccCheckAtomDebug@4.*"
      with:
        languages:
        - "GOLANG"
        checkerSetType: "openScan"
        tools:
        - "GOML"
        asyncTask: false
        asyncTaskId: ""
        goPath: ""
        pyVersion: "py3"
        scriptType: "SHELL"
        script: "# Coverity/Klocwork将通过调用编译脚本来编译您的代码，以追踪深层次的缺陷\n# 请使用依赖的构建工具如maven/cmake等写一个编译脚本build.sh\n# 确保build.sh能够编译代码\n# cd path/to/build.sh\n# sh build.sh"
        languageRuleSetMap:
          GOLANG_RULE:
          - "standard_go"
        C_CPP_RULE: []
        rtxReceiverType: "0"
        rtxReceiverList: []
        botWebhookUrl: ""
        botRemindRange: "1"
        botRemindSeverity: "7"
        botRemaindTools: []
        emailReceiverType: "0"
        emailReceiverList: []
        emailCCReceiverList: []
        instantReportStatus: "2"
        reportDate: []
        reportTime: ""
        reportTools: []
        toolScanType: "1"
        mrCommentEnable: true
        newDefectJudgeFromDate: ""
        transferAuthorList: []
        path: []
        customPath: []
        openScanPrj: false
        GOLANG_RULE:
        - "codecc_default_go"
        GOLANG_TOOL:
        - toolList:
          - "CLOC"
          - "SENSITIVE"
          - "DUPC"
          - "CCN"
        - toolList:
          - "GOML"
      timeout-minutes: null
      continue-on-error: null
      retry-times: null
      env: null
      run: null
      runAdditionalOptions:
        shell: null
      checkout: null
    if-modify: null
    timeout-minutes: null
    env: null
    continue-on-error: null
    strategy: null
    depend-on: null
  - id: "job_jtd"
    name: "同源单元测试"
    mutex: null
    runs-on:
      self-hosted: false
      pool-name: "docker"
      container:
        image: "mirrors.tencent.com/ci/tlinux_ci:3.5.1"
        credentials: null
      agent-selector: null
      workspace: null
      queue-timeout-minutes: null
      needs: null
    services: []
    if: null
    steps:
    - name: "拉取Git代码"
      id: "step_download-code_3"
      if: null
      if-modify: null
      uses: null
      with:
        autoCrlf: "false"
        refName: "${{ ci.branch }}"
        enableAutoCrlf: "false"
        enableGitLfs: "true"
        enableSubmodule: "true"
        enableVirtualMergeBranch: "true"
        excludePath: ""
        fetchDepth: ""
        includePath: ""
        localPath: "${{ variables.APP_NAME }}"
        pullType: "BRANCH"
        strategy: "REVERT_UPDATE"
      timeout-minutes: null
      continue-on-error: null
      retry-times: null
      env: null
      run: null
      runAdditionalOptions:
        shell: null
      checkout: "http://xxxxx/${{ variables.CODELIB_ALIAS }}.git"
    - name: "覆盖率-前置信息采集"
      id: "step_covPreInfo"
      if: null
      if-modify: null
      uses: "covPreInfo@5.*"
      with:
        baseCommitEnv: ""
        baseCommitPlugSel: "lastcommit"
        baseCommitType: "plugSel"
        chooseConfigType: "pluginConfigFilter"
        codePath: "${{ ci.workspace }}"
        covProductId: ""
        epBranchName: ""
        epCheck: true
        epMonthFlag: "${{ ep_month_flag }}"
        fileBothFilterBlack: "${{ ci.workspace }}/${{ variables.APP_NAME }}/cov.blacklist"
        fileBothFilterWhite: ""
        fileSuffix: ".go"
        gitMrNumber: "${{ git_mr_number }}"
        gitPullFromType: ""
        gitSubmodule: false
        haveCgiTest: 0
        isReplay: false
        multiGitFlagSwitch: false
        pathBothFilterBlack: ""
        pathBothFilterWhite: ""
        pathFilterType: "pathBothFilter"
        preMRCheck: false
      timeout-minutes: null
      continue-on-error: null
      retry-times: null
      env: null
      run: null
      runAdditionalOptions:
        shell: null
      checkout: null
    - name: "UT-单元测试覆盖率"
      id: "step_8"
      if: null
      if-modify: null
      uses: null
      with: null
      timeout-minutes: null
      continue-on-error: null
      retry-times: null
      env: null
      run: "# 您可以通过setEnv函数设置插件间传递的参数\n# echo \"::set-output name=FILENAME::package.zip\"\n# 然后在后续的插件的表单中使用${{ FILENAME }}引用这个变量\n\n# 您可以在质量红线中创建自定义指标，然后通过setGateValue函数设置指标值\n# setGateValue \"CodeCoverage\" $myValue\n# 然后在质量红线选择相应指标和阈值。若不满足，流水线在执行时将会被卡住\n\n# cd ${{ ci.workspace }} 可进入当前工作空间目录\n\n#执行覆盖率并生成产物\ncd ${{ ci.workspace }}/${{ variables.APP_NAME }}\n\ngo test -gcflags=all=-l -v -covermode=count -coverprofile=coverprofile.cov ./... &>report.out\n\ncat report.out\n\nif [ $? -gt 0 ]; then\n    exit 1\nfi\n\ncp coverprofile.cov ${{ steps.step_7.outputs.COV_TMP_PATH }}\ncp report.out ${{ steps.step_7.outputs.COV_TMP_PATH }}\nzip -q ${{ ci.build_id }}_test.zip  ${{ steps.step_7.outputs.COV_TMP_PATH }}/*\n"
      runAdditionalOptions:
        shell: null
      checkout: null
    - name: "单元测试产物归档"
      id: "step_9"
      if: null
      if-modify: null
      uses: "UploadArtifactory@1.*"
      with:
        filePath: "${{ ci.workspace }}/${{ variables.APP_NAME }}/${{ ci.build_id }}_test.zip,${{ ci.workspace }}/${{ variables.APP_NAME }}/report.out"
        isCustomize: false
      timeout-minutes: null
      continue-on-error: null
      retry-times: null
      env: null
      run: null
      runAdditionalOptions:
        shell: null
      checkout: null
    - name: "覆盖率-后置信息处理"
      id: "step_covParseData"
      if: null
      if-modify: null
      uses: "covParseData@5.*"
      with:
        codeLanguage: "golang"
        codePath: "${{ ci.workspace }}"
        covProduct: ""
        covRobotId: ""
        fileFromType: "local"
        filePath: "${{ ci.workspace }}/coverprofile.cov"
        fileTypeGoLang: "out"
        localPreMr: false
        multiGitFlagSwitch: false
        needMerge: 1
        needReport: "need"
        needRobot: false
        testFromType: "local"
        testType: "unit_test"
      timeout-minutes: null
      continue-on-error: null
      retry-times: null
      env: null
      run: null
      runAdditionalOptions:
        shell: null
      checkout: null
    if-modify: null
    timeout-minutes: null
    env: null
    continue-on-error: null
    strategy: null
    depend-on: null
  if-modify: null
  check-in: null
  check-out: null
- name: "测试产物解析"
  label:
  - "d0a06f6986fa4670af65ccad7bb49d3a"
  if: null
  fast-kill: false
  jobs:
  - id: "job_zPm"
    name: "注册同源"
    mutex: null
    runs-on:
      self-hosted: false
      pool-name: "docker"
      container:
        image: "mirrors.tencent.com/ci/tlinux_ci:3.5.1"
        credentials: null
      agent-selector: null
      workspace: null
      queue-timeout-minutes: null
      needs: null
    services: []
    if: null
    steps:
    - name: "用例稳定性测试-上报注册"
      id: "step_11"
      if: null
      if-modify: null
      uses: "caseStabilityRegister@1.*"
      with:
        case_stability_mode: 1
        git_url: "${{ BK_CI_GIT_REPO_URL }}"
        is_stable: "1"
        lang_type: "go"
        pipeline_id: "${{ BK_CI_PIPELINE_ID }}"
        pipeline_name: "${{ BK_CI_PIPELINE_NAME }}"
        project_name: "${{ BK_CI_PROJECT_NAME }}"
        project_readable_name: "${{ BK_CI_PROJECT_NAME_CN }}"
        sub_eps_biz: "自动关联-无需填写"
      timeout-minutes: null
      continue-on-error: null
      retry-times: null
      env: null
      run: null
      runAdditionalOptions:
        shell: null
      checkout: null
    if-modify: null
    timeout-minutes: null
    env: null
    continue-on-error: null
    strategy: null
    depend-on: null
  - id: "job_EDT"
    name: "单元测试结果上报"
    mutex: null
    runs-on:
      self-hosted: false
      pool-name: "agentless"
      container: null
      agent-selector: null
      workspace: null
      queue-timeout-minutes: null
      needs: null
    services: []
    if: null
    steps:
    - name: "同源-单元测试产物解析"
      id: "step_12"
      if: null
      if-modify: null
      uses: "ngtestUnitTest@7.*"
      with:
        api_dir: ""
        branch_name: ""
        commit_id: ""
        git_url: ""
        is_static_scan: true
        test_type: "0"
        unit_namespace: ""
      timeout-minutes: null
      continue-on-error: null
      retry-times: null
      env: null
      run: null
      runAdditionalOptions:
        shell: null
      checkout: null
    - name: "同源后台质量红线"
      id: "step_13"
      if: null
      if-modify: null
      uses: "ngtestQuality@1.*"
      with:
        custom_group_key: ""
        data_type: "all"
        env_type: "formal"
        is_use_apiTest: "${{ is_use_apiTest }}"
        is_use_report: "${{ is_use_report }}"
        is_use_unitTest: "${{ is_use_unitTest }}"
        poll_time: "5"
        test_type: "unitest"
      timeout-minutes: null
      continue-on-error: null
      retry-times: null
      env: null
      run: null
      runAdditionalOptions:
        shell: null
      checkout: null
    if-modify: null
    timeout-minutes: null
    env: null
    continue-on-error: null
    strategy: null
    depend-on: null
  if-modify: null
  check-in: null
  check-out: null
- name: "编译"
  label:
  - "28ee946a59f64949a74f3dee40a1bda4"
  if: null
  fast-kill: false
  jobs:
  - id: "job_aGC"
    name: "编译"
    mutex: null
    runs-on:
      self-hosted: false
      pool-name: "docker"
      container:
        image: "mirrors.tencent.com/ci/tlinux_ci:3.5.1"
        credentials: null
      agent-selector: null
      workspace: null
      queue-timeout-minutes: null
      needs: null
    services: []
    if: null
    steps:
    - name: "拉取Git代码"
      id: "step_download-code_4"
      if: null
      if-modify: null
      uses: null
      with:
        autoCrlf: "false"
        refName: "${{ ci.branch }}"
        enableAutoCrlf: "false"
        enableGitLfs: "true"
        enableSubmodule: "true"
        enableVirtualMergeBranch: "true"
        excludePath: ""
        fetchDepth: ""
        includePath: ""
        localPath: "${{ variables.APP_NAME }}"
        pullType: "BRANCH"
        strategy: "REVERT_UPDATE"
      timeout-minutes: null
      continue-on-error: null
      retry-times: null
      env: null
      run: null
      runAdditionalOptions:
        shell: null
      checkout: "http://xxxxx/${{ variables.CODELIB_ALIAS }}.git"
    - name: "tRPC编译"
      id: "step_trpc_compile"
      if: null
      if-modify: null
      uses: "TrpcCompile@1.*"
      with:
        id: "step_trpc_compile"
        app: "${{ variables.123_APP }}"
        code_path: "${{ steps.step_download-code_4.outputs.BK_CI_GIT_REPO_URL }}"
        code_tag: "${{ ci.branch }}"
        fileName: "${{ variables.APP_NAME }}"
        git_key: "${{ variables.123_GIT_KEY }}"
        language: "golang"
        make_path: "${{ variables.123_MAKE_PATH }}"
        platEnv: "formal"
        resetGitConfig: "TRUE"
        server: "${{ variables.123_SERVER }}"
        stageList:
        - "pull"
        - "compile"
        - "tar"
        user: "${{ variables.123_USERNAME }}"
      timeout-minutes: null
      continue-on-error: null
      retry-times: null
      env: null
      run: null
      runAdditionalOptions:
        shell: null
      checkout: null
    - name: "归档构件"
      id: "step_23"
      if: null
      if-modify: null
      uses: "UploadArtifactory@1.*"
      with:
        filePath: "${{ steps.step_trpc_compile.outputs.make_path_abs }}/${{ steps.step_trpc_compile.outputs.file_name }}"
        isCustomize: false
      timeout-minutes: null
      continue-on-error: null
      retry-times: null
      env: null
      run: null
      runAdditionalOptions:
        shell: null
      checkout: null
    - name: "Docker构建预处理"
      id: "step_24"
      if: null
      if-modify: null
      uses: null
      with: null
      timeout-minutes: null
      continue-on-error: null
      retry-times: null
      env: null
      run: "# 通过./xxx.sh的方式执行脚本\n# 即若脚本中未指定解释器，则使用系统默认的shell\n\n# 您可以通过setEnv函数设置插件间传递的参数\n# echo \"::set-output name=FILENAME::package.zip\"\n# 然后在后续的插件的表单中使用${{ FILENAME }}引用这个变量\n\n# 您可以在质量红线中创建自定义指标，然后通过setGateValue函数设置指标值\n# setGateValue \"CodeCoverage\" $myValue\n# 然后在质量红线选择相应指标和阈值。若不满足，流水线在执行时将会被卡住\n\n# cd ${{ ci.workspace }} 可进入当前工作空间目录\n\ncp ${{ steps.step_trpc_compile.outputs.make_path_abs }}/${{ steps.step_trpc_compile.outputs.file_name }} ${{ ci.workspace }}/${{ variables.APP_NAME }}/scripts/app"
      runAdditionalOptions:
        shell: null
      checkout: null
    - name: "构建并推送Docker镜像"
      id: "step_25"
      if: null
      if-modify: null
      uses: "DockerBuildAndPushImage@3.*"
      with:
        dockerBuildArgs: ""
        dockerBuildDir: "${{ variables.APP_NAME }}/scripts"
        dockerFilePath: "${{ variables.APP_NAME }}/scripts/Dockerfile"
        enableProxy: false
        sourceMirrorTicketPair:
        - key: "mirrors.tencent.com"
          value: "mirrors_docker"
        sourceRepoItemsStr: []
        targetImage: "mirrors.tencent.com/xxxxxxxxxx/${{ variables.APP_NAME }}"
        targetImageName: ""
        targetImageTag: "v1.0.0"
        targetRepoItemStr: []
        targetTicketId: "mirrors_docker"
      timeout-minutes: null
      continue-on-error: null
      retry-times: null
      env: null
      run: null
      runAdditionalOptions:
        shell: null
      checkout: null
    if-modify: null
    timeout-minutes: null
    env: null
    continue-on-error: null
    strategy: null
    depend-on: null
  if-modify: null
  check-in: null
  check-out: null
resource:
  repositories:
  - repository: "pcg/stream-ci-template"
    name: "stream-ci-template"
    ref: null
    credentials: null
finally: []
