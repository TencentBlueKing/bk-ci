buildscript {
    ext {
        kotlinVersion = "1.3.21"
        gradleShadowVersion = "2.0.2"
        gradleDependencyVersion = "1.0.7.RELEASE"
        springBootVersion = "1.5.11.RELEASE"
        springBootRedisVersion = "1.5.11.RELEASE"
        springConsulVersion = "1.3.0.RELEASE"
        swaggerVersion = "1.5.17"
        jaxrsVersion = "2.0"
        jacksonVersion = "2.10.0"
        esVersion = "5.6.14"
        searchGuardSSLVersion = "5.6.14-23"
        hashidsVersion = "1.0.3"
        feignVersion = "9.5.1"
        svnkitVersion = "1.9.3"
        vmwareVersion = "5.1"
        okHttpVersion = "3.9.1"
        commonExecVersion = "1.3"
        bouncyCastleVersion = "1.46"
        dom4jVersion = "1.6.1"
        slf4jVersion = "1.7.30"
        mockitoVersion = "1.10.19"
        httpclientVersion = "4.5.2"
        compressVersion = "1.15"
        jjwtVersion = "0.9.0"
        jsonLibVersion = "2.4"
        commonLang3Version = "3.5"
        guavaVersion = "21.0"
        cronutilsVersion = "7.0.1"
        reflectionsVersion = "0.9.11"
        jsonSchemaVersion = "2.2.6"
        logbackVersion = "1.1.11"
        jasyptVersion = "2.0.0"
        jolokiaVersion = "1.6.0"
        awsS3Version = "1.11.461"
        poiVersion = "3.17"
        lombokVersion = "1.16.20"
        tomcatEmbedCoreVersion = "9.0.14"
        commonCollection = "3.2.2"
        commonPool2Version = "2.6.0"
        lettuceVersion = "4.5.0.Final"
        springRedisVersion = "1.8.7.RELEASE"
        jerseyValidationVersion = "2.21"
        commonsIOVersion = "2.5"
        xmlrpcVersion = "3.1.3"
        commonsHttpclientVersion = "3.1"
        ciVersion = "1.5.8-RELEASE"
        jsonVersion = "20180130"
        log4jVersion = "2.15.0"
    }

    def mavenRepoUrl = System.getProperty("mavenRepoUrl")
    if (mavenRepoUrl == null) {
        mavenRepoUrl = System.getenv("mavenRepoUrl")
    }
    if (mavenRepoUrl == null) {
        mavenRepoUrl = MAVEN_REPO_URL
    }

    repositories {
        mavenLocal ()
        maven { url mavenRepoUrl }
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath "io.spring.gradle:dependency-management-plugin:$gradleDependencyVersion"
        classpath "com.github.jengelman.gradle.plugins:shadow:$gradleShadowVersion"
        classpath 'org.ajoberstar:grgit:1.1.0'
    }
}

ext {
    // Open the Git repository in the current directory.
    git = org.ajoberstar.grgit.Grgit.open(file('../../../'))

    // Get commit id of HEAD.
    commit = git.head()
    // Alternative is using abbreviatedId of head() method.
    // revision = git.head().abbreviatedId
}

allprojects {
    group "com.tencent.bk.codecc"
    version "1.3.0-rc.16" // 总版本

    def snapshot = System.getProperty("snapshot")
    if (snapshot == "true") {
        version = version + "-SNAPSHOT"
    } else {
        version = version + "-RELEASE"
    }

    def mavenRepoUrl = System.getProperty("mavenRepoUrl")
    if (mavenRepoUrl == null) {
        mavenRepoUrl = System.getenv("mavenRepoUrl")
    }
    if (mavenRepoUrl == null) {
        mavenRepoUrl = MAVEN_REPO_URL
    }

    repositories {
        mavenLocal()
        maven { url mavenRepoUrl }
        mavenCentral()
        jcenter()
    }

    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }

}

subprojects {
    apply plugin: "idea"
    apply plugin: "java"
    apply plugin: "kotlin"
    apply plugin: "io.spring.dependency-management"
    apply plugin: "kotlin-spring"
    apply plugin: "maven"

    idea {
        module {
            downloadJavadoc = false
            downloadSources = false
        }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = "1.8"
            javaParameters = true
        }
    }

    tasks.withType(JavaCompile).all {
        options.encoding = "UTF-8"
        options.compilerArgs.add '-parameters'
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }


    configurations {
        ktlint
        all*.exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
        all*.exclude group: "org.springframework.boot", module: "spring-boot-starter-tomcat"
        def job = /^biz-codeccjob.*/
        if (!(project.name ==~ job) && project.name != "boot-codeccjob") {
            all*.exclude group: "org.springframework.boot", module: "spring-boot-starter-websocket"
            all*.exclude group: "io.undertow", module: "undertow-websockets-jsr"
        }
        all*.exclude group: "org.apache.tomcat", module: "tomcat-jdbc"
        all*.exclude group: "org.slf4j", module: "log4j-over-slf4j"
        all*.exclude group: "org.slf4j", module: "slf4j-log4j12"
        all*.exclude group: "org.slf4j", module: "slf4j-nop"
        all*.exclude group: "com.tencent.bk.devops.ci.common", module: "common-archive-tencent"
        all*.exclude group: "com.github.ulisesbocchio", module: "jasypt-spring-boot-starter"
    }

    dependencies {
        ktlint "com.github.shyiko:ktlint:0.29.0"
        testCompile group: 'com.github.shyiko', name: 'ktlint', version: '0.29.0'
        testCompile "junit:junit"
        testCompile "org.mockito:mockito-all"
        testCompile "com.nhaarman:mockito-kotlin-kt1.1:1.6.0"
    }

    task ktlint(type: JavaExec, group: "verification") {
        description = "Check Kotlin code style."
        classpath = configurations.ktlint
        main = "com.github.shyiko.ktlint.Main"
        args "src/**/*.kt"
        // to generate report in checkstyle format prepend following args:
        // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
        // see https://github.com/shyiko/ktlint#usage for more
    }

    task ktlintFormat(type: JavaExec, group: "formatting") {
        description = "Fix Kotlin code style deviations."
        classpath = configurations.ktlint
        main = "com.github.shyiko.ktlint.Main"
        args "-F", "src/**/*.kt"
    }


    dependencyManagement {
        applyMavenExclusions = false

        dependencies {
            imports {
                mavenBom "org.springframework.boot:spring-boot-dependencies:$springBootVersion"
            }
            dependency "com.floragunn:search-guard-ssl:$searchGuardSSLVersion"
            dependency "org.elasticsearch:elasticsearch:$esVersion"
            dependency "org.elasticsearch.client:transport:$esVersion"
            dependency "org.elasticsearch.plugin:transport-netty4-client:$esVersion"
            dependency "org.hashids:hashids:$hashidsVersion"
            dependency "javax.ws.rs:javax.ws.rs-api:$jaxrsVersion"
            dependency "org.tmatesoft.svnkit:svnkit:$svnkitVersion"
            dependency "com.squareup.okhttp3:okhttp:$okHttpVersion"
            dependency "org.apache.httpcomponents:httpclient:$httpclientVersion"
            dependency "org.apache.commons:commons-exec:$commonExecVersion"
            dependency "org.apache.commons:commons-pool2:$commonPool2Version"
            dependency "com.vmware:vijava:$vmwareVersion"
            dependency "org.bouncycastle:bcprov-jdk16:$bouncyCastleVersion"
            dependency "dom4j:dom4j:$dom4jVersion"
            dependency "org.apache.commons:commons-compress:$compressVersion"
            dependency "org.reflections:reflections:$reflectionsVersion"
            dependency "com.github.fge:json-schema-validator:$jsonSchemaVersion"
            //dependency "com.github.ulisesbocchio:jasypt-spring-boot-starter:$jasyptVersion"
            dependency "org.jolokia:jolokia-core:$jolokiaVersion"
            dependency "org.projectlombok:lombok:$lombokVersion"
            dependency "org.apache.tomcat.embed:tomcat-embed-core:$tomcatEmbedCoreVersion"
            dependency "commons-collections:commons-collections:$commonCollection"
            dependency "biz.paluch.redis:lettuce:$lettuceVersion"
            dependency "org.springframework.data:spring-data-redis:$springRedisVersion"
            dependency "org.glassfish.jersey.ext:jersey-bean-validation:$jerseyValidationVersion"
            dependency "commons-io:commons-io:$commonsIOVersion"
            dependency "org.apache.xmlrpc:xmlrpc-client:$xmlrpcVersion"
            dependency "commons-httpclient:commons-httpclient:$commonsHttpclientVersion"
            dependencySet(group: "org.springframework.cloud", version: "$springConsulVersion") {
                entry "spring-cloud-starter-consul-discovery"
                entry "spring-cloud-starter-consul-core"
            }
            dependencySet(group: "io.swagger", version: "$swaggerVersion") {
                entry "swagger-annotations"
                entry "swagger-jersey2-jaxrs"
            }
            dependencySet(group: "com.fasterxml.jackson.module", version: "$jacksonVersion") {
                entry "jackson-module-kotlin"
            }
            dependencySet(group: "com.fasterxml.jackson.core", version: "$jacksonVersion") {
                entry "jackson-core"
                entry "jackson-databind"
                entry "jackson-annotations"
            }
            dependencySet(group: "com.fasterxml.jackson.jaxrs", version: "$jacksonVersion") {
                entry "jackson-jaxrs-json-provider"
                entry "jackson-jaxrs-base"
            }
            dependencySet(group: "io.github.openfeign", version: "$feignVersion") {
                entry "feign-jaxrs"
                entry "feign-okhttp"
                entry "feign-jackson"
            }
            dependencySet(group: "org.slf4j", version: "$slf4jVersion") {
                entry "slf4j-api"
                entry "slf4j-simple"
            }
            dependencySet(group: "io.jsonwebtoken", version: "$jjwtVersion") {
                entry "jjwt"
            }
            dependencySet(group: 'org.mockito', version: "$mockitoVersion") {
                entry "mockito-all"
            }
            dependencySet(group: 'net.sf.json-lib', version: "$jsonLibVersion") {
                entry "json-lib"
            }
            dependencySet(group: 'com.cronutils', version: "$cronutilsVersion") {
                entry "cron-utils"
            }
            dependencySet(group: 'ch.qos.logback', version: "$logbackVersion") {
                entry "logback-core"
                entry "logback-classic"
            }
            dependencySet(group: 'org.springframework.boot', version: "$springBootRedisVersion") {
                entry "spring-boot-starter-data-redis"
            }
            dependencySet(group: 'com.amazonaws', version: "$awsS3Version") {
                entry "aws-java-sdk-s3"
            }
            dependencySet(group: 'org.apache.poi', version: "$poiVersion") {
                entry "poi"
                entry "poi-ooxml"
            }
            dependency "org.springframework.boot:spring-boot-starter-test:$springBootVersion"
            dependency "org.json:json:$jsonVersion"
            dependencySet(group: 'org.apache.logging.log4j', version: "$log4jVersion") {
                entry "log4j-api"
                entry "log4j-core"
                entry "log4j-slf4j-impl"
            }
        }
    }

}


